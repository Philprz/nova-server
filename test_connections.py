#!/usr/bin/env python3
# test_connections.py - Script pour tester les connexions syst√®me

import asyncio
import sys
import os

# Ajouter le r√©pertoire parent au path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.mcp_connector import MCPConnector
import logging

# Configuration logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_all_connections():
    """Test complet des connexions syst√®me"""
    print("üîç === TEST DES CONNEXIONS SYST√àME ===")
    
    # Test 1: Connexions g√©n√©rales
    print("\n1Ô∏è‚É£ Test des connexions g√©n√©rales...")
    try:
        connections = await MCPConnector.test_connections()
        print(f"‚úÖ R√©sultat: {connections}")
        
        sf_connected = connections.get('salesforce', {}).get('connected', False)
        sap_connected = connections.get('sap', {}).get('connected', False)
        
        print(f"üìä Salesforce: {'‚úÖ Connect√©' if sf_connected else '‚ùå D√©connect√©'}")
        print(f"üè≠ SAP: {'‚úÖ Connect√©' if sap_connected else '‚ùå D√©connect√©'}")
        
    except Exception as e:
        print(f"‚ùå Erreur test connexions: {e}")

    # Test 2: Salesforce sp√©cifique
    print("\n2Ô∏è‚É£ Test Salesforce sp√©cifique...")
    try:
        sf_result = await MCPConnector.call_salesforce_mcp("salesforce_query", {
            "query": "SELECT Id, Name FROM Account LIMIT 3"
        })
        
        if "error" in sf_result:
            print(f"‚ùå Erreur Salesforce: {sf_result['error']}")
        else:
            print(f"‚úÖ Salesforce OK - {sf_result.get('totalSize', 0)} comptes trouv√©s")
            # Afficher les comptes
            for record in sf_result.get('records', []):
                print(f"   - {record.get('Name')} (ID: {record.get('Id')})")
                
    except Exception as e:
        print(f"‚ùå Erreur Salesforce: {e}")

    # Test 3: SAP sp√©cifique
    print("\n3Ô∏è‚É£ Test SAP sp√©cifique...")
    try:
        sap_result = await MCPConnector.call_sap_mcp("ping", {})
        
        if "error" in sap_result:
            print(f"‚ùå Erreur SAP: {sap_result['error']}")
        else:
            print(f"‚úÖ SAP Ping OK: {sap_result}")
            
        # Test requ√™te clients SAP
        print("\n   Test requ√™te clients SAP...")
        sap_clients = await MCPConnector.call_sap_mcp("sap_read", {
            "endpoint": "/BusinessPartners?$filter=CardType eq 'cCustomer'&$top=3",
            "method": "GET"
        })
        
        if "error" in sap_clients:
            print(f"‚ùå Erreur clients SAP: {sap_clients['error']}")
        else:
            print(f"‚úÖ Clients SAP OK - {len(sap_clients.get('value', []))} clients")
            # Afficher les clients
            for client in sap_clients.get('value', [])[:3]:
                print(f"   - {client.get('CardName')} (Code: {client.get('CardCode')})")
                
    except Exception as e:
        print(f"‚ùå Erreur SAP: {e}")

    # Test 4: Produits SAP (FONCTION CORRIG√âE)
    print("\n4Ô∏è‚É£ Test produits SAP...")
    try:
        sap_products = await MCPConnector.call_sap_mcp("sap_read", {
            "endpoint": "/Items?$top=3",
            "method": "GET"
        })
        
        if "error" in sap_products:
            print(f"‚ùå Erreur produits SAP: {sap_products['error']}")
        else:
            print(f"‚úÖ Produits SAP OK - {len(sap_products.get('value', []))} produits")
            # Afficher les produits
            for product in sap_products.get('value', [])[:3]:
                print(f"   - {product.get('ItemName')} (Code: {product.get('ItemCode')})")
                
        # Test 4b: D√©tails d'un produit sp√©cifique (si on en a trouv√© un)
        if sap_products.get('value') and len(sap_products['value']) > 0:
            first_product_code = sap_products['value'][0].get('ItemCode')
            if first_product_code:
                print(f"\n   Test d√©tails produit {first_product_code}...")
                product_details = await MCPConnector.call_sap_mcp("sap_get_product_details", {
                    "item_code": first_product_code
                })
                
                if "error" in product_details:
                    print(f"‚ùå Erreur d√©tails produit: {product_details['error']}")
                else:
                    print(f"‚úÖ D√©tails produit OK - Prix: {product_details.get('Price', 'N/A')}")
                    
    except Exception as e:
        print(f"‚ùå Erreur produits SAP: {e}")

    # Test 5: Recherche SAP (test de sap_search)
    print("\n5Ô∏è‚É£ Test recherche SAP...")
    try:
        search_result = await MCPConnector.call_sap_mcp("sap_search", {
            "query": "test",
            "entity_type": "Items", 
            "limit": 2
        })
        
        if "error" in search_result:
            print(f"‚ùå Erreur recherche SAP: {search_result['error']}")
        else:
            results = search_result.get('results', [])
            print(f"‚úÖ Recherche SAP OK - {len(results)} r√©sultats")
            for result in results[:2]:
                print(f"   - {result.get('ItemName', 'N/A')} (Code: {result.get('ItemCode', 'N/A')})")
                
    except Exception as e:
        print(f"‚ùå Erreur recherche SAP: {e}")
                
    except Exception as e:
        print(f"‚ùå Erreur produits SAP: {e}")
    print("\nüéØ === R√âSUM√â DES TESTS ===")
    print("Si toutes les connexions sont ‚úÖ, vous pouvez activer le mode production.")
    print("Si certaines connexions sont ‚ùå, v√©rifiez la configuration dans le fichier .env")

if __name__ == "__main__":
    asyncio.run(test_all_connections())