# main.py - Modification pour int√©grer les tests au d√©marrage

import asyncio
import os
import logging
from datetime import datetime
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse, JSONResponse

# Imports existants
from services.module_loader import ModuleLoader
from services.health_checker import NovaHealthChecker  # NOUVEAU

# Configuration logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('nova_server.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Variable globale pour stocker les r√©sultats des tests
HEALTH_CHECK_RESULTS = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestionnaire de cycle de vie de l'application avec v√©rifications de sant√©"""
    global HEALTH_CHECK_RESULTS
    
    logger.info("=" * 60)
    logger.info("üöÄ D√âMARRAGE DU SYST√àME NOVA")
    logger.info("=" * 60)
    
    try:
        # 1. V√âRIFICATIONS DE SANT√â COMPL√àTES
        logger.info("üè• Lancement des v√©rifications de sant√© syst√®me...")
        health_checker = NovaHealthChecker()
        HEALTH_CHECK_RESULTS = await health_checker.run_full_health_check()
        
        # Affichage du rapport de sant√©
        status = HEALTH_CHECK_RESULTS["nova_system_status"]
        success_rate = HEALTH_CHECK_RESULTS["summary"]["success_rate"]
        
        logger.info("-" * 50)
        logger.info(f"üìã RAPPORT DE SANT√â NOVA")
        logger.info(f"   Statut global: {status.upper()}")
        logger.info(f"   Taux de succ√®s: {success_rate}%")
        logger.info(f"   Tests r√©ussis: {HEALTH_CHECK_RESULTS['summary']['successful']}")
        logger.info(f"   Erreurs: {HEALTH_CHECK_RESULTS['summary']['errors']}")
        logger.info(f"   Avertissements: {HEALTH_CHECK_RESULTS['summary']['warnings']}")
        logger.info("-" * 50)
        
        # Recommandations si n√©cessaire
        if HEALTH_CHECK_RESULTS["recommendations"]:
            logger.info("üí° RECOMMANDATIONS:")
            for rec in HEALTH_CHECK_RESULTS["recommendations"]:
                logger.info(f"   {rec}")
            logger.info("-" * 50)
        
        # Arr√™t si syst√®me critique d√©faillant
        if status == "unhealthy":
            logger.error("‚ùå SYST√àME CRITIQUE NON OP√âRATIONNEL")
            logger.error("   Impossible de d√©marrer NOVA avec des erreurs critiques")
            # En production, vous pourriez vouloir lever une exception ici
            # raise RuntimeError("Syst√®me non op√©rationnel")
        elif status == "degraded":
            logger.warning("‚ö†Ô∏è SYST√àME EN MODE D√âGRAD√â")
            logger.warning("   Certaines fonctionnalit√©s peuvent √™tre limit√©es")
        else:
            logger.info("‚úÖ SYST√àME NOVA ENTI√àREMENT OP√âRATIONNEL")
        
        # 2. CHARGEMENT DES MODULES (existant)
        logger.info("üîß Chargement des modules...")
        loader = ModuleLoader(app)
        app.state.module_loader = loader
        await loader.load_all_modules()
        
        # Statistiques modules
        loaded_modules = loader.get_loaded_modules()
        logger.info(f"üì¶ Modules charg√©s: {len([m for m in loaded_modules.values() if m.get('loaded')])}")
        
        # 3. FINALISATION DU D√âMARRAGE
        logger.info("=" * 60)
        logger.info("üéâ NOVA D√âMARR√â AVEC SUCC√àS")
        logger.info("   Interface: http://localhost:8000/api/assistant/interface")
        logger.info("   Sant√©: http://localhost:8000/health")
        logger.info("   Documentation: http://localhost:8000/docs")
        logger.info("=" * 60)
        
        # Le serveur est maintenant pr√™t
        yield
        
    except Exception as e:
        logger.error(f"‚ùå Erreur critique au d√©marrage: {str(e)}")
        raise
    
    # Nettoyage √† l'arr√™t
    finally:
        logger.info("üõë Arr√™t du syst√®me NOVA")

# Cr√©ation de l'application avec le gestionnaire de cycle de vie
app = FastAPI(
    title="NOVA - Assistant IA pour Devis",
    description="Int√©gration Claude + SAP + Salesforce pour g√©n√©ration automatique de devis",
    version="2.1.0",
    lifespan=lifespan
)

# Configuration des fichiers statiques
if os.path.exists("static"):
    app.mount("/static", StaticFiles(directory="static"), name="static")

# =====================================
# ENDPOINTS DE SANT√â ET DIAGNOSTIC
# =====================================

@app.get("/health")
async def health():
    """Endpoint de sant√© avec r√©sultats des v√©rifications de d√©marrage"""
    global HEALTH_CHECK_RESULTS
    
    try:
        # V√©rification basique en temps r√©el
        basic_health = {
            "service": "NOVA Server",
            "status": "active",
            "timestamp": datetime.now().isoformat(),
            "uptime_info": "Service op√©rationnel"
        }
        
        # Ajout des r√©sultats d√©taill√©s si disponibles
        if HEALTH_CHECK_RESULTS:
            return {
                **basic_health,
                "system_status": HEALTH_CHECK_RESULTS["nova_system_status"],
                "startup_tests": {
                    "success_rate": HEALTH_CHECK_RESULTS["summary"]["success_rate"],
                    "successful_tests": HEALTH_CHECK_RESULTS["summary"]["successful"],
                    "total_tests": HEALTH_CHECK_RESULTS["summary"]["total_tests"],
                    "recommendations": HEALTH_CHECK_RESULTS["recommendations"]
                },
                "detailed_results": HEALTH_CHECK_RESULTS["detailed_results"],
                "last_check": HEALTH_CHECK_RESULTS["timestamp"]
            }
        else:
            return basic_health
        
    except Exception as e:
        logger.error(f"Erreur lors du health check: {str(e)}")
        return JSONResponse(
            status_code=503,
            content={
                "status": "error",
                "service": "NOVA Server", 
                "timestamp": datetime.now().isoformat(),
                "error": str(e),
                "message": "Service partiellement disponible"
            }
        )

@app.get("/diagnostic/connections")
async def diagnostic_connections():
    """Endpoint de diagnostic d√©taill√© des connexions"""
    if not HEALTH_CHECK_RESULTS:
        raise HTTPException(status_code=503, detail="Tests de d√©marrage non disponibles")
    
    # Extraction des r√©sultats de connexion
    connection_tests = {}
    for test_name, result in HEALTH_CHECK_RESULTS["detailed_results"].items():
        if any(keyword in test_name for keyword in ["connection", "api", "database"]):
            connection_tests[test_name] = result
    
    return {
        "connections_status": connection_tests,
        "summary": {
            "total_connections": len(connection_tests),
            "healthy_connections": sum(1 for r in connection_tests.values() if r["status"] == "success"),
            "degraded_connections": sum(1 for r in connection_tests.values() if r["status"] == "warning")
        },
        "last_check": HEALTH_CHECK_RESULTS["timestamp"]
    }

@app.get("/diagnostic/data-retrieval") 
async def diagnostic_data_retrieval():
    """Endpoint de diagnostic de la r√©cup√©ration de donn√©es"""
    if not HEALTH_CHECK_RESULTS:
        raise HTTPException(status_code=503, detail="Tests de d√©marrage non disponibles")
    
    # Extraction des r√©sultats de r√©cup√©ration de donn√©es
    data_tests = {}
    for test_name, result in HEALTH_CHECK_RESULTS["detailed_results"].items():
        if "data_retrieval" in test_name:
            data_tests[test_name] = result
    
    return {
        "data_retrieval_status": data_tests,
        "summary": {
            "total_sources": len(data_tests),
            "operational_sources": sum(1 for r in data_tests.values() if r["status"] == "success")
        },
        "last_check": HEALTH_CHECK_RESULTS["timestamp"]
    }

@app.post("/diagnostic/recheck")
async def recheck_system():
    """Force une nouvelle v√©rification compl√®te du syst√®me"""
    global HEALTH_CHECK_RESULTS
    
    try:
        logger.info("üîÑ Relancement des v√©rifications de sant√©...")
        health_checker = NovaHealthChecker()
        HEALTH_CHECK_RESULTS = await health_checker.run_full_health_check()
        
        return {
            "message": "V√©rification compl√®te termin√©e",
            "system_status": HEALTH_CHECK_RESULTS["nova_system_status"],
            "success_rate": HEALTH_CHECK_RESULTS["summary"]["success_rate"],
            "timestamp": HEALTH_CHECK_RESULTS["timestamp"]
        }
        
    except Exception as e:
        logger.error(f"Erreur lors de la rev√©rification: {str(e)}")
        raise HTTPException(status_code=500, detail=f"√âchec de la rev√©rification: {str(e)}")

# =====================================
# ENDPOINTS EXISTANTS (inchang√©s)
# =====================================

@app.get("/")
async def root():
    """Point d'entr√©e principal avec informations de sant√©"""
    global HEALTH_CHECK_RESULTS
    
    system_status = "unknown"
    if HEALTH_CHECK_RESULTS:
        system_status = HEALTH_CHECK_RESULTS["nova_system_status"]
    
    return {
        "service": "NOVA Server",
        "version": "2.1.0", 
        "status": "active",
        "system_health": system_status,
        "description": "Int√©gration LLM Claude avec SAP et Salesforce",
        "timestamp": datetime.now().isoformat(),
        "endpoints": [
            "/health - Diagnostic syst√®me complet",
            "/diagnostic/connections - √âtat des connexions",
            "/diagnostic/data-retrieval - √âtat r√©cup√©ration donn√©es",
            "/api/assistant/interface - Interface utilisateur",
            "/docs - Documentation Swagger"
        ]
    }

@app.get("/interface/v3")
async def get_interface_v3():
    """Sert la nouvelle interface v3"""
    return FileResponse("templates/nova_interface_v3.html")

# Inclure ici les autres endpoints existants...
# (routes des modules, etc.)

if __name__ == "__main__":
    import uvicorn
    
    # Affichage des informations de d√©marrage
    print("=" * 60)
    print("üöÄ D√âMARRAGE DE NOVA SERVER")
    print("   Version: 2.1.0")
    print("   V√©rifications de sant√©: Activ√©es")
    print("   Port: 8000")
    print("=" * 60)
    
    uvicorn.run(app, host="0.0.0.0", port=8000)