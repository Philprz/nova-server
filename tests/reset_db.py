# reset_db.py
"""
Script pour r√©initialiser compl√®tement la base de donn√©es et Alembic
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from db.models import Base
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

def reset_database():
    """R√©initialise compl√®tement la base de donn√©es"""
    
    # Charger les variables d'environnement
    load_dotenv()
    database_url = os.getenv("DATABASE_URL")
    
    if not database_url:
        print("‚ùå DATABASE_URL non trouv√© dans .env")
        return False
    
    try:
        # Cr√©er le moteur SQLAlchemy
        engine = create_engine(database_url)
        
        print("üîÑ Connexion √† la base de donn√©es...")
        
        # Supprimer toutes les tables existantes
        with engine.connect() as conn:
            print("üóëÔ∏è Suppression de toutes les tables...")
            
            # Supprimer la table alembic_version
            conn.execute(text("DROP TABLE IF EXISTS alembic_version CASCADE"))
            
            # Supprimer toutes les tables m√©tier
            conn.execute(text("DROP TABLE IF EXISTS interactions_llm CASCADE"))
            conn.execute(text("DROP TABLE IF EXISTS tickets CASCADE"))
            conn.execute(text("DROP TABLE IF EXISTS factures CASCADE"))
            conn.execute(text("DROP TABLE IF EXISTS utilisateurs CASCADE"))
            conn.execute(text("DROP TABLE IF EXISTS clients CASCADE"))
            
            # Valider les changements
            conn.commit()
            print("‚úÖ Toutes les tables supprim√©es")
        
        # Recr√©er toutes les tables depuis les mod√®les
        print("üèóÔ∏è Cr√©ation des tables depuis les mod√®les...")
        Base.metadata.create_all(engine)
        print("‚úÖ Tables cr√©√©es avec succ√®s")
        
        # Supprimer les anciens fichiers de migration
        versions_dir = "alembic/versions"
        if os.path.exists(versions_dir):
            print("üóëÔ∏è Suppression des anciennes migrations...")
            for file in os.listdir(versions_dir):
                if file.endswith('.py') and file != '__init__.py':
                    file_path = os.path.join(versions_dir, file)
                    os.remove(file_path)
                    print(f"   Supprim√©: {file}")
        
        print("‚úÖ Base de donn√©es r√©initialis√©e avec succ√®s !")
        print("üìù Vous pouvez maintenant cr√©er une nouvelle migration avec:")
        print("   python -m alembic revision --autogenerate -m 'Initial migration'")
        print("   python -m alembic upgrade head")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©initialisation: {str(e)}")
        return False

if __name__ == "__main__":
    print("üöÄ R√©initialisation de la base de donn√©es NOVA")
    print("‚ö†Ô∏è  Cette op√©ration va supprimer TOUTES les donn√©es !")
    
    confirm = input("Voulez-vous continuer ? (oui/non): ").lower()
    if confirm in ['oui', 'o', 'yes', 'y']:
        if reset_database():
            sys.exit(0)
        else:
            sys.exit(1)
    else:
        print("‚ùå Op√©ration annul√©e")
        sys.exit(1)