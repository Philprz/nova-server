#!/usr/bin/env python3
# test_simple_improvements.py - Test simplifi√© des am√©liorations

"""
üîß TEST SIMPLIFI√â : V√©rification des am√©liorations critiques
"""

import asyncio
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_mcp_improvements():
    """Test des am√©liorations MCP"""
    logger.info("üîß Test MCP Connector am√©lior√©")
    
    try:
        # Test 1: Instance globale
        from services.mcp_connector import mcp_connector
        logger.info("‚úÖ Instance globale mcp_connector disponible")
        
        # Test 2: Nouvelle fonction de test
        from services.mcp_connector import test_mcp_connections_with_progress
        logger.info("‚úÖ Fonction test_mcp_connections_with_progress disponible")
        
        # Test 3: Fonction d'appel avec progression
        from services.mcp_connector import call_mcp_with_progress
        logger.info("‚úÖ Fonction call_mcp_with_progress disponible")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur MCP: {e}")
        return False

async def test_progress_improvements():
    """Test des am√©liorations Progress Tracker"""
    logger.info("üîß Test Progress Tracker am√©lior√©")
    
    try:
        # Test 1: Nouvelles fonctions utilitaires
        from services.progress_tracker import get_or_create_task, track_workflow_step
        logger.info("‚úÖ Fonctions utilitaires disponibles")
        
        # Test 2: Cr√©er une t√¢che
        task = get_or_create_task(user_prompt="Test simple", draft_mode=True)
        logger.info(f"‚úÖ T√¢che cr√©√©e: {task.task_id}")
        
        # Test 3: Compl√©tion avec r√©sultat
        from services.progress_tracker import progress_tracker
        test_result = {"status": "success", "message": "Test r√©ussi"}
        progress_tracker.complete_task(task.task_id, test_result)
        logger.info("‚úÖ T√¢che termin√©e avec r√©sultat")
        
        # Test 4: V√©rifier l'historique
        history = progress_tracker.get_task_history()
        if history and "result" in history[-1]:
            logger.info("‚úÖ R√©sultat sauvegard√© dans l'historique")
        else:
            logger.warning("‚ö†Ô∏è R√©sultat non trouv√© dans l'historique")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur Progress Tracker: {e}")
        return False

async def main():
    """Test principal"""
    logger.info("üöÄ TEST SIMPLIFI√â DES AM√âLIORATIONS")
    logger.info("=" * 50)
    
    results = []
    
    # Test MCP
    logger.info("\nüì° Test MCP Connector")
    results.append(await test_mcp_improvements())
    
    # Test Progress Tracker
    logger.info("\nüìä Test Progress Tracker")
    results.append(await test_progress_improvements())
    
    # R√©sum√©
    logger.info("\n" + "=" * 50)
    success_count = sum(results)
    total_count = len(results)
    
    logger.info(f"üéØ R√âSULTAT: {success_count}/{total_count} tests r√©ussis")
    
    if success_count == total_count:
        logger.info("üéâ TOUS LES TESTS SONT R√âUSSIS !")
        logger.info("‚úÖ Les am√©liorations critiques sont op√©rationnelles")
    else:
        logger.warning("‚ö†Ô∏è Certains tests ont √©chou√©")
    
    return success_count == total_count

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)