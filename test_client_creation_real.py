#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Test de cr√©ation client r√©elle - VERSION FINALE CORRIG√âE
Correction des doublons Salesforce et champ Industry SAP
"""

import sys
import os
import asyncio
import json
import re
import time
import uuid
from datetime import datetime

# Ajouter le r√©pertoire racine au path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from services.mcp_connector import MCPConnector
    print("‚úÖ MCPConnector import√© avec succ√®s")
except ImportError as e:
    print(f"‚ùå Erreur import MCPConnector: {e}")
    sys.exit(1)

# G√©n√©rer un nom vraiment unique pour √©viter les doublons
unique_id = str(uuid.uuid4())[:8]
timestamp = datetime.now().strftime('%Y%m%d-%H%M%S')

# Donn√©es de test FINALES - TOUTES ERREURS CORRIG√âES
TEST_CLIENT_DATA = {
    "company_name": f"NOVA-TEST-{unique_id}-{timestamp}",  # Nom vraiment unique
    "industry": "Technology",
    "phone": "+33 1 23 45 67 89",
    "email": f"contact-{unique_id}@novatest.com",  # Email unique
    "website": f"https://www.novatest-{unique_id}.com",  # URL unique
    "annual_revenue": 1000000,
    "employees_count": 50,
    "description": f"Client de test NOVA - ID: {unique_id}",
    
    # Adresse de facturation
    "billing_street": f"123 Rue Test {unique_id}",
    "billing_city": "Paris",
    "billing_postal_code": "75001",
    "billing_country": "France",
    
    # Adresse de livraison
    "shipping_street": f"456 Avenue Livraison {unique_id}",
    "shipping_city": "Lyon",  
    "shipping_postal_code": "69001",
    "shipping_country": "France"
}

async def test_create_salesforce_client():
    """Test cr√©ation client dans Salesforce - GESTION DES DOUBLONS"""
    print("\n=== TEST CR√âATION CLIENT SALESFORCE (FINAL) ===")
    
    try:
        # Pr√©parer les donn√©es Salesforce
        sf_data = {
            "Name": TEST_CLIENT_DATA["company_name"],
            "Type": "Customer", 
            "Industry": TEST_CLIENT_DATA["industry"],
            "Phone": TEST_CLIENT_DATA["phone"],
            "Website": TEST_CLIENT_DATA["website"],
            "AnnualRevenue": TEST_CLIENT_DATA["annual_revenue"],
            "NumberOfEmployees": TEST_CLIENT_DATA["employees_count"],
            "Description": TEST_CLIENT_DATA["description"],
            "BillingStreet": TEST_CLIENT_DATA["billing_street"],
            "BillingCity": TEST_CLIENT_DATA["billing_city"],
            "BillingPostalCode": TEST_CLIENT_DATA["billing_postal_code"],
            "BillingCountry": TEST_CLIENT_DATA["billing_country"],
            "ShippingStreet": TEST_CLIENT_DATA["shipping_street"],
            "ShippingCity": TEST_CLIENT_DATA["shipping_city"],
            "ShippingPostalCode": TEST_CLIENT_DATA["shipping_postal_code"],
            "ShippingCountry": TEST_CLIENT_DATA["shipping_country"]
        }
        
        print(f"Cr√©ation du client: {sf_data['Name']}")
        print("‚ú® Nom unique g√©n√©r√© pour √©viter les doublons")
        
        # Cr√©er dans Salesforce
        result = await MCPConnector.call_salesforce_mcp("salesforce_create_record", {
            "sobject": "Account",
            "data": sf_data
        })
        
        # G√©rer le cas de doublon d√©tect√©
        if not result.get("success") and "DUPLICATES_DETECTED" in str(result.get("error", "")):
            print("‚ö†Ô∏è Doublon d√©tect√© par Salesforce")
            print("üîÑ Tentative avec un nom encore plus unique...")
            
            # G√©n√©rer un nom encore plus unique
            extra_unique = str(int(time.time()))[-6:]
            sf_data["Name"] = f"{sf_data['Name']}-{extra_unique}"
            sf_data["Description"] = f"{sf_data['Description']} - Extra ID: {extra_unique}"
            
            print(f"Nouveau nom: {sf_data['Name']}")
            
            # Nouvelle tentative
            result = await MCPConnector.call_salesforce_mcp("salesforce_create_record", {
                "sobject": "Account",
                "data": sf_data
            })
        
        if result.get("success"):
            print("‚úÖ Client Salesforce cr√©√© avec succ√®s!")
            print(f"   ID: {result.get('id')}")
            print(f"   Nom: {sf_data['Name']}")
            
            # V√©rifier la cr√©ation
            verify_result = await MCPConnector.call_salesforce_mcp("salesforce_query", {
                "query": f"SELECT Id, Name, Type, Industry, Phone, BillingCity FROM Account WHERE Id = '{result.get('id')}'"
            })
            
            if "error" not in verify_result and verify_result.get("totalSize", 0) > 0:
                created_account = verify_result["records"][0]
                print("‚úÖ V√©rification OK:")
                print(f"   - Nom: {created_account.get('Name')}")
                print(f"   - Type: {created_account.get('Type')}")
                print(f"   - Industrie: {created_account.get('Industry')}")
                print(f"   - T√©l√©phone: {created_account.get('Phone')}")
                print(f"   - Ville: {created_account.get('BillingCity')}")
                
                return {"success": True, "id": result.get("id"), "data": created_account, "final_name": sf_data['Name']}
            else:
                print("‚ö†Ô∏è Cr√©ation r√©ussie mais v√©rification √©chou√©e")
                return {"success": True, "id": result.get("id"), "verification_failed": True, "final_name": sf_data['Name']}
        else:
            print(f"‚ùå Erreur cr√©ation Salesforce: {result.get('error')}")
            return {"success": False, "error": result.get("error")}
            
    except Exception as e:
        print(f"‚ùå Exception cr√©ation Salesforce: {str(e)}")
        return {"success": False, "error": str(e)}

async def test_create_sap_client(salesforce_client_data=None):
    """Test cr√©ation client dans SAP - CHAMPS CORRECTS"""
    print("\n=== TEST CR√âATION CLIENT SAP (FINAL) ===")
    
    try:
        # G√©n√©rer un CardCode unique
        clean_name = re.sub(r'[^a-zA-Z0-9]', '', TEST_CLIENT_DATA["company_name"])[:8]
        timestamp = str(int(time.time()))[-4:]
        card_code = f"C{clean_name}{timestamp}".upper()[:15]
        
        # Pr√©parer les donn√©es SAP - CHAMPS CORRECTS UNIQUEMENT
        sap_data = {
            "CardCode": card_code,
            "CardName": TEST_CLIENT_DATA["company_name"],
            "CardType": "cCustomer",
            "GroupCode": 100,  # Code de groupe par d√©faut
            "Currency": "EUR",
            "Valid": "tYES",
            "Frozen": "tNO"
        }
        
        # Ajouter SEULEMENT les champs optionnels compatibles
        if TEST_CLIENT_DATA.get("phone"):
            sap_data["Phone1"] = TEST_CLIENT_DATA["phone"][:20]
        
        if TEST_CLIENT_DATA.get("website"):
            sap_data["Website"] = TEST_CLIENT_DATA["website"][:100]
            
        if TEST_CLIENT_DATA.get("description"):
            sap_data["Notes"] = TEST_CLIENT_DATA["description"][:254]
        
        # CORRECTION IMPORTANTE: NE PAS inclure Industry car il faut un nombre
        # Dans SAP, Industry doit √™tre un code num√©rique de secteur d'activit√©
        # Nous l'omettons pour ce test
        
        # R√©f√©rence crois√©e Salesforce si disponible
        if salesforce_client_data and salesforce_client_data.get("id"):
            sap_data["FederalTaxID"] = salesforce_client_data["id"][:32]
        
        print(f"Cr√©ation du client SAP: {card_code} - {sap_data['CardName']}")
        print("‚úÖ Champ Industry supprim√© (doit √™tre num√©rique)")
        print(f"Donn√©es SAP: {json.dumps(sap_data, indent=2)}")
        
        # Cr√©er dans SAP
        result = await MCPConnector.call_sap_mcp("sap_create_customer_complete", {
            "customer_data": sap_data
        })
        
        if result.get("success"):
            print("‚úÖ Client SAP cr√©√© avec succ√®s!")
            print(f"   CardCode: {card_code}")
            print(f"   CardName: {sap_data['CardName']}")
            print(f"   Cr√©√©: {'Oui' if result.get('created') else 'Existait d√©j√†'}")
            
            # V√©rifier la cr√©ation
            verify_result = await MCPConnector.call_sap_mcp("sap_read", {
                "endpoint": f"/BusinessPartners('{card_code}')",
                "method": "GET"
            })
            
            if "error" not in verify_result:
                print("‚úÖ V√©rification SAP OK:")
                print(f"   - CardCode: {verify_result.get('CardCode')}")
                print(f"   - CardName: {verify_result.get('CardName')}")
                print(f"   - CardType: {verify_result.get('CardType')}")
                print(f"   - Currency: {verify_result.get('Currency')}")
                print(f"   - Phone1: {verify_result.get('Phone1', 'N/A')}")
                
                return {"success": True, "card_code": card_code, "data": verify_result}
            else:
                print("‚ö†Ô∏è Cr√©ation r√©ussie mais v√©rification √©chou√©e")
                print(f"Erreur v√©rification: {verify_result.get('error')}")
                return {"success": True, "card_code": card_code, "verification_failed": True}
        else:
            print(f"‚ùå Erreur cr√©ation SAP: {result.get('error')}")
            return {"success": False, "error": result.get("error")}
            
    except Exception as e:
        print(f"‚ùå Exception cr√©ation SAP: {str(e)}")
        return {"success": False, "error": str(e)}

async def test_complete_client_creation():
    """Test cr√©ation client compl√®te - VERSION FINALE"""
    print("\n=== TEST CR√âATION CLIENT COMPL√àTE (FINAL) ===")
    
    results = {
        "timestamp": datetime.now().isoformat(),
        "client_data": TEST_CLIENT_DATA,
        "unique_id": unique_id,
        "salesforce_result": None,
        "sap_result": None,
        "success": False,
        "corrections_applied": [
            "Nom unique avec UUID pour √©viter les doublons Salesforce",
            "Suppression du champ Industry pour SAP (doit √™tre num√©rique)",
            "Utilisation uniquement des champs SAP valid√©s",
            "Gestion automatique des doublons avec retry"
        ]
    }
    
    # 1. Cr√©er dans Salesforce
    sf_result = await test_create_salesforce_client()
    results["salesforce_result"] = sf_result
    
    # 2. Cr√©er dans SAP (avec r√©f√©rence Salesforce)
    sap_result = await test_create_sap_client(sf_result if sf_result.get("success") else None)
    results["sap_result"] = sap_result
    
    # 3. √âvaluer le succ√®s global
    sf_success = sf_result.get("success", False)
    sap_success = sap_result.get("success", False)
    
    if sf_success and sap_success:
        results["success"] = True
        print("\nüéâ CR√âATION CLIENT COMPL√àTE R√âUSSIE!")
        print(f"   Salesforce ID: {sf_result.get('id')}")
        print(f"   Salesforce Nom: {sf_result.get('final_name', 'N/A')}")
        print(f"   SAP CardCode: {sap_result.get('card_code')}")
        print("   R√©f√©rence crois√©e: ‚úÖ")
    elif sf_success or sap_success:
        results["success"] = "partial"
        print("\n‚ö†Ô∏è CR√âATION PARTIELLE:")
        print(f"   Salesforce: {'‚úÖ' if sf_success else '‚ùå'}")
        print(f"   SAP: {'‚úÖ' if sap_success else '‚ùå'}")
        if sf_success:
            print(f"   Salesforce ID: {sf_result.get('id')}")
        if sap_success:
            print(f"   SAP CardCode: {sap_result.get('card_code')}")
    else:
        results["success"] = False
        print("\n‚ùå √âCHEC CR√âATION CLIENT")
        print("Erreurs √† analyser dans le fichier de r√©sultats")
    
    # Sauvegarder les r√©sultats d√©taill√©s
    result_file = f"test_client_creation_final_result_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    try:
        with open(result_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False, default=str)
        print(f"\nüìÅ R√©sultats d√©taill√©s sauvegard√©s: {result_file}")
    except Exception as e:
        print(f"‚ö†Ô∏è Impossible de sauvegarder les r√©sultats: {e}")
    
    return results

async def main():
    """Fonction principale de test"""
    print("üöÄ TEST DE CR√âATION CLIENT R√âELLE - VERSION FINALE")
    print(f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"ID Unique: {unique_id}")
    print(f"Client de test: {TEST_CLIENT_DATA['company_name']}")
    
    print("\nüîß CORRECTIONS FINALES APPLIQU√âES:")
    print("   1. Nom unique avec UUID pour √©viter les doublons")
    print("   2. Suppression du champ Industry SAP (doit √™tre num√©rique)")
    print("   3. Gestion automatique des doublons avec retry")
    print("   4. Utilisation uniquement des champs valid√©s")
    
    # Lancer le test complet
    results = await test_complete_client_creation()
    
    print("\n" + "="*60)
    print("üìä R√âSUM√â FINAL")
    print("="*60)
    
    if results["success"] is True:
        print("üéØ ‚úÖ SUCC√àS COMPLET - Client cr√©√© dans Salesforce ET SAP")
        print("\nüöÄ PROCHAINES √âTAPES:")
        print("  ‚Üí ‚úÖ Flux de cr√©ation client valid√©")
        print("  ‚Üí üîÑ Int√©grer dans le workflow de devis")
        print("  ‚Üí üîÑ Tester via l'API FastAPI /create_client") 
        print("  ‚Üí üîÑ Tester le workflow complet avec cr√©ation client automatique")
    elif results["success"] == "partial":
        print("‚ö†Ô∏è SUCC√àS PARTIEL - Client cr√©√© dans un seul syst√®me")
        print("\nüîç √Ä ANALYSER:")
        print("  ‚Üí V√©rifier les logs pour le syst√®me en √©chec")
        print("  ‚Üí Corriger les erreurs restantes")
    else:
        print("‚ùå √âCHEC - Aucune cr√©ation r√©ussie")
        print("\nüîß √Ä CORRIGER:")
        print("  ‚Üí Analyser les erreurs dans le fichier de r√©sultats")
        print("  ‚Üí V√©rifier les permissions et configurations")

if __name__ == "__main__":
    asyncio.run(main())