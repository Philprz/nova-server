# routes/routes_client_listing.py
"""
Routes API pour lister et rechercher les clients dans Salesforce et SAP
"""

import logging
from typing import Dict, Any, Optional
from fastapi import APIRouter, HTTPException, Query
from pydantic import BaseModel

# Import de nos fonctions de listing
from utils.client_lister import list_all_clients, find_client_everywhere, client_lister

logger = logging.getLogger(__name__)
router = APIRouter()

class ClientSearchRequest(BaseModel):
    client_name: str
    search_mode: str = "comprehensive"  # "comprehensive", "exact", "fuzzy"

@router.get("/list_all_clients")
async def get_all_clients():
    """
    Liste tous les clients de Salesforce et SAP
    """
    try:
        logger.info("üîç Demande de listing complet des clients")
        
        result = await list_all_clients()
        
        if not result:
            raise HTTPException(status_code=500, detail="Erreur lors de la r√©cup√©ration des clients")
        
        return {
            "success": True,
            "data": result,
            "message": f"Total de {result['summary']['total_combined']} clients r√©cup√©r√©s"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du listing: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erreur: {str(e)}")

@router.get("/salesforce_clients")
async def get_salesforce_clients_only():
    """
    Liste uniquement les clients Salesforce
    """
    try:
        logger.info("üîç R√©cup√©ration clients Salesforce uniquement")
        
        clients = await client_lister.get_all_salesforce_clients()
        
        return {
            "success": True,
            "source": "salesforce",
            "count": len(clients),
            "clients": clients
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur Salesforce: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erreur Salesforce: {str(e)}")

@router.get("/sap_clients")
async def get_sap_clients_only():
    """
    Liste uniquement les clients SAP
    """
    try:
        logger.info("üîç R√©cup√©ration clients SAP uniquement")
        
        clients = await client_lister.get_all_sap_clients()
        
        return {
            "success": True,
            "source": "sap",
            "count": len(clients),
            "clients": clients
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur SAP: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erreur SAP: {str(e)}")

@router.get("/search_client/{client_name}")
async def search_specific_client(client_name: str):
    """
    Recherche approfondie d'un client sp√©cifique dans les deux syst√®mes
    """
    try:
        logger.info(f"üîç Recherche approfondie du client: {client_name}")
        
        if not client_name or len(client_name.strip()) < 2:
            raise HTTPException(status_code=400, detail="Nom du client trop court (minimum 2 caract√®res)")
        
        result = await find_client_everywhere(client_name.strip())
        
        return {
            "success": True,
            "search_results": result,
            "found": result["total_found"] > 0,
            "message": f"Recherche termin√©e - {result['total_found']} clients trouv√©s"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur recherche: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erreur: {str(e)}")

@router.post("/search_client_advanced")
async def search_client_advanced(request: ClientSearchRequest):
    """
    Recherche avanc√©e avec options
    """
    try:
        logger.info(f"üîç Recherche avanc√©e: {request.client_name} (mode: {request.search_mode})")
        
        result = await find_client_everywhere(request.client_name)
        
        # Filtrage selon le mode de recherche
        if request.search_mode == "exact":
            # Garder seulement les correspondances exactes
            sf_exact = [c for c in result["salesforce"]["clients"] 
                       if c.get("Name", "").lower() == request.client_name.lower()]
            sap_exact = [c for c in result["sap"]["clients"] 
                        if c.get("CardName", "").lower() == request.client_name.lower()]
            
            result["salesforce"]["clients"] = sf_exact
            result["sap"]["clients"] = sap_exact
            result["total_found"] = len(sf_exact) + len(sap_exact)
        
        return {
            "success": True,
            "search_mode": request.search_mode,
            "search_results": result,
            "found": result["total_found"] > 0
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur recherche avanc√©e: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erreur: {str(e)}")

@router.get("/client_summary")
async def get_client_summary():
    """
    R√©sum√© rapide des clients sans r√©cup√©rer toutes les donn√©es
    """
    try:
        logger.info("üìä G√©n√©ration r√©sum√© clients")
        
        # Compter les clients sans r√©cup√©rer toutes les donn√©es
        sf_count_result = await client_lister.mcp_connector.call_mcp(
            "salesforce_mcp",
            "salesforce_query",
            {"query": "SELECT COUNT() FROM Account"}
        )
        
        sap_count_result = await client_lister.mcp_connector.call_mcp(
            "sap_mcp",
            "sap_read",
            {
                "endpoint": "/BusinessPartners/$count?$filter=CardType eq 'cCustomer'",
                "method": "GET"
            }
        )
        
        sf_count = sf_count_result.get("totalSize", 0) if sf_count_result.get("success") else 0
        sap_count = sap_count_result.get("value", 0) if sap_count_result.get("success") else 0
        
        return {
            "success": True,
            "summary": {
                "salesforce_count": sf_count,
                "sap_count": sap_count,
                "total_count": sf_count + sap_count
            },
            "message": "R√©sum√© g√©n√©r√© avec succ√®s"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur r√©sum√©: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erreur: {str(e)}")

@router.get("/find_rondot")
async def find_rondot_specifically():
    """
    Endpoint sp√©cifique pour diagnostiquer le probl√®me avec RONDOT
    """
    try:
        logger.info("üîç DIAGNOSTIC SP√âCIFIQUE - Recherche RONDOT")
        
        result = await find_client_everywhere("RONDOT")
        
        # Log d√©taill√© pour diagnostic
        logger.info(f"=== DIAGNOSTIC RONDOT ===")
        logger.info(f"Salesforce trouv√©: {result['salesforce']['found']}")
        logger.info(f"SAP trouv√©: {result['sap']['found']}")
        logger.info(f"Total trouv√©: {result['total_found']}")
        
        if result["salesforce"]["found"]:
            for client in result["salesforce"]["clients"]:
                logger.info(f"SF Client: {client.get('Name')} (ID: {client.get('Id')})")
        
        if result["sap"]["found"]:
            for client in result["sap"]["clients"]:
                logger.info(f"SAP Client: {client.get('CardName')} (Code: {client.get('CardCode')})")
        
        return {
            "success": True,
            "diagnostic": "RONDOT",
            "search_results": result,
            "debug_info": {
                "sf_found": result["salesforce"]["found"],
                "sap_found": result["sap"]["found"],
                "total": result["total_found"]
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur diagnostic RONDOT: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erreur: {str(e)}")