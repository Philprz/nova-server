# automated_start_nouveau.ps1
param(
  [switch]$Verbose
)

# Activer le mode strict pour d√©tecter les variables non d√©clar√©es
Set-StrictMode -Version Latest

# D√©bloquer l'ex√©cution des scripts
Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force

# D√©finir et se placer dans le r√©pertoire du projet
$projectPath = "C:\Users\PPZ\NOVA"
Set-Location -Path $projectPath

# Fonction pour charger les variables d'environnement depuis .env
function Import-DotEnv {
    param (
        [string]$path
    )
    
    if (Test-Path $path) {
        if ($Verbose) { Write-Host "üîë Chargement des variables d'environnement depuis .env" -ForegroundColor Yellow }
        Get-Content $path | ForEach-Object {
            if ($_ -match '^[\s]*([^#].+?)=(.*)$') {
                $key = $matches[1].Trim()
                $value = $matches[2].Trim()
                [System.Environment]::SetEnvironmentVariable($key, $value, "Process")
            }
        }
        if ($Verbose) { Write-Host "‚úî Variables charg√©es" -ForegroundColor Green }
        return $true
    } else {
        if ($Verbose) { Write-Host "‚Ñπ Aucun fichier .env trouv√©, continuer sans" -ForegroundColor Cyan }
        return $false
    }
}

# Activer l'environnement virtuel
$venvPath = Join-Path $projectPath "venv\Scripts\Activate.ps1"
if (Test-Path $venvPath) {
    . $venvPath
    if ($Verbose) { Write-Host "‚úî Environnement virtuel activ√©" -ForegroundColor Green }
} else {
    Write-Host "‚ùå Environnement virtuel non trouv√© : $venvPath" -ForegroundColor Red
    exit 1
}

# Installer les d√©pendances Python (requirements.txt)
$requirementsPath = Join-Path $projectPath "requirements.txt"
if (Test-Path $requirementsPath) {
    if ($Verbose) { Write-Host "üöß Installation des d√©pendances Python..." -ForegroundColor Yellow }
    try {
        if ($Verbose) {
            pip install -r $requirementsPath
        } else {
            pip install -r $requirementsPath | Out-Null
        }
        if ($Verbose) { Write-Host "‚úî D√©pendances install√©es" -ForegroundColor Green }
    } catch {
        Write-Host "‚ùå √âchec de l'installation des d√©pendances : $_" -ForegroundColor Red
        exit 1
    }
} else {
    if ($Verbose) { Write-Host "‚ö† Aucun fichier requirements.txt trouv√©, passage √† l'√©tape suivante" -ForegroundColor Cyan }
}
    
# Charger les variables d'environnement depuis .env
$envFile = Join-Path $projectPath ".env"
Import-DotEnv -path $envFile

# V√©rifier la connexion √† PostgreSQL
try {
    psql -h $env:DB_HOST -U $env:DB_USER -d $env:DB_NAME -c '\q' -ErrorAction Stop > $null
    if ($Verbose) { Write-Host "‚úî Connexion PostgreSQL OK" -ForegroundColor Green }
} catch {
    Write-Host "‚ùå Erreur de connexion PostgreSQL" -ForegroundColor Red
    Write-Host "   $_" -ForegroundColor Red
    exit 1
}

# D√©marrer le serveur FastAPI (uvicorn)
if (Get-Process -Name "uvicorn" -ErrorAction SilentlyContinue) {
    $processId = (Get-Process -Name "uvicorn").Id
    if ($Verbose) { Write-Host "‚Ñπ FastAPI d√©j√† en cours (PID : $processId)" -ForegroundColor Cyan }
} else {
    if ($Verbose) { Write-Host "üöÄ D√©marrage FastAPI avec uvicorn..." -ForegroundColor Yellow }
    Start-Process -NoNewWindow -FilePath python -ArgumentList "-m uvicorn main:app --reload" -ErrorAction Stop
}

# Attendre que FastAPI soit pr√™t sur http://localhost:8000
$maxRetries = 10
$retry = 0
$fastApiReady = $false

while (-not $fastApiReady -and $retry -lt $maxRetries) {
    try {
        Invoke-WebRequest -Uri "http://localhost:8000" -UseBasicParsing -TimeoutSec 2 -ErrorAction Stop > $null
        $fastApiReady = $true
        if ($Verbose) { Write-Host "‚úî FastAPI op√©rationnel" -ForegroundColor Green }
    } catch {
        $retry++
        if ($Verbose) { Write-Host "‚è≥ Attente FastAPI (tentative $retry/$maxRetries)..." -ForegroundColor Yellow }
        Start-Sleep -Seconds 2
    }
}

if (-not $fastApiReady) {
    Write-Host "‚ö† FastAPI non disponible apr√®s $maxRetries tentatives" -ForegroundColor Magenta
}

# D√©marrer le serveur MCP (server_mcp.py) dans une session PowerShell s√©par√©e
$procMcp = Get-Process -Name "python" -ErrorAction SilentlyContinue | Where-Object { $_.Path -match "server_mcp\.py" }

if ($procMcp) {
    if ($Verbose) { Write-Host "‚Ñπ Server MCP d√©j√† en cours (PID : $($procMcp.Id))" -ForegroundColor Cyan }
} else {
    if ($Verbose) { Write-Host "üöÄ D√©marrage Server MCP dans une nouvelle fen√™tre PowerShell..." -ForegroundColor Yellow }
    Start-Process -FilePath "powershell" -ArgumentList "-NoExit", "-Command", "python server_mcp.py --name nova_middleware -f .env" -ErrorAction Stop
    if ($Verbose) { Write-Host "‚è≥ Pause de 5 secondes pour laisser MCP d√©marrer..." -ForegroundColor Yellow }
    Start-Sleep -Seconds 5
}

# Gestion de la configuration de Claude Desktop
$claudeConfigPath = Join-Path $env:APPDATA "Claude\claude_desktop_config.json"
if (Test-Path $claudeConfigPath) {
    if ($Verbose) { Write-Host "üîç Lecture de la config Claude Desktop : $claudeConfigPath" -ForegroundColor Yellow }
    $cfg = Get-Content $claudeConfigPath | ConvertFrom-Json
    if ($cfg.integrations -and $cfg.integrations.nova_middleware) {
        if ($Verbose) { Write-Host "‚úî Integration 'nova_middleware' d√©j√† pr√©sente dans Claude Desktop" -ForegroundColor Green }
    } else {
        if ($Verbose) { Write-Host "‚öô Installation de 'nova_middleware' via MCP..." -ForegroundColor Yellow }
        mcp install nova_middleware --config "$claudeConfigPath"
        if ($Verbose) { Write-Host "‚úî 'nova_middleware' ajout√© √† Claude Desktop" -ForegroundColor Green }
    }
} else {
    Write-Host "‚ö† Fichier de config Claude Desktop introuvable : $claudeConfigPath" -ForegroundColor Magenta
    Write-Host "   Veuillez installer manuellement nova_middleware dans Claude Desktop." -ForegroundColor Magenta
}

# R√©capitulatif final
Write-Host ""
Write-Host "üéØ R√©capitulatif des services NOVA Middleware :" -ForegroundColor Cyan
Write-Host "-----------------------------------------------" -ForegroundColor Cyan
Write-Host "‚Ä¢ FastAPI  : http://localhost:8000/" -ForegroundColor Green
Write-Host "‚Ä¢ MCP      : nova_middleware" -ForegroundColor Green
Write-Host "‚Ä¢ PostgreSQL : $env:DB_NAME@$env:DB_HOST" -ForegroundColor Green
Write-Host "-----------------------------------------------" -ForegroundColor Cyan
Write-Host "‚ú® Pour int√©grer dans Claude Desktop :" -ForegroundColor Magenta
Write-Host "1. Red√©marrez Claude Desktop si n√©cessaire." -ForegroundColor Magenta
Write-Host "2. Cliquez sur '+' et choisissez 'nova_middleware'." -ForegroundColor Magenta
Write-Host "3. Testez via la commande ping." -ForegroundColor Magenta