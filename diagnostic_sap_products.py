#!/usr/bin/env python3
"""
Script de diagnostic pour d√©bugger la recherche de produits SAP
Identifie pourquoi "Imprimante 20 ppm" n'est pas trouv√©
"""

import asyncio
import json
import sys
from typing import Dict, Any, List
import logging

# Configuration du logging d√©taill√©
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

sys.path.append('.')
from services.mcp_connector import MCPConnector


async def diagnose_product_search():
    """
    Diagnostic complet de la recherche de produits
    """
    print("\n" + "="*80)
    print("üîç DIAGNOSTIC DE RECHERCHE PRODUITS SAP")
    print("="*80)
    
    connector = MCPConnector()
    
    # 1. Test de connexion SAP
    print("\n1Ô∏è‚É£ TEST DE CONNEXION SAP")
    print("-"*40)
    try:
        test_result = await connector.call_sap_mcp("sap_read", {
            "endpoint": "/Items?$top=1",
            "method": "GET"
        })
        if "error" not in test_result:
            print("‚úÖ Connexion SAP fonctionnelle")
        else:
            print(f"‚ùå Erreur de connexion: {test_result['error']}")
            return
    except Exception as e:
        print(f"‚ùå Exception: {str(e)}")
        return
        
    # 2. R√©cup√©rer quelques produits pour voir la structure
    print("\n2Ô∏è‚É£ STRUCTURE DES PRODUITS SAP")
    print("-"*40)
    try:
        sample_result = await connector.call_sap_mcp("sap_read", {
            "endpoint": "/Items?$top=5&$orderby=ItemCode",
            "method": "GET"
        })
        
        if "value" in sample_result and sample_result["value"]:
            product = sample_result["value"][0]
            print(f"‚úÖ Exemple de produit avec {len(product)} champs:")
            for key, value in sorted(product.items())[:15]:  # Afficher les 15 premiers champs
                print(f"   - {key}: {value}")
        else:
            print("‚ùå Aucun produit trouv√© dans SAP")
            return
            
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        
    # 3. Rechercher des imprimantes de diff√©rentes fa√ßons
    print("\n3Ô∏è‚É£ RECHERCHE D'IMPRIMANTES")
    print("-"*40)
    
    search_terms = [
        "printer", "Printer", "PRINTER",
        "imprimante", "Imprimante", "IMPRIMANTE",
        "print", "Print", "PRINT",
        "ppm", "PPM", "20 ppm", "20ppm"
    ]
    
    for term in search_terms:
        print(f"\nüîé Recherche de '{term}':")
        
        # Recherche dans ItemName
        try:
            result = await connector.call_sap_mcp("sap_read", {
                "endpoint": f"/Items?$filter=contains(ItemName,'{term}')&$top=3",
                "method": "GET"
            })
            
            count = len(result.get("value", []))
            print(f"   Dans ItemName: {count} r√©sultat(s)")
            
            if count > 0:
                for i, prod in enumerate(result["value"][:3], 1):
                    print(f"      {i}. [{prod.get('ItemCode')}] {prod.get('ItemName')}")
                    
        except Exception as e:
            print(f"   Erreur ItemName: {str(e)}")
            
        # Recherche dans U_Description si existe
        try:
            result = await connector.call_sap_mcp("sap_read", {
                "endpoint": f"/Items?$filter=contains(U_Description,'{term}')&$top=3",
                "method": "GET"
            })
            
            count = len(result.get("value", []))
            if count > 0:
                print(f"   Dans U_Description: {count} r√©sultat(s)")
                for i, prod in enumerate(result["value"][:3], 1):
                    print(f"      {i}. [{prod.get('ItemCode')}] {prod.get('U_Description', 'N/A')}")
                    
        except Exception as e:
            # Ignorer si U_Description n'existe pas
            pass
            
    # 4. Analyser les groupes de produits
    print("\n4Ô∏è‚É£ GROUPES DE PRODUITS (ItemsGroupCode)")
    print("-"*40)
    
    try:
        # R√©cup√©rer des produits avec leurs groupes
        groups_result = await connector.call_sap_mcp("sap_read", {
            "endpoint": "/Items?$select=ItemCode,ItemName,ItemsGroupCode&$top=100",
            "method": "GET"
        })
        
        if "value" in groups_result:
            # Compter les groupes
            groups = {}
            for prod in groups_result["value"]:
                group = prod.get("ItemsGroupCode", "Sans groupe")
                groups[group] = groups.get(group, 0) + 1
                
            print(f"‚úÖ {len(groups)} groupes trouv√©s:")
            for group, count in sorted(groups.items(), key=lambda x: x[1], reverse=True)[:10]:
                print(f"   - Groupe {group}: {count} produits")
                
            # Chercher un groupe qui pourrait contenir des imprimantes
            print("\nüîç Recherche de groupes potentiels pour imprimantes:")
            for group in groups:
                if any(term in str(group).lower() for term in ["print", "imprim", "bureau", "office"]):
                    print(f"   ‚û°Ô∏è Groupe potentiel: {group}")
                    
    except Exception as e:
        print(f"‚ùå Erreur analyse groupes: {str(e)}")
        
    # 5. Recherche avec diff√©rentes m√©thodes de filtre
    print("\n5Ô∏è‚É£ TESTS DE FILTRES AVANC√âS")
    print("-"*40)
    
    # Test avec tolower pour √™tre insensible √† la casse
    try:
        result = await connector.call_sap_mcp("sap_read", {
            "endpoint": "/Items?$filter=contains(tolower(ItemName),'printer')&$top=5",
            "method": "GET"
        })
        
        if "value" in result:
            print(f"‚úÖ Recherche case-insensitive: {len(result['value'])} r√©sultats")
        else:
            print("‚ùå La fonction tolower() n'est peut-√™tre pas support√©e")
            
    except Exception as e:
        print(f"‚ö†Ô∏è tolower() non support√©: {str(e)}")
        
    # 6. V√©rifier s'il y a des champs personnalis√©s pour les caract√©ristiques
    print("\n6Ô∏è‚É£ CHAMPS PERSONNALIS√âS (U_*)")
    print("-"*40)
    
    try:
        # R√©cup√©rer un produit avec tous ses champs
        full_product = await connector.call_sap_mcp("sap_read", {
            "endpoint": "/Items?$top=1",
            "method": "GET"
        })
        
        if "value" in full_product and full_product["value"]:
            u_fields = [k for k in full_product["value"][0].keys() if k.startswith("U_")]
            print(f"‚úÖ {len(u_fields)} champs personnalis√©s trouv√©s:")
            for field in u_fields[:10]:
                value = full_product["value"][0].get(field)
                print(f"   - {field}: {value}")
                
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        
    # 7. Suggestions finales
    print("\n7Ô∏è‚É£ RECOMMANDATIONS")
    print("-"*40)
    print("üìå Pour trouver 'Imprimante 20 ppm', essayez:")
    print("   1. V√©rifier le nom exact dans SAP Business One")
    print("   2. Utiliser le code article si connu")
    print("   3. Chercher par groupe de produits")
    print("   4. V√©rifier si '20 ppm' est dans un champ personnalis√©")
    print("   5. Contacter l'administrateur SAP pour confirmer l'existence du produit")
    

async def search_specific_product(product_name: str):
    """
    Recherche sp√©cifique d'un produit avec toutes les m√©thodes possibles
    """
    print(f"\nüéØ RECHERCHE SP√âCIFIQUE: '{product_name}'")
    print("="*60)
    
    connector = MCPConnector()
    results = []
    
    # Diff√©rentes strat√©gies de recherche
    strategies = [
        {
            "name": "Recherche exacte",
            "filter": f"ItemName eq '{product_name}'"
        },
        {
            "name": "Contient (sensible casse)",
            "filter": f"contains(ItemName,'{product_name}')"
        },
        {
            "name": "Contient (mots s√©par√©s)",
            "filter": " and ".join([f"contains(ItemName,'{word}')" for word in product_name.split()])
        },
        {
            "name": "Recherche par mots-cl√©s",
            "filter": " or ".join([f"contains(ItemName,'{word}')" for word in product_name.split() if len(word) > 3])
        }
    ]
    
    for strategy in strategies:
        print(f"\nüîç {strategy['name']}:")
        print(f"   Filtre: {strategy['filter']}")
        
        try:
            result = await connector.call_sap_mcp("sap_read", {
                "endpoint": f"/Items?$filter={strategy['filter']}&$top=5",
                "method": "GET"
            })
            
            if "error" in result:
                print(f"   ‚ùå Erreur: {result['error']}")
            else:
                products = result.get("value", [])
                print(f"   ‚úÖ {len(products)} r√©sultat(s)")
                for prod in products:
                    print(f"      - [{prod.get('ItemCode')}] {prod.get('ItemName')}")
                    if prod.get('U_Description'):
                        print(f"        Description: {prod.get('U_Description')}")
                        
                if products:
                    results.extend(products)
                    
        except Exception as e:
            print(f"   ‚ùå Exception: {str(e)}")
            
    # R√©sum√©
    print("\nüìä R√âSUM√â DE LA RECHERCHE:")
    unique_codes = set()
    for r in results:
        unique_codes.add(r.get('ItemCode'))
        
    print(f"   Total de produits uniques trouv√©s: {len(unique_codes)}")
    
    return results


async def main():
    """
    Fonction principale
    """
    # Diagnostic g√©n√©ral
    await diagnose_product_search()
    
    # Recherche sp√©cifique du produit probl√©matique
    await search_specific_product("Imprimante 20 ppm")
    
    print("\n‚úÖ Diagnostic termin√©\n")


if __name__ == "__main__":
    asyncio.run(main())