# fix_alembic.py
"""
Script pour corriger l'√©tat d'Alembic en cr√©ant une migration de r√©f√©rence
qui refl√®te l'√©tat actuel de la base de donn√©es
"""

import os
import sys
import shutil
from sqlalchemy import create_engine, text
from dotenv import load_dotenv
import subprocess

def fix_alembic_migration():
    """Corrige l'√©tat d'Alembic en cr√©ant une migration de r√©f√©rence"""
    
    print("üîß CORRECTION DE L'√âTAT ALEMBIC")
    print("=" * 40)
    
    # Charger les variables d'environnement
    load_dotenv()
    database_url = os.getenv("DATABASE_URL")
    
    if not database_url:
        print("‚ùå DATABASE_URL non trouv√© dans .env")
        return False
    
    try:
        # √âtape 1: Sauvegarder l'ancienne migration vide
        old_migration_path = "alembic/versions/19025397a60c_initial_local_setup.py"
        backup_path = "alembic/versions/19025397a60c_initial_local_setup.py.backup"
        
        print("1Ô∏è‚É£ Sauvegarde de l'ancienne migration...")
        if os.path.exists(old_migration_path):
            shutil.copy(old_migration_path, backup_path)
            print(f"   ‚úÖ Sauvegard√© vers: {backup_path}")
        
        # √âtape 2: Supprimer l'ancienne migration vide
        print("2Ô∏è‚É£ Suppression de l'ancienne migration vide...")
        if os.path.exists(old_migration_path):
            os.remove(old_migration_path)
            print(f"   ‚úÖ Supprim√©: {old_migration_path}")
        
        # √âtape 3: R√©initialiser la version Alembic (revenir √† la base)
        print("3Ô∏è‚É£ R√©initialisation de la version Alembic...")
        
        # Supprimer l'entr√©e de version actuelle
        engine = create_engine(database_url)
        with engine.connect() as conn:
            conn.execute(text("DELETE FROM alembic_version"))
            conn.commit()
            print("   ‚úÖ Version Alembic r√©initialis√©e")
        
        # √âtape 4: G√©n√©rer une nouvelle migration de r√©f√©rence
        print("4Ô∏è‚É£ G√©n√©ration de la nouvelle migration de r√©f√©rence...")
        
        result = subprocess.run(
            [sys.executable, "-m", "alembic", "revision", "--autogenerate", "-m", "baseline_existing_schema"],
            capture_output=True,
            text=True,
            cwd=os.path.dirname(os.path.abspath(__file__))
        )
        
        if result.returncode == 0:
            print("   ‚úÖ Nouvelle migration g√©n√©r√©e avec succ√®s")
            print(f"   üìù Sortie: {result.stdout}")
            
            # R√©cup√©rer le nom du fichier g√©n√©r√©
            lines = result.stdout.split('\n')
            migration_file = None
            for line in lines:
                if "Generating" in line and "alembic/versions" in line:
                    # Extraire le chemin du fichier
                    migration_file = line.split("Generating ")[1].split(" ...")[0]
                    break
            
            if migration_file:
                print(f"   üìÅ Fichier cr√©√©: {migration_file}")
                
                # V√©rifier le contenu du fichier g√©n√©r√©
                if os.path.exists(migration_file):
                    with open(migration_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    if "def upgrade():" in content and "pass" not in content:
                        print("   ‚úÖ Migration contient des instructions valides")
                    else:
                        print("   ‚ö†Ô∏è Migration g√©n√©r√©e semble vide - c'est normal si les tables correspondent d√©j√†")
            
        else:
            print("   ‚ùå Erreur lors de la g√©n√©ration de la migration")
            print(f"   Erreur: {result.stderr}")
            return False
        
        # √âtape 5: Tamponner la version (marquer comme appliqu√©e sans l'ex√©cuter)
        print("5Ô∏è‚É£ Tamponnage de la version (stamp head)...")
        
        result = subprocess.run(
            [sys.executable, "-m", "alembic", "stamp", "head"],
            capture_output=True,
            text=True,
            cwd=os.path.dirname(os.path.abspath(__file__))
        )
        
        if result.returncode == 0:
            print("   ‚úÖ Version tamponn√©e avec succ√®s")
            print("   üìã Alembic consid√®re maintenant que la migration est appliqu√©e")
        else:
            print("   ‚ùå Erreur lors du tamponnage")
            print(f"   Erreur: {result.stderr}")
            return False
        
        # √âtape 6: V√©rification finale
        print("6Ô∏è‚É£ V√©rification finale...")
        
        result = subprocess.run(
            [sys.executable, "-m", "alembic", "current"],
            capture_output=True,
            text=True,
            cwd=os.path.dirname(os.path.abspath(__file__))
        )
        
        if result.returncode == 0:
            current_version = result.stdout.strip()
            print(f"   ‚úÖ Version Alembic actuelle: {current_version}")
            
            if "(head)" in current_version:
                print("   üéØ Alembic est maintenant synchronis√© avec votre base de donn√©es !")
                return True
            else:
                print("   ‚ö†Ô∏è Version pas √† jour")
                return False
        else:
            print("   ‚ùå Erreur lors de la v√©rification")
            print(f"   Erreur: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la correction: {str(e)}")
        return False

def test_future_migration():
    """Teste qu'une future migration peut √™tre g√©n√©r√©e"""
    print("\nüß™ TEST DE MIGRATION FUTURE")
    print("=" * 30)
    
    print("Test de g√©n√©ration d'une migration fictive...")
    
    # Cr√©er un fichier de test temporaire pour simuler un changement
    test_model_content = '''
# Test temporaire - sera supprim√©
from sqlalchemy import Column, Integer, String
from db.models import Base

class TestTable(Base):
    __tablename__ = "test_temp_table"
    id = Column(Integer, primary_key=True)
    test_field = Column(String(50))
'''
    
    test_file = "test_model_temp.py"
    
    try:
        # Cr√©er le fichier temporaire
        with open(test_file, 'w') as f:
            f.write(test_model_content)
        
        # Tenter de g√©n√©rer une migration
        result = subprocess.run(
            [sys.executable, "-m", "alembic", "revision", "--autogenerate", "-m", "test_migration"],
            capture_output=True,
            text=True,
            cwd=os.path.dirname(os.path.abspath(__file__))
        )
        
        if result.returncode == 0:
            print("   ‚úÖ G√©n√©ration de migration future: OK")
            
            # Supprimer la migration de test g√©n√©r√©e
            lines = result.stdout.split('\n')
            for line in lines:
                if "Generating" in line and "alembic/versions" in line:
                    test_migration_file = line.split("Generating ")[1].split(" ...")[0]
                    if os.path.exists(test_migration_file):
                        os.remove(test_migration_file)
                        print(f"   üóëÔ∏è Migration de test supprim√©e: {test_migration_file}")
                    break
        else:
            print("   ‚ö†Ô∏è Probl√®me avec la g√©n√©ration de migration future")
            print(f"   D√©tail: {result.stderr}")
        
    except Exception as e:
        print(f"   ‚ùå Erreur test: {str(e)}")
    finally:
        # Supprimer le fichier temporaire
        if os.path.exists(test_file):
            os.remove(test_file)

if __name__ == "__main__":
    print("üöÄ Lancement de la correction Alembic")
    
    success = fix_alembic_migration()
    
    if success:
        test_future_migration()
        print("\nüéâ CORRECTION TERMIN√âE AVEC SUCC√àS !")
        print("üìã Alembic est maintenant correctement configur√©")
        print("üí° Vous pouvez maintenant g√©n√©rer des migrations futures avec:")
        print("   python -m alembic revision --autogenerate -m 'description_changement'")
        print("   python -m alembic upgrade head")
    else:
        print("\n‚ùå CORRECTION √âCHOU√âE")
        print("üîß V√©rifiez les erreurs ci-dessus et r√©essayez")