# workflow/devis_workflow.py - VERSION COMPL√àTE AVEC VALIDATEUR CLIENT
import re
import sys
import io
import os
import json
import logging
import asyncio
from fastapi import APIRouter, HTTPException

from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from difflib import SequenceMatcher
from services.llm_extractor import LLMExtractor
from services.mcp_connector import MCPConnector, call_mcp_with_progress, test_mcp_connections_with_progress
from services.progress_tracker import progress_tracker, QuoteTask, TaskStatus
from services.suggestion_engine import SuggestionEngine
from services.client_validator import ClientValidator
from services.websocket_manager import websocket_manager
from services.company_search_service import company_search_service
from utils.client_lister import find_client_everywhere
from services.product_search_engine import ProductSearchEngine
from workflow.client_creation_workflow import client_creation_workflow
from services.price_engine import PriceEngineService
from services.cache_manager import referential_cache
from workflow.validation_workflow import SequentialValidator

# Configuration s√©curis√©e pour Windows
if sys.platform == "win32":
    os.environ["PYTHONIOENCODING"] = "utf-8"

# Configuration des logs avec gestion d'erreur
os.makedirs('logs', exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/workflow_devis.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ],
    force=True
)
logger = logging.getLogger('workflow_devis')

# Import conditionnel du validateur client
try:
    VALIDATOR_AVAILABLE = True
    logger.info("‚úÖ Validateur client disponible")
except ImportError as e:
    VALIDATOR_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è Validateur client non disponible: {str(e)}")

class DevisWorkflow:
    """Coordinateur du workflow de devis entre Claude, Salesforce et SAP - VERSION AVEC VALIDATEUR CLIENT"""
    
    def __init__(self, validation_enabled: bool = True, draft_mode: bool = False, force_production: bool = True, task_id: str = None):
        """
        Args:
            validation_enabled: Active la validation des donn√©es
            draft_mode: Mode brouillon (True) ou normal (False)
            force_production: Force le mode production m√™me si connexions √©chouent
            task_id: ID de t√¢che existant pour r√©cup√©rer une t√¢che en cours
        """
        # Initialisation des composants principaux
        self.mcp_connector = MCPConnector()
        self.llm_extractor = LLMExtractor()
        self.client_validator = ClientValidator() if validation_enabled else None
        self.validation_enabled = validation_enabled
        self.draft_mode = draft_mode
        self.force_production = force_production
        self.task_id = task_id  # Accepter un task_id pr√©d√©fini
        self.current_task = None
        self.context = {}
        self.workflow_steps = []

        # Configuration mode production/d√©mo
        self.demo_mode = not force_production
        if force_production:
            logger.info("üî• MODE PRODUCTION FORC√â - Pas de fallback d√©mo")

        if task_id:
            self.task_id = task_id
            self.current_task = progress_tracker.get_task(task_id)
            if self.current_task:
                logger.info(f"‚úÖ T√¢che r√©cup√©r√©e: {task_id}")
            else:
                # Ici, tu dois forcer la cr√©ation explicite AVEC ce m√™me ID
                logger.warning(f"‚ö†Ô∏è T√¢che {task_id} introuvable - cr√©ation explicite avec l'ID existant")
                self.current_task = progress_tracker.create_task(
                    user_prompt="G√©n√©ration de devis (cr√©√©e via fallback)",
                    draft_mode=self.draft_mode,
                    task_id=self.task_id  # <-- garder explicitement le m√™me ID
                )

        else:
            self.current_task = None
            self.task_id = None
            try:
                if task_id:
                    self.current_task = progress_tracker.get_task(task_id)
                    if self.current_task:
                        logger.info(f"‚úÖ T√¢che r√©cup√©r√©e: {task_id}")
                        # Synchroniser le contexte existant si disponible
                        if hasattr(self.current_task, 'context'):
                            self.context.update(self.current_task.context)
                    else:
                        logger.warning(f"‚ö†Ô∏è T√¢che {task_id} introuvable")
            except Exception as e:
                logger.error(f"Erreur lors de la r√©cup√©ration de la t√¢che {task_id}: {str(e)}")

        # Initialisation des moteurs
        self.suggestion_engine = SuggestionEngine()
        self.client_suggestions = None
        self.product_suggestions = []

        # Initialisation des validateurs et cache
        self.cache_manager = referential_cache
        self.sequential_validator = SequentialValidator(self.mcp_connector, self.llm_extractor)

        # Pr√©-chargement asynchrone du cache
        try:
            asyncio.create_task(self._initialize_cache())
        except RuntimeError:
            logger.info("‚è≥ Initialisation du cache diff√©r√©e (pas d'event loop actif)")

        logger.info("‚úÖ Workflow initialis√© avec cache et validation s√©quentielle")

    async def _initialize_cache(self):
        """Initialisation asynchrone du cache"""
        try:
            await self.cache_manager.preload_common_data(self.mcp_connector)
            logger.info("üöÄ Cache pr√©-charg√© avec succ√®s")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur pr√©-chargement cache: {str(e)}")
        
    def _initialize_task_tracking(self, prompt: str) -> str:
        """Initialise le tracking de progression pour cette g√©n√©ration"""
        if self.task_id:
            # Utiliser le task_id pr√©d√©fini
            self.current_task = progress_tracker.create_task(
                user_prompt=prompt,
                draft_mode=self.draft_mode,
                task_id=self.task_id
            )
        else:
            # Cr√©er un nouveau task_id si non fourni
            self.current_task = progress_tracker.create_task(
                user_prompt=prompt,
                draft_mode=self.draft_mode
            )
            self.task_id = self.current_task.task_id
        # Conserver une r√©f√©rence globale pour les WebSockets
        progress_tracker._current_task = self.current_task
        logger.info(f"Tracking initialis√© pour la t√¢che: {self.task_id}")
        return self.task_id
    
    def _track_step_start(self, step_id: str, message: str = ""):
        """D√©marre le tracking d'une √©tape"""
        self._track_step_complete("extract_info", "‚úÖ Informations extraites avec succ√®s")
        if self.current_task:
            self.current_task.start_step(step_id, message)
    
    def _track_step_progress(self, step_id: str, progress: int, message: str = ""):
        """Track et notifie la progression avec WebSocket"""
        if self.current_task:
            if progress == 0:
                self.current_task.start_step(step_id, message)
            elif progress == 100:
                self.current_task.complete_step(step_id, message)
            else:
                self.current_task.update_step_progress(step_id, progress, message)
            
            # Notification WebSocket si disponible
            try:
                asyncio.create_task(websocket_manager.broadcast_to_task(
                    self.current_task.task_id,
                    {
                        "type": "progress_update",
                        "step_id": step_id,
                        "progress": progress,
                        "message": message
                    }
                ))
            except Exception:
                pass  # WebSocket optionnel
    
    def _track_step_complete(self, step_id: str, message: str = ""):
        """Termine une √©tape avec succ√®s"""
        if self.current_task:
            self.current_task.complete_step(step_id, message)
    
    def _track_step_fail(self, step_id: str, error: str, message: str = ""):
        """Termine une √©tape en erreur"""
        if self.current_task:
            self.current_task.fail_step(step_id, error, message)

    def _build_error_response(self, error_title: str, error_message: str,
                        context: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        Construit une r√©ponse d'erreur standardis√©e

        Args:
            error_title: Titre de l'erreur
            error_message: Message d√©taill√©
            context: Contexte additionnel optionnel

        Returns:
            Dict avec structure d'erreur standardis√©e
        """

        response = {
            "success": False,
            "status": "error",
            "error": error_message,
            "message": error_message,
            "timestamp": datetime.now().isoformat(),
            "error_type": error_title.lower().replace(" ", "_")
        }

        if self.task_id:
            response["task_id"] = self.task_id

        if context:
            response["context"] = context

        return response

    # üîß NOUVELLE M√âTHODE PRINCIPALE AVEC VALIDATION S√âQUENTIELLE
    async def process_quote_request(self, user_prompt: str, draft_mode: bool = False) -> Dict[str, Any]:
        """
        üîß M√âTHODE PRINCIPALE REFACTORIS√âE : extraction, validation, g√©n√©ration du devis
        """
        try:
            # Mode brouillon
            self.draft_mode = draft_mode

            # Nettoyage pr√©ventif du cache
            await self.cache_manager.cleanup_expired()

            # PHASE 1: Analyse du prompt
            self._track_step_start("parse_prompt", "üîç Analyse de votre demande")
            extracted_info = await self._extract_info_from_prompt(user_prompt)
            if not extracted_info:
                return self._build_error_response(
                    "Extraction √©chou√©e", "Impossible d'analyser votre demande"
                )
            self._track_step_complete("parse_prompt", "‚úÖ Demande analys√©e")

            # PHASE 2: Ex√©cution du workflow de devis
            self._track_step_start("quote_workflow", "üöÄ D√©marrage du workflow de devis")
            workflow_result = await self._process_quote_workflow(extracted_info)

            # Cas : interaction utilisateur n√©cessaire
            if workflow_result.get("status") == "user_interaction_required":
                # Suivi d'√©tape
                step = workflow_result.get("step")
                if step:
                    self._track_step_progress(
                        "quote_workflow", 50, f"‚ùó En attente: {step}"
                    )
                # Ajout du contexte pour reprise
                workflow_result.setdefault("workflow_context", {}).update({
                    "task_id": self.task_id,
                    "extracted_info": extracted_info,
                    "user_prompt": user_prompt,
                    "draft_mode": draft_mode
                })
                return workflow_result

            # Cas : workflow termin√© normalement
            self._track_step_complete("quote_workflow", "‚úÖ Workflow de devis termin√©")
            return workflow_result

        except Exception as e:
            logger.exception(f"Erreur workflow principal: {e}")
            # Suivi d'erreur global
            self._track_step_fail(
                "quote_workflow", "‚ùå Erreur syst√®me", str(e)
            )
            return self._build_error_response(
                "Erreur syst√®me", f"Erreur interne: {str(e)}"
            )


    # üÜï NOUVELLE M√âTHODE POUR CONTINUER APR√àS INTERACTION
    async def continue_after_user_input(self, user_input: Dict, context: Dict) -> Dict[str, Any]:
        """
        Continue le workflow apr√®s une interaction utilisateur
        """

        try:
            interaction_type = context.get("interaction_type")

            if interaction_type == "client_selection":
                return await self._handle_client_selection(user_input, context)

            elif interaction_type == "client_creation":
                return await self._handle_client_creation(user_input, context)

            elif interaction_type == "product_selection":
                return await self._handle_product_selection(user_input, context)

            elif interaction_type == "quantity_adjustment":
                return await self._handle_quantity_adjustment(user_input, context)

            else:
                return self._build_error_response("Type d'interaction non reconnu", f"Type: {interaction_type}")

        except Exception as e:
            logger.exception(f"Erreur continuation workflow: {str(e)}")
            return self._build_error_response("Erreur continuation", str(e))

    # üîß HANDLERS POUR CHAQUE TYPE D'INTERACTION

    async def _handle_client_selection(self, user_input: Dict, context: Dict) -> Dict[str, Any]:
        """üîß G√®re la s√©lection de client par l'utilisateur avec continuation workflow"""
        try:
            action = user_input.get("action")

            if action == "select_existing":
                # V√©rification et cache
                selected_client_data = user_input.get("selected_data")
                if not selected_client_data:
                    return self._build_error_response("S√©lection invalide", "Donn√©es client manquantes")
                await self.cache_manager.cache_client(
                    selected_client_data.get("Name"),
                    selected_client_data
                )

                # Mise √† jour du contexte
                self.context["client_info"] = {"data": selected_client_data, "found": True}
                self.context["client_validated"] = True
                logger.info(f"‚úÖ Client s√©lectionn√©: {selected_client_data.get('Name','N/A')}")

                # Poursuite du workflow
                workflow_ctx = context.get("workflow_context", {})
                original_products = workflow_ctx.get("extracted_info", {}).get("products", [])
                if original_products:
                    self._track_step_start(
                        "lookup_products",
                        f"üì¶ Recherche de {len(original_products)} produit(s)"
                    )
                    await self._process_products_retrieval(original_products)
                    return await self._continue_workflow_after_client_selection(
                        selected_client_data,
                        {"extracted_info": {"products": original_products}}
                    )
                else:
                    return self._build_error_response(
                        "Workflow incomplet",
                        "Produits manquants pour continuer"
                    )

            elif action == "create_new":
                client_name = user_input.get("client_name", context.get("original_client_name", ""))
                return await self._initiate_client_creation(client_name)

            elif action == "cancel":
                return {
                    "status": "cancelled",
                    "message": "Demande de devis annul√©e par l'utilisateur"
                }

            else:
                return self._build_error_response(
                    "Action non reconnue",
                    f"Action: {action}"
                )

        except Exception as e:
            logger.exception(f"Erreur _handle_client_selection: {e}")
            return self._build_error_response("Erreur s√©lection client", str(e))

            logger.exception(f"Erreur gestion s√©lection client: {str(e)}")
            return self._build_error_response("Erreur s√©lection client", str(e))


    async def _search_company_enrichment(self, company_name: str) -> Dict[str, Any]:
        """Enrichissement des donn√©es client via INSEE/PAPPERS"""
        try:
           
            # Recherche via agent d'enrichissement
            search_result = await company_search_service.search_company(company_name, max_results=5)

            
            if search_result.get("success") and search_result.get("companies"):
                company = search_result["companies"][0]  # Premier r√©sultat
                
                return {
                    "success": True,
                    "company_data": {
                        "official_name": company.get("denomination", company_name),
                        "siren": company.get("siren", ""),
                        "siret": company.get("siret", ""),
                        "address": {
                            "street": company.get("adresse", ""),
                            "postal_code": company.get("code_postal", ""),
                            "city": company.get("ville", ""),
                            "country": "France"
                        },
                        "activity": {
                            "code": company.get("activite_principale", ""),
                            "label": company.get("libelle_activite", "")
                        },
                        "legal_form": company.get("forme_juridique", ""),
                        "status": company.get("etat", ""),
                        "creation_date": company.get("date_creation", ""),
                        "source": "INSEE/PAPPERS"
                    }
                }
            else:
                # Pas de donn√©es enrichies disponibles
                return {
                    "success": False,
                    "message": "Aucune donn√©e d'enrichissement trouv√©e",
                    "company_data": {
                        "official_name": company_name,
                        "source": "manual"
                    }
                }
                
        except Exception as e:
            logger.error(f"Erreur enrichissement: {e}")
            return {
                "success": False,
                "error": str(e),
                "company_data": {"official_name": company_name, "source": "manual"}
            }

    ## 4. PR√âVENTION DOUBLONS

    async def _check_duplicates_enhanced(self, client_name: str, enrichment_data: Dict) -> Dict[str, Any]:
        """üîé D√©tection avanc√©e des doublons (SIREN + similarit√© de nom)"""
        try:
            potential_duplicates = []

            # 1Ô∏è‚É£ Recherche par SIREN
            potential_duplicates += await self._search_duplicates_by_siren(enrichment_data)

            # 2Ô∏è‚É£ Recherche par mots du nom
            potential_duplicates += await self._search_duplicates_by_name(client_name)

            # 3Ô∏è‚É£ Nettoyage et scoring
            scored_duplicates = self._deduplicate_and_score(client_name, potential_duplicates)

            # 4Ô∏è‚É£ Filtrage final
            probable_duplicates = [dup for dup in scored_duplicates if dup["similarity_score"] > 0.7]

            if probable_duplicates:
                return {
                    "has_duplicates": True,
                    "duplicates": probable_duplicates,
                    "duplicate_count": len(probable_duplicates),
                    "requires_user_choice": True,
                    "message": f"‚ö†Ô∏è {len(probable_duplicates)} client(s) similaire(s) d√©tect√©(s)",
                    "actions": [
                        {"action": "use_existing", "label": "üìã Utiliser client existant"},
                        {"action": "create_anyway", "label": "‚ûï Cr√©er quand m√™me"},
                        {"action": "cancel", "label": "‚ùå Annuler"}
                    ]
                }
            else:
                return {"has_duplicates": False, "message": "‚úÖ Aucun doublon d√©tect√©"}

        except Exception as e:
            logger.error(f"‚ùå Erreur v√©rification doublons: {e}")
            return {"has_duplicates": False, "error": str(e)}


    async def _search_duplicates_by_siren(self, enrichment_data: Dict) -> list:
        """üîç Recherche des doublons via le SIREN"""
        siren = enrichment_data.get("company_data", {}).get("siren", "")
        if not siren:
            return []
        
        query = f"""
            SELECT Id, Name, AccountNumber, FederalTaxID 
            FROM Account 
            WHERE FederalTaxID LIKE '%{siren}%'
        """
        result = await self.mcp_connector.call_mcp("salesforce_mcp", "salesforce_query", {"query": query})
        return result.get("data", []) if result.get("success") else []


    async def _search_duplicates_by_name(self, client_name: str) -> list:
        """üîç Recherche des doublons par mots significatifs dans le nom"""
        words = {word for word in client_name.split() if len(word) > 3}
        if not words:
            return []
        
        conditions = " OR ".join([f"Name LIKE '%{word}%'" for word in words])
        query = f"""
            SELECT Id, Name, AccountNumber 
            FROM Account 
            WHERE {conditions}
        """
        result = await self.mcp_connector.call_mcp("salesforce_mcp", "salesforce_query", {"query": query})
        return result.get("data", []) if result.get("success") else []


    def _deduplicate_and_score(self, client_name: str, duplicates: list) -> list:
        """üß† D√©duplique et ajoute un score de similarit√©"""
        seen_ids = set()
        unique = []

        for dup in duplicates:
            account_id = dup.get("Id")
            if account_id and account_id not in seen_ids:
                seen_ids.add(account_id)
                dup["similarity_score"] = self._calculate_similarity(
                    client_name.upper().strip(),
                    dup.get("Name", "").upper().strip()
                )
                unique.append(dup)
        return unique

    def _calculate_similarity(self, name1: str, name2: str) -> float:
        """Calcul simple de similarit√© entre deux noms"""
        try:
            
            return SequenceMatcher(None, name1.lower(), name2.lower()).ratio()
        except:
            return 0.0
    async def _handle_client_creation(self, user_input: Dict, context: Dict) -> Dict[str, Any]:
        """G√®re la cr√©ation d'un nouveau client"""

        if user_input.get("action") == "create_client":
            # Lancer le processus de cr√©ation avec validation SIRET
            client_name = user_input.get("client_name") or context.get("client_name")

            return {
                "status": "client_creation_required",
                "message": f"Cr√©ation du client '{client_name}' en cours...",
                "next_step": "gather_client_info",
                "client_name": client_name
            }

        elif user_input.get("action") == "retry_client":
            # Demander un nouveau nom de client
            return {
                "status": "user_interaction_required",
                "interaction_type": "client_retry",
                "message": "Veuillez saisir le nom correct du client :",
                "input_type": "text",
                "placeholder": "Nom de l'entreprise"
            }

    async def _handle_product_selection(self, user_input: Dict, context: Dict) -> Dict[str, Any]:
        """G√®re la s√©lection de produit par l'utilisateur"""

        selected_product_data = user_input.get("selected_data")
        current_context = context.get("validation_context", {})

        if selected_product_data:
            # Ajouter le produit s√©lectionn√© aux produits valid√©s
            validated_products = current_context.get("validated_products", [])
            validated_products.append({
                "product_data": selected_product_data,
                "requested_quantity": user_input.get("quantity", 1),
                "resolution_type": "user_selected"
            })

            # V√©rifier s'il reste des produits √† r√©soudre
            unresolved_products = current_context.get("unresolved_products", [])

            if len(unresolved_products) > 1:
                # Il reste des produits √† traiter
                remaining_products = unresolved_products[1:]
                return await self._continue_product_resolution(validated_products, remaining_products)
            else:
                # Tous les produits sont r√©solus - passer √† la validation des quantit√©s
                return await self._continue_quantity_validation(validated_products)

    async def _handle_quantity_adjustment(self, user_input: Dict, context: Dict) -> Dict[str, Any]:
        """G√®re l'ajustement des quantit√©s"""

        action = user_input.get("action")

        if action == "proceed":
            # Continuer avec les quantit√©s disponibles
            final_products = context.get("final_products", [])
            return await self._continue_quote_generation({"products": final_products})

        elif action == "modify":
            # Permettre la modification des quantit√©s
            return {
                "status": "user_interaction_required",
                "interaction_type": "quantity_modification",
                "message": "Modification des quantit√©s :",
                "products": context.get("final_products", []),
                "input_type": "quantity_form"
            }

        elif action == "cancel":
            return {
                "status": "cancelled",
                "message": "Demande de devis annul√©e par l'utilisateur"
            }

    # üÜï M√âTHODE DE G√âN√âRATION FINALE OPTIMIS√âE
    async def _continue_quote_generation(self, validated_data: Dict) -> Dict[str, Any]:
        """Continue la g√©n√©ration du devis avec les donn√©es valid√©es"""

        try:
            # PHASE 3: G√©n√©ration du devis avec donn√©es valid√©es
            self._track_step_start("generate_quote", "üìÑ G√©n√©ration du devis...")

            client_data = validated_data.get("client", self.context.get("client_info", {}).get("data"))
            products_data = validated_data.get("products", self.context.get("products_info", []))

            # Calculs finaux
            total_amount = sum(p.get("LineTotal", 0) for p in products_data)

            # G√©n√©ration SAP
            sap_quote = await self._create_sap_quote(client_data, products_data)

            # G√©n√©ration Salesforce (si SAP r√©ussi)
            if sap_quote.get("success"):
                sf_opportunity = await self._create_salesforce_opportunity(client_data, products_data, sap_quote)

                self._track_step_complete("generate_quote", f"‚úÖ Devis g√©n√©r√© - Total: {total_amount:.2f}‚Ç¨")

                return {
                    "status": "quote_generated",
                    "quote_data": {
                        "client": client_data,
                        "products": products_data,
                        "total_amount": total_amount,
                        "sap_quote_number": sap_quote.get("quote_number"),
                        "salesforce_opportunity_id": sf_opportunity.get("opportunity_id"),
                        "cache_performance": await self.cache_manager.get_cache_stats()
                    }
                }
            else:
                self._track_step_fail("generate_quote", "Erreur SAP", sap_quote.get("error"))
                return self._build_error_response("Erreur g√©n√©ration", sap_quote.get("error"))

        except Exception as e:
            logger.exception(f"Erreur g√©n√©ration finale: {str(e)}")
            return self._build_error_response("Erreur g√©n√©ration", str(e))

    # M√©thodes auxiliaires pour la g√©n√©ration
    async def _create_sap_quote(self, client_data: Dict, products_data: List[Dict]) -> Dict[str, Any]:
        """Cr√©e le devis dans SAP"""
        try:
            # Utiliser la m√©thode existante _create_quote_in_salesforce qui g√®re SAP et Salesforce
            self.context["client_info"] = {"data": client_data, "found": True}
            self.context["products_info"] = products_data

            result = await self._create_quote_in_salesforce()
            return {
                "success": result.get("success", False),
                "quote_number": result.get("sap_quote_number"),
                "error": result.get("error")
            }
        except Exception as e:
            logger.exception(f"Erreur cr√©ation devis SAP: {str(e)}")
            return {"success": False, "error": str(e)}

    async def _create_salesforce_opportunity(self, client_data: Dict, products_data: List[Dict], sap_quote: Dict) -> Dict[str, Any]:
        """Cr√©e l'opportunit√© dans Salesforce"""
        try:
            # Cette m√©thode est d√©j√† g√©r√©e dans _create_quote_in_salesforce
            return {
                "success": True,
                "opportunity_id": sap_quote.get("salesforce_opportunity_id")
            }
        except Exception as e:
            logger.exception(f"Erreur cr√©ation opportunit√© Salesforce: {str(e)}")
            return {"success": False, "error": str(e)}

    async def process_prompt(self, user_prompt: str, task_id: str = None) -> Dict[str, Any]:
        """IMPORTANT: Utiliser le task_id fourni, ne jamais le r√©g√©n√©rer"""
        """
        Traite un prompt avec tracking de progression
        """
        if task_id:
            self.task_id = task_id
            logger.info(f"‚úÖ Utilisation du task_id fourni: {task_id}")
        extracted_info: Optional[Dict[str, Any]] = None
        """Process le prompt utilisateur via LLM et workflow"""
        try:
            # üîß MODIFICATION : Utiliser le task_id fourni si disponible
            if task_id:
                self.task_id = task_id
                # R√©cup√©rer la t√¢che existante cr√©√©e par start_quote_workflow
                self.current_task = progress_tracker.get_task(task_id)
                if not self.current_task:
                # Si pas trouv√©e (ne devrait pas arriver), la cr√©er
                    self.current_task = progress_tracker.create_task(
                    user_prompt=user_prompt,
                    draft_mode=self.draft_mode,
                    task_id=task_id
                    )

            # Si pas de task existante, en cr√©er une nouvelle
            if not self.current_task:
                self.task_id = self._initialize_task_tracking(user_prompt)

            logger.info(f"=== D√âMARRAGE WORKFLOW - T√¢che {self.task_id} ===")

            # üîß MODIFICATION : D√©marrer le tracking de progression
            self._track_step_start("parse_prompt", "üîç Analyse de votre demande")

            # Extraction des informations (code existant adapt√©)
            extracted_info = await self.llm_extractor.extract_quote_info(user_prompt)
            if not extracted_info:
                raise ValueError("Extraction des informations √©chou√©e")
            self._track_step_progress("parse_prompt", 100, "‚úÖ Demande analys√©e")
            self._track_step_complete("parse_prompt")

            # üîß MODIFICATION : V√©rification du mode production
            mode = "PRODUCTION" if not self.draft_mode else "DRAFT"
            logger.info(f"üîß MODE {mode} ACTIV√â")

            # V√©rifier les connexions
            self._track_step_start("validate_input", "üîß V√©rification des connexions")
            connections_ok = await self._check_connections()
            if not connections_ok:
                raise Exception("Connexions SAP/Salesforce indisponibles")
            self._track_step_complete("validate_input", "‚úÖ Connexions valid√©es")

            # Router selon le type d'action
            action_type = extracted_info.get("action_type", "DEVIS")

            if action_type == "DEVIS":
                try:
                    result = await self._process_quote_workflow(extracted_info)
                    if result.get("status") == "client_validation_required":
                        return result
                except Exception as e:
                    logger.error(f"‚ùå Erreur process_prompt: {str(e)}")
                    return {"success": False, "error": str(e)}
            else:
                result = await self._process_other_action(extracted_info)


            # üîß CORRECTION : Ne marquer comme termin√©e QUE si workflow r√©ellement termin√©
            if self.current_task:
                if result.get("status") == "user_interaction_required":
                    # Laisser la t√¢che en attente d'interaction - ne pas la terminer
                    logger.info(f"‚è∏Ô∏è T√¢che {self.task_id} en attente d'interaction utilisateur")
                else:
                    # Workflow termin√© normalement
                    progress_tracker.complete_task(self.task_id, result)
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erreur process_prompt: {str(e)}", exc_info=True)
            if self.current_task:
                progress_tracker.fail_task(self.task_id, str(e))
            raise
    
    async def _execute_full_workflow(self, prompt: str) -> Dict[str, Any]:
        """
        üîß M√âTHODE AJOUT√âE : Wrapper pour ex√©cution compl√®te du workflow
        
        ‚ö†Ô∏è NOTE : Cette m√©thode est appel√©e dans process_prompt mais semble redondante
        car le workflow principal est d√©j√† trait√© par _process_quote_workflow
        
        Args:
            prompt: Demande utilisateur originale
            
        Returns:
            Dict avec le r√©sultat complet du workflow
        """
        try:
            logger.info("üîÑ Ex√©cution du workflow complet")
            
            # üîß ATTENTION : Cette m√©thode ne devrait pas √™tre n√©cessaire
            # Le workflow est d√©j√† trait√© dans process_prompt par :
            # - _process_quote_workflow pour les devis
            # - _process_other_action pour les autres actions
            
            # Si cette m√©thode est appel√©e, retourner le r√©sultat d√©j√† calcul√©
            if hasattr(self, '_current_workflow_result'):
                logger.info("‚úÖ Retour du r√©sultat d√©j√† calcul√©")
                return self._current_workflow_result
            
            # Sinon, re-ex√©cuter l'extraction et le workflow de base
            logger.warning("‚ö†Ô∏è R√©-ex√©cution du workflow - ceci indique un probl√®me de logique")
            
            # Extraction de base
            extracted_info = await self.llm_extractor.extract_quote_info(prompt)
            
            # Router selon le type d'action
            action_type = extracted_info.get("action_type", "DEVIS")
            
            # Ex√©cuter le workflow appropri√© et sauvegarder le r√©sultat
            if action_type == "DEVIS":
                self._current_workflow_result = await self._process_quote_workflow(extracted_info)
            else:
                self._current_workflow_result = await self._process_other_action(extracted_info)

            # Utiliser le r√©sultat sauvegard√© (pas de re-calcul)
            result = self._current_workflow_result
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erreur _execute_full_workflow: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "message": "Erreur lors de l'ex√©cution du workflow complet"
            }
    
    async def process_prompt_original(self, prompt: str, task_id: str = None, draft_mode: bool = False) -> Dict[str, Any]:
        """
        Traite une demande de devis en langage naturel avec tracking d√©taill√©

        Args:
            prompt: Demande en langage naturel
            task_id: ID de t√¢che existant (pour r√©cup√©rer une t√¢che) ou None pour en cr√©er une
            draft_mode: Mode brouillon si True, mode normal si False
        """
        try:
            # Stocker le mode draft si fourni
            if draft_mode:
                self.draft_mode = draft_mode
                logger.info("Mode DRAFT activ√© pour cette g√©n√©ration")

            # Test des connexions si mode production forc√©
            if self.force_production:
                logger.info("üîç V√©rification connexions pour mode production...")

                try:
                    connections = await MCPConnector.test_connections()
                    sf_connected = connections.get('salesforce', {}).get('connected', False)
                    sap_connected = connections.get('sap', {}).get('connected', False)

                    if not sf_connected and not sap_connected:
                        raise ConnectionError("Aucune connexion syst√®me disponible")

                    logger.info(f"‚úÖ Connexions OK - SF: {sf_connected}, SAP: {sap_connected}")

                except Exception as e:
                    if self.force_production:
                        # En mode production forc√©, √©chouer plut√¥t que de basculer en d√©mo
                        return {
                            "success": False,
                            "error": f"Connexions syst√®me indisponibles: {e}",
                            "message": "Impossible de traiter la demande - Syst√®mes non disponibles"
                        }

            # Initialiser ou r√©cup√©rer le tracking
            if task_id:
                self.current_task = progress_tracker.get_task(task_id)
                self.task_id = task_id
                if not self.current_task:
                    raise ValueError(f"T√¢che {task_id} introuvable")
            else:
                self.task_id = self._initialize_task_tracking(prompt)
            
            logger.info(f"=== D√âMARRAGE WORKFLOW - T√¢che {self.task_id} ===")
            logger.info(f"Mode: {'DRAFT' if self.draft_mode else 'NORMAL'}")
            
            # ========== PHASE 1: ANALYSE DE LA DEMANDE ==========
            
            # √âtape 1.1: Analyse initiale
            self._track_step_start("parse_prompt", "Analyse de votre demande...")
            await asyncio.sleep(0.5)  # Simulation temps de traitement
            self._track_step_progress("parse_prompt", 50, "D√©composition de la demande")
            
            # √âtape 1.2: Extraction des entit√©s
            self._track_step_complete("parse_prompt", "Demande analys√©e")
            self._track_step_start("extract_entities", "Identification des besoins...")
            
            extracted_info = await self._extract_info_unified(prompt, "standard")
            self.context["extracted_info"] = extracted_info

            # üîç DEBUG : Log du type d'action
            logger.info(f"üéØ TYPE D'ACTION RE√áU: {extracted_info.get('action_type', 'AUCUN')}")
            logger.info(f"üìã DONN√âES EXTRAITES: {extracted_info}")

            # üÜï NOUVEAU : Router selon le type d'action d√©tect√©
            action_type = extracted_info.get("action_type", "DEVIS")
            logger.info(f"üöÄ ROUTAGE VERS: {action_type}")

            if action_type == "RECHERCHE_PRODUIT":
                return await self._handle_product_search(extracted_info)
            elif action_type == "INFO_CLIENT":
                return await self._handle_client_info(extracted_info)
            elif action_type == "CONSULTATION_STOCK":
                return await self._handle_stock_consultation(extracted_info)
            elif action_type == "DEVIS":
                # Continuer avec le workflow de devis existant
                pass
            else:
                return await self._handle_other_request(extracted_info)
            # V√©rifier les √©l√©ments manquants et demander les informations
            missing_elements = []
            if not extracted_info.get("client"):
                missing_elements.append("client")
            if not extracted_info.get("products") or len(extracted_info.get("products", [])) == 0:
                missing_elements.append("produits")
            
            if missing_elements:
                self._track_step_complete("extract_entities", "Informations partielles extraites")
                return await self._build_missing_info_response(extracted_info, missing_elements)
            
            self._track_step_progress("extract_entities", 80, "Informations extraites")
            
            # √âtape 1.3: Validation input
            self._track_step_complete("extract_entities", "Besoins identifi√©s")
            self._track_step_start("validate_input", "V√©rification de la coh√©rence...")
            
            # Validation de coh√©rence (client + produits pr√©sents)
            if not extracted_info.get("client") or not extracted_info.get("products"):
                self._track_step_fail("validate_input", "Informations manquantes",
                                    "Client ou produits non sp√©cifi√©s")
                return self._build_error_response("Informations incompl√®tes", 
                                                "Veuillez sp√©cifier le client et les produits")
            
            self._track_step_complete("validate_input", "Demande valid√©e")
            
            # ========== PHASE 2: VALIDATION CLIENT ==========
            
            # √âtape 2.1: Recherche client
            self._track_step_start("search_client", "Recherche du client...")
            
            client_info = await unified_validator.validate_client_complete(extracted_info.get("client"))
            # CORRECTION : G√©rer les suggestions client M√äME si trouv√© (choix multiple)
            if client_info.get("suggestions") and len(client_info["suggestions"]) > 1:
                self._track_step_progress("verify_client_info", 50, "Plusieurs clients trouv√©s - s√©lection requise")
                return {
                    "status": "suggestions_required",
                    "type": "client_suggestions", 
                    "message": f"{len(client_info['suggestions'])} clients trouv√©s pour '{client_name}'",
                    "suggestions": client_info["suggestions"],
                    "workflow_context": {
                        "extracted_info": extracted_info,
                        "task_id": self.task_id,
                        "step": "client_validation"
                    }
                }
            # G√©rer les suggestions client
            if not client_info.get("found"):
            
                if client_info.get("suggestions"):
                    # Il y a des suggestions, retourner pour interaction utilisateur
                    self._track_step_progress("verify_client_info", 50, "Suggestions client disponibles")
                    return {
                        "status": "suggestions_required",
                        "type": "client_suggestions",
                        "message": client_info.get("message", "Suggestions disponibles"),
                        "suggestions": client_info["suggestions"],
                        "auto_suggest": client_info.get("auto_suggest", False),
                        "workflow_context": {
                            "extracted_info": extracted_info,
                            "task_id": self.task_id,
                            "step": "client_validation"
                        }
                    }
                else:
                    # Aucune suggestion, erreur classique
                    return self._build_error_response("Client non trouv√©", 
                                                    client_info.get("message", "Client introuvable"))
            
            self.context["client_info"] = client_info
            
            self._track_step_progress("search_client", 70, "Consultation des bases de donn√©es")
            
            # √âtape 2.2: V√©rification des informations
            self._track_step_complete("search_client", "Recherche termin√©e")
            self._track_step_start("verify_client_info", "V√©rification des informations...")
            
            # Gestion client non trouv√© avec validation
            if not client_info.get("found") and self.validation_enabled:
                self._track_step_progress("verify_client_info", 50, "Client non trouv√©, cr√©ation en cours...")
                validation_result = await self._handle_client_not_found_with_validation(
                    extracted_info.get("client"),
                    extracted_info  # ‚úÖ Passer le contexte complet pour continuation
                )

                # Ajout de log d√©taill√© avant envoi √† websocket (dans _handle_client_not_found_with_validation)
                # Cette fonction doit inclure le logging demand√©, ex:
                # logger.info(f"‚ñ∂Ô∏è [WORKFLOW] Demande de validation utilisateur pour le client '{client_name}'")
                # logger.debug(f"üîç [WORKFLOW] Donn√©es d'interaction pr√©par√©es: {json.dumps(interaction_data, indent=2, ensure_ascii=False)}")
                # ...

                if validation_result.get("client_created"):
                    client_info = validation_result["client_info"]
                    self.context["client_info"] = client_info
                    self.context["client_validation"] = validation_result["validation_details"]
                    self._track_step_progress("verify_client_info", 90, "Nouveau client cr√©√©")
                else:
                    self._track_step_fail("verify_client_info", validation_result.get("error", "Erreur de cr√©ation"),
                                        "Impossible de cr√©er le client")
                    return self._build_error_response("Impossible de cr√©er le client", validation_result.get("error"))
            elif not client_info.get("found"):
                self._track_step_fail("verify_client_info", "Client introuvable", client_info.get("error"))
                return self._build_error_response("Client non trouv√©", client_info.get("error"))
            
            # √âtape 2.3: Client pr√™t
            self._track_step_complete("verify_client_info", "Informations v√©rifi√©es")
            self._track_step_complete("client_ready", f"Client {client_info.get('name', 'N/A')} valid√©")
            # √âtape 2.4: V√©rification doublons
            self._track_step_start("check_duplicates", "V√©rification des doublons...")

            duplicate_check = await self._check_duplicate_quotes(
                client_info, 
                extracted_info.get("products", [])
            )
            self.context["duplicate_check"] = duplicate_check

            if duplicate_check.get("duplicates_found"):
                self._track_step_progress("check_duplicates", 80, f"‚ö†Ô∏è {len(duplicate_check.get('warnings', []))} alerte(s) d√©tect√©e(s)")
                
                logger.warning(f"‚ö†Ô∏è {len(duplicate_check.get('warnings', []))} doublons d√©tect√©s - R√©cup√©ration des informations produits quand m√™me")
                
                # üîß MODIFICATION : R√©cup√©rer les informations produits M√äME avec des doublons
                self._track_step_start("get_products_info", "R√©cup√©ration des informations produits...")
                
                validated_products = await self._validate_products_with_suggestions(extracted_info.get("products", []))
                product_info = []
                # V√©rifier s'il y a des produits n√©cessitant des suggestions
                products_with_suggestions = [p for p in validated_products if not p.get("found") and p.get("suggestions")]
                    
                if products_with_suggestions:
                    # Il y a des suggestions produits, retourner pour interaction utilisateur
                    self._track_step_progress("get_products_info", 50, "Suggestions produits disponibles")
                    return {
                        "status": "suggestions_required",
                        "type": "product_suggestions",
                        "message": f"{len(products_with_suggestions)} produit(s) n√©cessitent votre attention",
                        "products": validated_products,
                        "workflow_context": {
                            "extracted_info": extracted_info,
                            "client_info": client_info,
                            "task_id": self.task_id,
                            "step": "product_validation"
                        }
                    }
                else:
                    # Tous les produits sont OK, continuer avec la g√©n√©ration classique
                    products_info = [p["data"] for p in validated_products if p.get("found")]
                self.context["products_info"] = products_info
                
                self._track_step_complete("get_products_info", f"{len(products_info)} produit(s) analys√©(s)")
                
                # üì¢ AVERTISSEMENT NON BLOQUANT - L'utilisateur d√©cide AVEC les informations
                self._track_step_complete("check_duplicates", "Doublons d√©tect√©s - Suite du traitement")
                
                # R√©cup√©rer le nom du client depuis le contexte
                client_name = client_info.get("data", {}).get("Name", "Client")
                
                # En mode brouillon, m√™me avec des doublons, on continue le processus
                if self.draft_mode:
                    logger.info(f"‚ö†Ô∏è Doublons d√©tect√©s en mode brouillon - Continuation du processus malgr√© tout")
                    # Ne pas retourner ici, continuer √† la section suivante
                else:
                    # En mode normal (non brouillon), on demande confirmation avant de continuer
                    # üîß CONSTRUIRE MANUELLEMENT LA PR√âVISUALISATION DU DEVIS
                    quote_preview = {
                        "client": {
                            "name": client_name,
                            "account_number": client_info.get("data", {}).get("AccountNumber", ""),
                            "salesforce_id": client_info.get("data", {}).get("Id", ""),
                            "phone": client_info.get("data", {}).get("Phone", ""),
                            "email": client_info.get("data", {}).get("Email", ""),
                            "city": client_info.get("data", {}).get("BillingCity", ""),
                            "country": client_info.get("data", {}).get("BillingCountry", "")
                        },
                        "products": [],
                        "total_amount": 0.0,
                        "currency": "EUR"
                    }

                    # Traiter les produits pour la pr√©visualisation
                    total_amount = 0.0
                    for product in products_info:
                        if isinstance(product, dict) and "error" not in product:
                            # üîß EXTRACTION CORRIG√âE DES DONN√âES PRODUIT
                            product_code = (product.get("code") or 
                                        product.get("item_code") or 
                                        product.get("ItemCode", ""))
                            
                            product_name = (product.get("name") or 
                                        product.get("item_name") or 
                                        product.get("ItemName", "Sans nom"))
                            quantity = float(product.get("quantity", 1))
                            unit_price = float(product.get("unit_price", 0))
                            line_total = quantity * unit_price
                            total_amount += line_total
                            
                            quote_preview["products"].append({
                                "code": product.get("code", ""),
                                "name": product.get("name", "Sans nom"),
                                "quantity": quantity,
                                "unit_price": unit_price,
                                "line_total": line_total,
                                "stock": product.get("stock", 0)
                            })

                    quote_preview["total_amount"] = total_amount

                    # Retourner une r√©ponse WARNING avec tous les d√©tails n√©cessaires
                    warning_response = {
                        "success": False,  # False pour arr√™ter le polling
                        "status": "warning",  
                        "task_id": self.task_id,
                        "message": f"Devis existants d√©tect√©s pour {client_name}", 
                        "error_type": "duplicates_detected",
                        "error_details": {
                            "duplicate_check": duplicate_check,
                            "client_name": client_name,
                            "client_id": client_info.get("data", {}).get("Id"),
                            "action_required": "Des devis existants ont √©t√© trouv√©s. Que souhaitez-vous faire ?",
                            "quote_preview": quote_preview
                        }
                    }

                    # üîß CRITIQUE : Marquer la t√¢che comme termin√©e AVANT de retourner
                    if self.current_task and self.task_id:
                        progress_tracker.complete_task(self.task_id, warning_response)

                    logger.info(f"üîß RETOUR WARNING RESPONSE pour t√¢che {self.task_id}")
                    return warning_response
            else:
                # Pas de doublons, continuer normalement
                self._track_step_complete("check_duplicates", "Aucun doublon d√©tect√©")
    
            # ========== PHASE 3: TRAITEMENT DES PRODUITS ==========
            
            # √âtape 3.1: Connexion catalogue
            self._track_step_start("connect_catalog", "Connexion au catalogue...")
            await asyncio.sleep(0.3)  # Simulation connexion
            self._track_step_complete("connect_catalog", "Catalogue accessible")
            
            # √âtape 3.2: Recherche produits
            self._track_step_start("lookup_products", "V√©rification des produits...")
            
            # ‚úÖ NOUVEAU CODE AVEC PRICE ENGINE
            # √âtape 1: R√©cup√©rer les donn√©es techniques
            self._track_step_start("get_products_info", "R√©cup√©ration des informations produits...")
            products_info = await self._get_products_info(extracted_info.get("products", []))
            self._track_step_complete("get_products_info", f"{len(products_info)} produit(s) trouv√©(s)")

            # √âtape 2: Calculer les prix avec le Price Engine
            self._track_step_start("calculate_prices", "Calcul des prix avec Price Engine...")
            products_info = await self._apply_price_calculations(products_info, client_info.get("data", {}))
            self._track_step_complete("calculate_prices", "Prix calcul√©s avec succ√®s")

            # √âtape 3: Calculer le total
            total_amount = sum(p.get("line_total", 0) for p in products_info if not p.get("error"))
            self.context["products_info"] = products_info
            
            self._track_step_progress("lookup_products", 60, f"{len(products_info)} produits analys√©s")
            
            # √âtape 3.3: V√©rification stock
            self._track_step_complete("lookup_products", "Produits trouv√©s")
            self._track_step_start("check_stock", "V√©rification du stock...")
            
            availability = await self._check_availability(products_info)
            self.context["availability"] = availability
            
            self._track_step_progress("check_stock", 80, "Stock v√©rifi√©")
            
            # √âtape 3.4: Calcul des prix
            self._track_step_complete("check_stock", "Stock disponible")
            # ‚úÖ NOUVEAU CODE AVEC PRICE ENGINE

            self._track_step_start("calculate_prices", "Calcul des prix avec Price Engine...")
            price_engine = PriceEngineService()

            # Calculer les prix avec le nouveau moteur
            pricing_result = await price_engine.calculate_quote_pricing({
                "client_data": client_data,
                "products": products_data,
                "special_conditions": extracted_info.get("conditions", {})
            })

            # Mettre √† jour les produits avec les nouveaux prix
            products_data = pricing_result.get("updated_products", products_data)
            total_amount = pricing_result.get("total_amount", 0.0)

            self._track_step_progress("calculate_prices", 90, "Prix calcul√©s avec Price Engine")
            
            # √âtape 3.5: Produits pr√™ts
            self._track_step_complete("calculate_prices", "Prix finalis√©s")
            self._track_step_complete("product_ready", f"{len([p for p in products_info if 'error' not in p])} produits confirm√©s")
            
            # ========== PHASE 4: CR√âATION DU DEVIS ==========
            
            # √âtape 4.1: Pr√©paration
            self._track_step_start("prepare_quote", "Pr√©paration du devis...")
            
            # Logique de pr√©paration (regroupement des donn√©es)
            await asyncio.sleep(0.2)
            self._track_step_progress("prepare_quote", 70, "Donn√©es consolid√©es")
            
            # √âtape 4.2: Enregistrement SAP
            self._track_step_complete("prepare_quote", "Devis pr√©par√©")
            self._track_step_start("save_to_sap", "Enregistrement dans SAP...")
            
            quote_result = await self._create_quote_in_salesforce()
            self.context["quote_result"] = quote_result
            
            if not quote_result.get("success"):
                self._track_step_fail("save_to_sap", quote_result.get("error", "Erreur SAP"),
                                    "Impossible d'enregistrer dans SAP")
                return self._build_error_response("Erreur de cr√©ation", quote_result.get("error"))
            
            self._track_step_progress("save_to_sap", 85, "Enregistr√© dans SAP")
            
            # √âtape 4.3: Synchronisation Salesforce
            self._track_step_complete("save_to_sap", "SAP mis √† jour")
            self._track_step_start("sync_salesforce", "Synchronisation Salesforce...")
            
            # La sync est d√©j√† dans _create_quote_in_salesforce
            await asyncio.sleep(0.3)
            self._track_step_progress("sync_salesforce", 95, "Salesforce synchronis√©")
            
            # √âtape 4.4: Finalisation
            self._track_step_complete("sync_salesforce", "Synchronisation termin√©e")
            self._track_step_start("quote_finalized", "Finalisation...")
            
            # Construire la r√©ponse finale
            response = self._build_response()
            response["task_id"] = self.task_id  # Ajouter l'ID de t√¢che
            
            self._track_step_complete("quote_finalized", "Devis g√©n√©r√© avec succ√®s")
            
            # Terminer la t√¢che
            if self.current_task:
                progress_tracker.complete_task(self.task_id, response)
            
            logger.info(f"=== WORKFLOW TERMIN√â - T√¢che {self.task_id} ===")
            return response
            
        except Exception as e:
            logger.exception(f"Erreur critique dans le workflow: {str(e)}")
            
            # Marquer la t√¢che comme √©chou√©e
            if self.current_task and self.task_id:
                progress_tracker.fail_task(self.task_id, str(e))
            
            return self._build_error_response("Erreur syst√®me", str(e))
    
    def get_task_status(self, task_id: str = None) -> Optional[Dict[str, Any]]:
        """R√©cup√®re le statut d√©taill√© d'une t√¢che"""
        target_id = task_id or self.task_id
        if not target_id:
            return None
            
        task = progress_tracker.get_task(target_id)
        if not task:
            return None
            
        return task.get_detailed_progress()
    
    async def _handle_client_not_found_with_validation(self, client_name: str, extracted_info: Dict = None) -> Dict[str, Any]:
        """
        G√®re le cas o√π un client n'est pas trouv√© - VERSION COMPL√àTE CORRIG√âE
        
        CONSERVE :
        - Logique de validation et enrichissement
        - Cr√©ation SAP/Salesforce automatique en mode POC
        - Workflow complet avec continuation
        
        AJOUTE :
        - Validation utilisateur optionnelle
        - Gestion robuste des erreurs
        - Continuation automatique du workflow
        """
        logger.info(f"üîç Traitement client non trouv√© avec validation compl√®te: {client_name}")
        
        # CORRECTION 1: V√©rifier si client_name est valide
        if not client_name or client_name.strip() == "":
            logger.warning("‚ùå Nom de client vide ou None")
            return {
                "client_created": False,
                "error": "Nom de client manquant",
                "suggestion": "V√©rifiez que le prompt contient un nom de client valide",
                "workflow_context": {
                    "task_id": self.task_id,
                    "extracted_info": extracted_info,
                    "step": "client_validation_failed"
                }
            }
        
        try:
            # === √âTAPE 1: ENRICHISSEMENT ET VALIDATION DONN√âES ===
            logger.info(f"üîç √âtape 1: Enrichissement donn√©es pour {client_name}")
            
            # D√©tecter le pays probable
            country = self._detect_country_from_name(client_name)
            logger.info(f"Pays d√©tect√©: {country}")
            
            # CONSERV√â: Validation avec le validateur client
            validation_result = None
            if self.client_validator:
                try:
                    logger.info("üîç Validation via ClientValidator...")
                    validation_result = await self.client_validator.validate_and_enrich_client(client_name)
                    logger.info(f"‚úÖ Validation termin√©e: {validation_result.get('can_create', False)}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur validation client: {str(e)}")
                    validation_result = {"can_create": True, "warnings": [str(e)]}
            
            # CONSERV√â: Enrichissement externe via company_search_service
            enrichment_data = {}
            try:
                logger.info("üîç Enrichissement externe...")
                enrichment_result = await self._search_company_enrichment(client_name)
                if enrichment_result.get("success"):
                    enrichment_data = enrichment_result.get("company_data", {})
                    logger.info(f"‚úÖ Donn√©es enrichies r√©cup√©r√©es pour {client_name}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur enrichissement: {str(e)}")
            
            # === √âTAPE 2: V√âRIFICATION DOUBLONS ===
            logger.info("üîç √âtape 2: V√©rification doublons avanc√©e")
            
            duplicate_check = {}
            try:
                duplicate_check = await self._check_duplicates_enhanced(client_name, enrichment_data)
                if duplicate_check.get("has_duplicates"):
                    logger.warning(f"‚ö†Ô∏è Doublons d√©tect√©s: {duplicate_check.get('duplicate_count', 0)}")
                    
                    # NOUVEAU: Gestion des doublons avec choix utilisateur
                    return {
                        "client_created": False,
                        "status": "duplicates_found",
                        "duplicate_check": duplicate_check,
                        "enrichment_data": enrichment_data,
                        "validation_result": validation_result,
                        "workflow_context": {
                            "task_id": self.task_id,
                            "extracted_info": extracted_info,
                            "step": "duplicate_resolution_required"
                        },
                        "user_action_required": True,
                        "message": f"Doublons potentiels trouv√©s pour '{client_name}'"
                    }
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur v√©rification doublons: {str(e)}")
            
            # === √âTAPE 3: VALIDATION UTILISATEUR (MODE POC = AUTO-APPROBATION) ===
            logger.info("üîç √âtape 3: Validation utilisateur")
            
            # NOUVEAU: Demande validation utilisateur
            try:
                validation_request = await self._request_user_validation_for_client_creation(
                    client_name, 
                    {
                        "enrichment_data": enrichment_data,
                        "validation_result": validation_result,
                        "duplicate_check": duplicate_check
                    }
                )
                
                # En mode POC, auto-approuver
                if validation_request.get("status") != "approved":
                    logger.warning("‚ö†Ô∏è ATTENTION: Client non trouv√© avec find_client_everywhere - Cr√©ation bloqu√©e")
                    validation_request["status"] = "requires_user_confirmation"
                    validation_request["requires_explicit_approval"] = True
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur validation utilisateur: {str(e)}")
                # Fallback: approuver automatiquement
                validation_request = {"status": "approved", "auto_approved": True, "fallback": True}
            
            # === √âTAPE 4: CR√âATION CLIENT COMPL√àTE ===
            if validation_request.get("status") == "approved":
                logger.info("üöÄ √âtape 4: Cr√©ation client approuv√©e")
                
                # Pr√©parer les donn√©es client enrichies
                client_data = {
                    "company_name": client_name.strip(),
                    "billing_country": country,
                    "email": f"contact@{client_name.replace(' ', '').lower()}.com",
                    "phone": "+33 1 00 00 00 00" if country == "FR" else "+1 555 000 0000"
                }
                
                # Fusionner avec les donn√©es enrichies
                if enrichment_data:
                    client_data.update({
                        "official_name": enrichment_data.get("official_name", client_name),
                        "siren": enrichment_data.get("siren", ""),
                        "siret": enrichment_data.get("siret", ""),
                        "address": enrichment_data.get("address", {}),
                        "activity": enrichment_data.get("activity", {}),
                        "enriched": True
                    })
                
                # CONSERV√â: Cr√©ation dans Salesforce d'abord
                logger.info("üíæ Cr√©ation Salesforce...")
                sf_client = await self._create_salesforce_client_from_validation(client_data, validation_result or {})
                
                if sf_client.get("success"):
                    logger.info(f"‚úÖ Client Salesforce cr√©√©: {sf_client.get('id')}")
                    
                    # CONSERV√â: Cr√©ation dans SAP ensuite
                    logger.info("üíæ Cr√©ation SAP...")
                    sap_client = await self._create_sap_client_from_validation(client_data, sf_client)
                    
                    if sap_client.get("success"):
                        logger.info(f"‚úÖ Client SAP cr√©√©: {sap_client.get('data', {}).get('CardCode')}")
                    
                    # === √âTAPE 5: CONTINUATION WORKFLOW AUTOMATIQUE ===
                    logger.info("üîÑ √âtape 5: Continuation automatique du workflow")
                    
                    # Mettre √† jour le contexte avec le client cr√©√©
                    client_final_data = sf_client.get("data", {})
                    self.context.update({
                        "client_info": {"data": client_final_data, "found": True, "created": True},
                        "client_validation": validation_result,
                        "sap_client": sap_client
                    })
                    
                    # NOUVEAU: Continuation automatique avec les produits si disponibles
                    if extracted_info and extracted_info.get("products"):
                        logger.info("üîÑ Continuation avec r√©cup√©ration produits...")
                        try:
                            products_result = await self._process_products_retrieval(extracted_info["products"])
                            self.context["products_info"] = products_result.get("products", [])
                            logger.info(f"‚úÖ Workflow continu√© - {len(products_result.get('products', []))} produit(s) trait√©s")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Erreur continuation produits: {str(e)}")
                    
                    return {
                        "client_created": True,
                        "client_info": {"data": client_final_data, "found": True, "created": True},
                        "validation_details": validation_result,
                        "sap_client": sap_client,
                        "enrichment_data": enrichment_data,
                        "duplicate_check": duplicate_check,
                        "workflow_continued": bool(extracted_info and extracted_info.get("products")),
                        "message": f"Client '{client_name}' cr√©√© avec succ√®s et workflow continu√©"
                    }
                else:
                    logger.error(f"‚ùå Erreur cr√©ation Salesforce: {sf_client.get('error')}")
                    return {
                        "client_created": False,
                        "error": f"Erreur cr√©ation Salesforce: {sf_client.get('error')}",
                        "validation_details": validation_result,
                        "enrichment_data": enrichment_data
                    }
            else:
                # === √âTAPE 5 ALTERNATIVE: VALIDATION UTILISATEUR REQUISE ===
                logger.info("‚è∏Ô∏è Validation utilisateur requise")
                return {
                    "client_created": False,
                    "status": "user_validation_required",
                    "validation_request": validation_request,
                    "enrichment_data": enrichment_data,
                    "validation_details": validation_result,
                    "duplicate_check": duplicate_check,
                    "workflow_context": {
                        "task_id": self.task_id,
                        "extracted_info": extracted_info,
                        "step": "awaiting_user_validation"
                    },
                    "message": f"Validation utilisateur requise pour cr√©er '{client_name}'"
                }
                    
        except Exception as e:
            logger.exception(f"‚ùå Erreur lors de la gestion client non trouv√©: {str(e)}")
            return {
                "client_created": False,
                "error": f"Erreur syst√®me: {str(e)}",
                "workflow_context": {
                    "task_id": self.task_id,
                    "extracted_info": extracted_info,
                    "step": "error_handling"
                }
            }

    # === M√âTHODES D'APPUI REQUISES ===

    def _detect_country_from_name(self, client_name: str) -> str:
        """D√©tecte le pays probable √† partir du nom du client - VERSION ROBUSTE"""
        if not client_name:
            return "FR"  # Par d√©faut
            
        client_name_lower = client_name.lower()
        
        # Indicateurs USA
        us_indicators = ["inc", "llc", "corp", "corporation", "ltd", "usa", "america", "-usa-"]
        if any(indicator in client_name_lower for indicator in us_indicators):
            return "US"
        
        # Indicateurs fran√ßais
        french_indicators = ["sarl", "sas", "sa", "eurl", "sasu", "sci", "france", "paris", "lyon", "marseille", "-france-"]
        if any(indicator in client_name_lower for indicator in french_indicators):
            return "FR"
        
        # Indicateurs britanniques
        uk_indicators = ["limited", "plc", "uk", "britain", "london"]
        if any(indicator in client_name_lower for indicator in uk_indicators):
            return "UK"
        
        # Par d√©faut, France
        return "FR"

    async def _request_user_validation_for_client_creation(self, client_name: str, context_data: Dict) -> Dict[str, Any]:
        """Demande validation utilisateur pour cr√©ation client - M√âTHODE MANQUANTE AJOUT√âE"""
        try:
            logger.info(f"üì© Demande validation cr√©ation client: {client_name}")
            
            enrichment_data = context_data.get("enrichment_data", {})
            validation_result = context_data.get("validation_result", {})
            duplicate_check = context_data.get("duplicate_check", {})
            
            # MODE POC: Auto-approuver si donn√©es suffisantes
            if enrichment_data.get("siren") or validation_result.get("can_create"):
                logger.info("‚úÖ Auto-approbation avec donn√©es suffisantes")
                return {
                    "status": "approved",
                    "method": "auto_approved_with_data",
                    "confidence": "high",
                    "reason": "Donn√©es enrichies disponibles"
                }
            
            # Auto-approuver en mode fallback (POC)
            logger.info("‚ö†Ô∏è Auto-approbation mode POC")
            return {
                "status": "approved", 
                "method": "auto_approved_poc",
                "confidence": "medium",
                "reason": "Mode POC activ√©"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur validation utilisateur: {str(e)}")
            return {
                "status": "error",
                "error": str(e)
            }
    async def _continue_workflow_after_client_selection(self, client_data, original_context):
        """Continuation automatique apr√®s s√©lection client"""
        self.context["client_info"] = {"data": client_data, "found": True}
        products = original_context.get("extracted_info", {}).get("products", [])
        return await self._get_products_info(products)


    async def _validate_products_with_suggestions(self, products: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Valide les produits avec suggestions intelligentes
        """
        logger.info(f"üîç Validation de {len(products)} produit(s) avec suggestions")
        
        validated_products = []
        self.product_suggestions = []
        
        for i, product in enumerate(products):
            product_code = product.get("code", "")
            quantity = product.get("quantity", 1)
            
            logger.info(f"üîç Validation produit {i+1}: {product_code}")
            
            try:
                # === RECHERCHE CLASSIQUE (code existant) ===
                sap_result = await self.mcp_connector.call_sap_mcp("sap_get_product_details", {"item_code": product_code})
                
                if "error" not in sap_result and sap_result.get("ItemCode"):
                    # Produit trouv√© directement - CORRECTION: sap_result contient directement les donn√©es, pas de cl√© "data"
                    product_data = sap_result
                    validated_products.append({
                        "found": True,
                        "data": product_data,
                        "quantity": quantity,
                        "suggestions": None
                    })
                    self.product_suggestions.append(None)
                    logger.info(f"‚úÖ Produit trouv√© directement: {product_code}")
                    continue
                
                # === NOUVEAU : RECHERCHE INTELLIGENTE ===
                logger.info(f"üß† Produit '{product_code}' non trouv√©, activation des suggestions...")
                
                # R√©cup√©rer tous les produits pour la recherche floue
                all_products_result = await self.mcp_connector.call_sap_mcp("get_all_items", {"limit": 1000})
                available_products = all_products_result.get("data", []) if all_products_result.get("success") else []
                
                # G√©n√©rer les suggestions
                product_suggestion = await self.suggestion_engine.suggest_product(product_code, available_products)
                self.product_suggestions.append(product_suggestion)
                
                if product_suggestion.has_suggestions:
                    primary_suggestion = product_suggestion.primary_suggestion
                    logger.info(f"üéØ Suggestion produit: {primary_suggestion.suggested_value} (score: {primary_suggestion.score})")
                    
                    validated_products.append({
                        "found": False,
                        "original_code": product_code,
                        "quantity": quantity,
                        "suggestions": product_suggestion.to_dict(),
                        "auto_suggest": (primary_suggestion.confidence.value == "high"),
                        "message": product_suggestion.conversation_prompt
                    })
                else:
                    # Aucune suggestion
                    validated_products.append({
                        "found": False,
                        "original_code": product_code,
                        "quantity": quantity,
                        "suggestions": None,
                        "message": f"Produit '{product_code}' non trouv√© dans le catalogue"
                    })
                    
            except Exception as e:
                logger.exception(f"Erreur validation produit {product_code}: {str(e)}")
                validated_products.append({
                    "found": False,
                    "original_code": product_code,
                    "quantity": quantity,
                    "error": str(e)
                })
                self.product_suggestions.append(None)
        
        return validated_products
    
    def _detect_country_from_name(self, client_name: str) -> str:
        """D√©tecte le pays probable √† partir du nom du client"""
        # CORRECTION 4: Gestion robuste des valeurs None
        if not client_name:
            return "FR"  # Par d√©faut
            
        client_name_lower = client_name.lower()
        
        # CORRECTION 5: Am√©liorer la d√©tection USA
        us_indicators = ["inc", "llc", "corp", "corporation", "ltd", "usa", "america", "-usa-"]
        if any(indicator in client_name_lower for indicator in us_indicators):
            return "US"
        
        # Indicateurs fran√ßais
        french_indicators = ["sarl", "sas", "sa", "eurl", "sasu", "sci", "france", "paris", "lyon", "marseille", "-france-"]
        if any(indicator in client_name_lower for indicator in french_indicators):
            return "FR"
        
        # Indicateurs britanniques
        uk_indicators = ["limited", "plc", "uk", "britain", "london"]
        if any(indicator in client_name_lower for indicator in uk_indicators):
            return "UK"
        
        # Par d√©faut, France (march√© principal)
        return "FR"
    
    async def _create_salesforce_client_from_validation(self, client_data: Dict[str, Any], validation_result: Dict[str, Any]) -> Dict[str, Any]:
        """Cr√©e un client dans Salesforce avec les donn√©es valid√©es"""
        try:
            logger.info("Cr√©ation client Salesforce avec donn√©es valid√©es")
            
            # Pr√©parer les donn√©es Salesforce
            sf_data = {
                "Name": validation_result.get("enriched_data", {}).get("normalized_company_name", client_data["company_name"]),
                "Type": "Customer",
                "Description": f"Client cr√©√© automatiquement via NOVA avec validation {validation_result['country']}",
            }
            
            # Ajouter les donn√©es enrichies si disponibles
            enriched = validation_result.get("enriched_data", {})
            if enriched.get("normalized_email"):
                # Note: Salesforce Account n'a pas de champ Email standard, on l'ajoute en description
                sf_data["Description"] += f" - Email: {enriched['normalized_email']}"
            
            if enriched.get("normalized_website"):
                sf_data["Website"] = enriched["normalized_website"]
            
            # Utiliser les donn√©es SIRET si disponibles (France)
            siret_data = enriched.get("siret_data", {})
            if siret_data:
                sf_data["Description"] += f" - SIRET: {siret_data.get('siret', '')}"
                if siret_data.get("activity_label"):
                    sf_data["Industry"] = siret_data["activity_label"][:40]  # Limiter la taille
            
            # Cr√©er dans Salesforce
            result = await MCPConnector.call_salesforce_mcp("salesforce_create_record", {
                "sobject": "Account",
                "data": sf_data
            })
            
            if result.get("success"):
                # R√©cup√©rer les donn√©es compl√®tes du client cr√©√©
                client_id = result["id"]
                detailed_query = f"""
                SELECT Id, Name, AccountNumber, 
                    BillingStreet, BillingCity, BillingState, BillingPostalCode, BillingCountry,
                    ShippingStreet, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry,
                    Phone, Fax, Website, Industry, AnnualRevenue, NumberOfEmployees,
                    Description, Type, OwnerId, CreatedDate, LastModifiedDate
                FROM Account 
                WHERE Id = '{client_id}'
                """
                
                detailed_result = await MCPConnector.call_salesforce_mcp("salesforce_query", {"query": detailed_query})
                
                if "error" not in detailed_result and detailed_result.get("totalSize", 0) > 0:
                    client_data_complete = detailed_result["records"][0]
                    return {
                        "success": True,
                        "id": client_id,
                        "data": client_data_complete
                    }
                else:
                    return {
                        "success": True,
                        "id": client_id,
                        "data": {"Id": client_id, "Name": sf_data["Name"]}
                    }
            else:
                return {
                    "success": False,
                    "error": result.get("error", "Erreur cr√©ation Salesforce")
                }
                
        except Exception as e:
            logger.exception(f"Erreur cr√©ation client Salesforce valid√©: {str(e)}")
            return {
                "success": False,
                "error": str(e)
            }
    async def apply_client_suggestion(self, suggestion_choice: Dict[str, Any], 
                                    workflow_context: Dict[str, Any]) -> Dict[str, Any]:
        """
        Applique le choix de l'utilisateur pour une suggestion client
        """
        logger.info(f"üéØ Application suggestion client: {suggestion_choice}")
        
        choice_type = suggestion_choice.get("type")  # "use_suggestion", "create_new", "manual_entry"
        
        if choice_type == "use_suggestion":
            # Utiliser la suggestion propos√©e
            suggested_client = suggestion_choice.get("selected_client")
            
            # Reprendre le workflow avec le client sugg√©r√©
            workflow_context["extracted_info"]["client"] = suggested_client["name"]
            return await self.process_prompt(  # ‚úÖ CORRECT
                workflow_context["extracted_info"]["original_prompt"],
                task_id=workflow_context["task_id"]
            )
        
        elif choice_type == "create_new":
            # D√©clencher le processus de cr√©ation client
            return {
                "status": "client_creation_required",
                "message": "Processus de cr√©ation client √† impl√©menter",
                "workflow_context": workflow_context
            }
        
        else:
            return self._build_error_response("Choix non support√©", f"Type de choix '{choice_type}' non reconnu")

    async def apply_product_suggestions(self, product_choices: List[Dict[str, Any]], 
                                    workflow_context: Dict[str, Any]) -> Dict[str, Any]:
        """
        Applique les choix de l'utilisateur pour les suggestions produits
        """
        logger.info(f"üéØ Application suggestions produits: {len(product_choices)} choix")
        
        # Reconstituer la liste des produits avec les choix utilisateur
        final_products = []
        for choice in product_choices:
            if choice.get("type") == "use_suggestion":
                suggested_product = choice.get("selected_product")
                final_products.append({
                    "code": suggested_product["code"],
                    "quantity": choice.get("quantity", 1)
                })
            # Ajouter d'autres types de choix selon les besoins
        
        # Reprendre le workflow avec les produits corrig√©s
        workflow_context["extracted_info"]["products"] = final_products
        return await self.process_prompt(
            workflow_context["extracted_info"]["original_prompt"],
            task_id=workflow_context["task_id"]
        )
 
    async def _create_sap_client_from_validation(self, client_data: Dict[str, Any], salesforce_client: Dict[str, Any]) -> Dict[str, Any]:
        """Cr√©e un client dans SAP avec les donn√©es valid√©es"""
        try:
            logger.info("Cr√©ation client SAP avec donn√©es valid√©es")
            
            # Utiliser le code client sugg√©r√© par le validateur ou g√©n√©rer un nouveau
            enriched = client_data.get("enriched_data", {})
            card_code = enriched.get("suggested_client_code")
            
            if not card_code:
                # G√©n√©rer un CardCode de secours
                import re
                import time
                clean_name = re.sub(r'[^a-zA-Z0-9]', '', client_data["company_name"])[:8]
                timestamp = str(int(time.time()))[-4:]
                card_code = f"C{clean_name}{timestamp}".upper()[:15]
            
            # Pr√©parer les donn√©es SAP
            sap_data = {
                "CardCode": card_code,
                "CardName": client_data["company_name"],
                "CardType": "cCustomer",
                "GroupCode": 100,
                "Currency": "EUR",
                "Valid": "tYES",
                "Frozen": "tNO",
                "Notes": "Client cr√©√© automatiquement via NOVA avec validation",
                "FederalTaxID": salesforce_client.get("id", "")[:32]  # R√©f√©rence crois√©e
            }
            
            # Ajouter les donn√©es SIRET si disponibles
            siret_data = enriched.get("siret_data", {})
            if siret_data:
                sap_data["Notes"] += f" - SIRET: {siret_data.get('siret', '')}"
            
            # Cr√©er dans SAP
            result = await MCPConnector.call_sap_mcp("sap_create_customer_complete", {
                "customer_data": sap_data
            })
            
            if result.get("success"):
                logger.info(f"‚úÖ Client SAP cr√©√© avec validation: {card_code}")
                return {
                    "success": True,
                    "created": True,
                    "data": {"CardCode": card_code, "CardName": client_data["company_name"]},
                    "validation_used": True
                }
            else:
                logger.warning(f"‚ùå Erreur cr√©ation client SAP valid√©: {result.get('error')}")
                return {
                    "success": False,
                    "error": result.get("error", "Erreur cr√©ation SAP"),
                    "validation_used": True
                }
                
        except Exception as e:
            logger.exception(f"Erreur cr√©ation client SAP valid√©: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "validation_used": True
            }
        
    async def _find_product_in_salesforce(self, product_code: str) -> Optional[str]:
        """Trouve l'ID Salesforce correspondant au code produit SAP - RESTAUR√âE"""
        try:
            query = f"SELECT Id, Name, ProductCode FROM Product2 WHERE ProductCode = '{product_code}' LIMIT 1"
            result = await MCPConnector.call_salesforce_mcp("salesforce_query", {"query": query})
            
            if "error" not in result and result.get("totalSize", 0) > 0:
                return result["records"][0]["Id"]
            
            logger.info(f"Produit {product_code} non trouv√© dans Salesforce")
            return None
            
        except Exception as e:
            logger.warning(f"Erreur recherche produit Salesforce {product_code}: {str(e)}")
            return None
        
    async def _prepare_quote_data(self) -> Dict[str, Any]:
        """Pr√©pare les donn√©es du devis"""
        # Pr√©parer les donn√©es pour la cr√©ation du devis
        client_info = self.context.get("client_info", {})
        products_info = self.context.get("products_info", [])
        
        # R√©cup√©rer les d√©tails du client
        client_data = client_info.get("data", {})
        
        # Pr√©parer les lignes de devis
        quote_lines = []
        
        for product in products_info:
            if isinstance(product, dict) and "error" not in product:
                quote_lines.append({
                    "product_id": product.get("id"),
                    "quantity": product.get("quantity", 1),
                    "unit_price": product.get("unit_price", 0)
                })
        
        return {
            "client": {
                "id": client_data.get("Id"),
                "name": client_data.get("Name"),
                "account_number": client_data.get("AccountNumber")
            },
            "quote_lines": quote_lines,
            "total_amount": sum(line["quantity"] * line["unit_price"] for line in quote_lines),
            "draft_mode": self.draft_mode
        }

    async def create_quote_with_confirmation(self, confirmed: bool = False) -> Dict[str, Any]:
        """
        Cr√©e le devis apr√®s confirmation de l'utilisateur

        Args:
            confirmed: True si l'utilisateur a confirm√© la cr√©ation du devis

        Returns:
            R√©ponse format√©e avec les d√©tails du devis cr√©√©
        """
        logger.info(f"Traitement de la confirmation utilisateur, confirm√©={confirmed}")

        if not confirmed:
            return {
                "status": "cancelled",
                "message": "Cr√©ation du devis annul√©e"
            }

        # R√©cup√©rer le contexte pour poursuivre le workflow
        client_info = self.context.get("client_info", {})
        products_info = self.context.get("products_info", [])

        if not client_info or not products_info:
            logger.error("Contexte incomplet pour finaliser le devis")
            return {
                "status": "error",
                "message": "Donn√©es insuffisantes pour cr√©er le devis"
            }

        # üÜï ENRICHISSEMENT CLIENT
        client_name = client_info.get("data", {}).get("Name", "")
        if client_name and not client_info.get("enriched"):
            logger.info("üîç Enrichissement informations client avant cr√©ation devis")
            try:
                company_info = await self._search_company_info(client_name)
                if company_info.get("found"):
                    client_info["enriched_data"] = company_info
                    client_info["enriched"] = True
                    self.context["client_info"] = client_info
                    logger.info(f"‚úÖ Client enrichi avec SIREN: {company_info.get('siren', 'N/A')}")
            except Exception as e:
                logger.warning(f"Enrichissement client √©chou√©: {str(e)}")

        # üÜï RECHERCHE ALTERNATIVES PRODUITS
        enhanced_products = []
        for i, product in enumerate(products_info):
            if product.get("error") or not product.get("found"):
                product_name = product.get("original_name", product.get("name", ""))
                if product_name:
                    logger.info(f"üîç Recherche alternatives pour produit: {product_name}")
                    try:
                        alternatives = await self._find_similar_products(product_name)
                        if alternatives:
                            return {
                                "status": "user_interaction_required",
                                "interaction_type": "product_selection",
                                "message": f"Alternatives trouv√©es pour '{product_name}'",
                                "product_index": i,
                                "alternatives": alternatives,
                                "context": {
                                    "client_info": client_info,
                                    "products_info": products_info,
                                    "confirmed": confirmed
                                }
                            }
                    except Exception as e:
                        logger.warning(f"Recherche alternatives √©chou√©e: {str(e)}")
            enhanced_products.append(product)

        self.context["products_info"] = enhanced_products

        # ===== Poursuivre avec la cr√©ation du devis =====
        logger.info("Confirmation approuv√©e, poursuite de la cr√©ation du devis")
        self._track_step_start("prepare_quote", "Cr√©ation du devis apr√®s confirmation...")

        # Cr√©er le devis dans Salesforce et SAP
        quote_result = await self._create_quote_in_salesforce()
        self.context["quote_result"] = quote_result

        if not quote_result.get("success"):
            self._track_step_fail("create_quote", quote_result.get("error", "Erreur inconnue"),
                                "Impossible de cr√©er le devis confirm√©")
            return {
                "status": "error",
                "message": f"Erreur lors de la cr√©ation du devis: {quote_result.get('error', 'Erreur inconnue')}"
            }

        self._track_step_complete("prepare_quote", "Devis cr√©√© avec succ√®s")

        # üßæ R√©ponse enrichie
        response = {
            "status": "success",
            "message": "Devis cr√©√© avec succ√®s",
            "quote_data": quote_result.get("quote_data", {}),
            "client_enrichment": client_info.get("enriched_data"),
            "alternatives_used": any(p.get("alternative_selected") for p in enhanced_products)
        }

        # üîÅ Finalisation (restaur√©e)
        if self.current_task and self.task_id:
            progress_tracker.complete_task(self.task_id, response)

        return response

        
    async def _check_sap_client_by_name(self, client_name: str, salesforce_client: Dict[str, Any] = None) -> Dict[str, Any]:
        """V√©rifie si le client existe dans SAP par son nom
        
        Args:
            client_name: Nom du client √† rechercher
            salesforce_client: Donn√©es du client Salesforce pour cr√©ation SAP si n√©cessaire
        """
        try:
            # V√©rifier si le client existe dans SAP par nom
            client_search = await MCPConnector.call_sap_mcp("sap_search", {
                "query": client_name,
                "entity_type": "BusinessPartners",
                "limit": 1
            })
            
            if "error" not in client_search and client_search.get("count", 0) > 0:
                # Client trouv√©
                sap_client = client_search.get("results", [])[0]
                logger.info(f"Client SAP existant trouv√©: {sap_client.get('CardCode')} - {sap_client.get('CardName')}")
                return {"created": False, "data": sap_client}
            
            # Client non trouv√©, le cr√©er avec TOUTES les donn√©es Salesforce si disponibles
            logger.info("Client non trouv√© dans SAP, cr√©ation avec donn√©es compl√®tes...")
            
            # V√©rifier que nous avons les donn√©es Salesforce
            sf_client = salesforce_client or {}
            client_id = sf_client.get("Id", "")
            
            # G√©n√©rer un CardCode unique
            import re
            import time
            
            # Nettoyer le nom pour le CardCode
            clean_name = re.sub(r'[^a-zA-Z0-9]', '', client_name)[:8]
            timestamp = str(int(time.time()))[-4:]
            card_code = f"C{clean_name}{timestamp}".upper()[:15]
            
            # Pr√©parer les donn√©es compl√®tes pour SAP
            sap_client_data = {
                "CardCode": card_code,
                "CardName": client_name,
                "CardType": "cCustomer",
                "GroupCode": 100,
                
                # Adresse de facturation
                "BillToStreet": sf_client.get("BillingStreet", "")[:254] if sf_client.get("BillingStreet") else "",
                "BillToCity": sf_client.get("BillingCity", "")[:100] if sf_client.get("BillingCity") else "",
                "BillToState": sf_client.get("BillingState", "")[:100] if sf_client.get("BillingState") else "",
                "BillToZipCode": sf_client.get("BillingPostalCode", "")[:20] if sf_client.get("BillingPostalCode") else "",
                "BillToCountry": sf_client.get("BillingCountry", "")[:3] if sf_client.get("BillingCountry") else "",
                
                # Adresse de livraison
                "ShipToStreet": sf_client.get("ShippingStreet") or sf_client.get("BillingStreet", ""),
                "ShipToCity": sf_client.get("ShippingCity") or sf_client.get("BillingCity", ""),
                "ShipToState": sf_client.get("ShippingState") or sf_client.get("BillingState", ""),
                "ShipToZipCode": sf_client.get("ShippingPostalCode") or sf_client.get("BillingPostalCode", ""),
                "ShipToCountry": sf_client.get("ShippingCountry") or sf_client.get("BillingCountry", ""),
                
                # Informations de contact
                "Phone1": sf_client.get("Phone", "")[:20] if sf_client.get("Phone") else "",
                "Fax": sf_client.get("Fax", "")[:20] if sf_client.get("Fax") else "",
                "Website": sf_client.get("Website", "")[:100] if sf_client.get("Website") else "",
                
                # Informations m√©tier
                "Industry": sf_client.get("Industry", "")[:30] if sf_client.get("Industry") else "",
                "Notes": sf_client.get("Description", "")[:254] if sf_client.get("Description") else "",
                
                # R√©f√©rence crois√©e Salesforce
                "FederalTaxID": client_id[:32] if client_id else "",
                
                # Param√®tres par d√©faut
                "Currency": "EUR",
                "Valid": "tYES",
                "Frozen": "tNO"
            }
            
            logger.info(f"Cr√©ation client SAP avec donn√©es: {json.dumps(sap_client_data, indent=2)}")
            
            # Utiliser la nouvelle m√©thode MCP pour cr√©er le client
            create_result = await MCPConnector.call_sap_mcp("sap_create_customer_complete", {
                "customer_data": sap_client_data
            })
            
            if not create_result.get("success", False):
                logger.error(f"Erreur cr√©ation client SAP: {create_result.get('error', 'Erreur inconnue')}")
                return {"created": False, "error": create_result.get('error', 'Erreur inconnue')}
            
            logger.info(f"‚úÖ Client SAP cr√©√© avec succ√®s: {card_code}")
            return {"created": True, "data": create_result.get("data", {"CardCode": card_code, "CardName": client_name})}
            
        except Exception as e:
            logger.exception(f"Erreur cr√©ation client SAP: {str(e)}")
            return {"created": False, "error": str(e)}
    
    async def _create_quote_in_salesforce(self) -> Dict[str, Any]:
        """Cr√©e le devis dans SAP ET Salesforce - VERSION COMPL√àTEMENT R√â√âCRITE"""
        logger.info("=== D√âBUT CR√âATION DEVIS SAP ET SALESFORCE ===")
        
        # R√©cup√©ration des donn√©es du contexte
        client_info = self.context.get("client_info", {})
        products_info = self.context.get("products_info", [])
        sap_client = self.context.get("sap_client", {})
        
        # Log du contexte disponible
        logger.info(f"Client info disponible: {bool(client_info.get('found'))}")
        logger.info(f"Produits disponibles: {len(products_info)}")
        logger.info(f"Client SAP disponible: {bool(sap_client.get('data'))}")
        
        try:
            # ========== √âTAPE 1: PR√âPARATION DES DONN√âES DE BASE ==========
            
            # R√©cup√©rer les donn√©es client Salesforce
            sf_client_data = client_info.get("data", {})
            client_name = sf_client_data.get("Name", "Client Unknown")
            client_id = sf_client_data.get("Id", "")
            
            logger.info(f"Client Salesforce: {client_name} (ID: {client_id})")
            
            # Cr√©er le client SAP si n√©cessaire
            logger.info("=== CR√âATION/V√âRIFICATION CLIENT SAP ===")
            if not sap_client.get("data"):
                logger.info("Client SAP non trouv√©, cr√©ation n√©cessaire...")
            sap_client_result = await self._create_sap_client_if_needed(client_info)
            
            # CORRECTION : Traiter le r√©sultat correctement
            if sap_client_result.get("success") and sap_client_result.get("client"):
                # Mettre √† jour le contexte avec le client SAP trouv√©/cr√©√©
                self.context["sap_client"] = {
                    "data": sap_client_result["client"],
                    "created": True  # ou False si trouv√©
                }
                sap_client = self.context["sap_client"]
                logger.info(f"‚úÖ Client SAP disponible: {sap_client_result['client'].get('CardCode')}")
            else:
                logger.error("‚ùå AUCUN CLIENT SAP DISPONIBLE")
                return {
                    "success": False,
                    "error": "Client SAP non disponible pour cr√©er le devis"
                }
            
            # V√©rifier que nous avons un client SAP
            sap_card_code = None
            if sap_client.get("data") and sap_client["data"].get("CardCode"):
                sap_card_code = sap_client["data"]["CardCode"]
                logger.info(f"Client SAP confirm√©: {sap_card_code}")
            else:
                logger.error("‚ùå AUCUN CLIENT SAP DISPONIBLE")
                return {
                    "success": False,
                    "error": "Client SAP non disponible pour cr√©er le devis"
                }
            
            # ========== √âTAPE 2: PR√âPARATION DES PRODUITS ==========
            
            logger.info("=== PR√âPARATION DES LIGNES PRODUITS ===")
            valid_products = [p for p in products_info if isinstance(p, dict) and "error" not in p]
            
            if not valid_products:
                logger.error("‚ùå AUCUN PRODUIT VALIDE POUR LE DEVIS")
                return {
                    "success": False,
                    "error": "Aucun produit valide trouv√© pour cr√©er le devis"
                }
            
            logger.info(f"Produits valides: {len(valid_products)}")
            
            # Pr√©parer les lignes pour SAP
            document_lines = []
            total_amount = 0.0
            
            for idx, product in enumerate(valid_products):
                quantity = float(product.get("quantity", 1))
                unit_price = float(product.get("unit_price", 0))
                line_total = quantity * unit_price
                total_amount += line_total
                
                line = {
                    "ItemCode": product.get("code"),
                    "Quantity": quantity,
                    "Price": unit_price,
                    "DiscountPercent": 0.0,
                    "TaxCode": "S1",
                    "LineNum": idx
                }
                document_lines.append(line)
                
                logger.info(f"Ligne {idx}: {product.get('code')} x{quantity} = {line_total}‚Ç¨")
            
            logger.info(f"Total calcul√©: {total_amount}‚Ç¨")
            
            # ========== √âTAPE 3: PR√âPARATION DES DONN√âES DEVIS SAP ==========
            
            logger.info("=== PR√âPARATION DONN√âES DEVIS SAP ===")
            
            # Pr√©parer les dates
            today = datetime.now()
            doc_date = today.strftime("%Y-%m-%d")
            due_date = (today + timedelta(days=30)).strftime("%Y-%m-%d")
            
            # Pr√©parer les donn√©es compl√®tes du devis SAP
            quotation_data = {
                "CardCode": sap_card_code,
                "DocDate": doc_date,
                "DocDueDate": due_date,
                "DocCurrency": "EUR",
                "Comments": f"Devis cr√©√© automatiquement via NOVA le {today.strftime('%d/%m/%Y %H:%M')} - Mode: {'DRAFT' if self.draft_mode else 'NORMAL'}",
                "SalesPersonCode": -1,
                "DocumentLines": document_lines,
                "DocTotal": total_amount,
                "VatSum": 0.0,
                "DiscountPercent": 0.0
            }
            
            # Ajouter des champs sp√©cifiques au mode Draft si n√©cessaire
            if self.draft_mode:
                quotation_data["Comments"] = f"[BROUILLON] {quotation_data['Comments']}"
                quotation_data["Remarks"] = "Devis en mode brouillon - Non valid√©"
            
            logger.info("Donn√©es devis SAP pr√©par√©es:")
            logger.info(f"  - Client: {sap_card_code}")
            logger.info(f"  - Lignes: {len(document_lines)}")
            logger.info(f"  - Total: {total_amount}‚Ç¨")
            logger.info(f"  - Mode: {'DRAFT' if self.draft_mode else 'NORMAL'}")
            
            # ========== √âTAPE 4: APPEL SAP ==========
            
            logger.info("=== APPEL SAP POUR CR√âATION DEVIS ===")
            logger.info("Donn√©es compl√®tes envoy√©es √† SAP:")
            logger.info(json.dumps(quotation_data, indent=2, ensure_ascii=False))
            
            sap_quote = None
            
            try:
                # Choisir la m√©thode SAP selon le mode
                if self.draft_mode:
                    logger.info("Appel SAP en mode DRAFT...")
                    sap_quote = await MCPConnector.call_sap_mcp("sap_create_quotation_draft", {
                        "quotation_data": quotation_data
                    })
                else:
                    logger.info("Appel SAP en mode NORMAL...")
                    sap_quote = await MCPConnector.call_sap_mcp("sap_create_quotation_complete", {
                        "quotation_data": quotation_data
                    })
                
                logger.info("=== R√âSULTAT APPEL SAP ===")
                logger.info(f"Type retourn√©: {type(sap_quote)}")
                logger.info(f"Contenu: {sap_quote}")
                
                # V√©rifier le r√©sultat SAP
                if sap_quote is None:
                    logger.error("‚ùå SAP a retourn√© None!")
                    sap_quote = {"success": False, "error": "SAP a retourn√© None - probl√®me de communication"}
                elif not isinstance(sap_quote, dict):
                    logger.error(f"‚ùå SAP a retourn√© un type inattendu: {type(sap_quote)}")
                    sap_quote = {"success": False, "error": f"Type de retour SAP inattendu: {type(sap_quote)}"}
                elif not sap_quote.get("success", False):
                    logger.error(f"‚ùå SAP a signal√© un √©chec: {sap_quote.get('error', 'Erreur non sp√©cifi√©e')}")
                else:
                    logger.info(f"‚úÖ Devis SAP cr√©√© avec succ√®s: DocNum {sap_quote.get('doc_num')}")
                    
            except Exception as e:
                logger.exception(f"‚ùå EXCEPTION lors de l'appel SAP: {str(e)}")
                sap_quote = {"success": False, "error": f"Exception lors de l'appel SAP: {str(e)}"}
            
            # ========== √âTAPE 5: CR√âATION SALESFORCE ==========
            
            # Donn√©es minimales pour √©viter erreurs de validation
            opportunity_data = {
                'Name': f'NOVA-{today.strftime("%Y%m%d-%H%M%S")}',
                'StageName': 'Prospecting',  # √âtape standard qui existe toujours
                'CloseDate': due_date,
                'Type': 'New Customer'
            }
            
            # Ajouter AccountId seulement si client valide
            if client_id and client_id != "":
                opportunity_data['AccountId'] = client_id
            else:
                # Cr√©er avec compte g√©n√©rique ou utiliser un compte par d√©faut
                logger.warning("‚ö†Ô∏è Pas de client Salesforce - cr√©ation avec compte g√©n√©rique")
                # Utiliser un compte par d√©faut ou cr√©er l'opportunit√© sans compte
                pass
            
            # Ajouter montant seulement si positif
            if total_amount > 0:
                opportunity_data['Amount'] = total_amount
            
            # Ajouter description avec gestion d'erreurs
            try:
                # CORRECTION: D√©finir sap_ref correctement
                sap_ref = ""
                if sap_quote and sap_quote.get('doc_num'):
                    sap_ref = f" (SAP DocNum: {sap_quote.get('doc_num')})"
                
                opportunity_data['Description'] = f'Devis g√©n√©r√© automatiquement via NOVA{sap_ref} - Mode: {"Brouillon" if self.draft_mode else "D√©finitif"}'
                opportunity_data['LeadSource'] = 'NOVA Middleware'
                opportunity_data['Probability'] = 50 if not self.draft_mode else 25
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur ajout m√©tadonn√©es: {e}")
            
            logger.info("Cr√©ation opportunit√© Salesforce...")
            logger.info(f"Donn√©es: {json.dumps(opportunity_data, indent=2, ensure_ascii=False)}")
            
            salesforce_quote = None
            
            try:
                # Utiliser try/catch sp√©cifique pour Salesforce
                opportunity_result = await MCPConnector.call_salesforce_mcp("salesforce_create_record", {
                    "sobject": "Opportunity",
                    "data": opportunity_data
                })
                
                logger.info(f"üìä R√©sultat brut Salesforce: {opportunity_result}")
                
                # Validation robuste du r√©sultat
                if opportunity_result is None:
                    raise Exception("Salesforce a retourn√© None")
                
                if not isinstance(opportunity_result, dict):
                    raise Exception(f"Salesforce a retourn√© un type inattendu: {type(opportunity_result)}")
                
                # V√©rifier succ√®s avec plusieurs crit√®res
                success_indicators = [
                    opportunity_result.get("success") is True,
                    "id" in opportunity_result and opportunity_result["id"],
                    "error" not in opportunity_result
                ]
                
                if any(success_indicators) and opportunity_result.get("id"):
                    opportunity_id = opportunity_result.get("id")
                    logger.info(f"‚úÖ Opportunit√© Salesforce cr√©√©e: {opportunity_id}")
                    
                    salesforce_quote = {
                        "success": True,
                        "id": opportunity_id,
                        "opportunity_id": opportunity_id,
                        "lines_created": len(document_lines),
                        "total_amount": total_amount,
                        "message": f"Opportunit√© Salesforce cr√©√©e avec succ√®s: {opportunity_id}"
                    }
                else:
                    # Analyser l'erreur sp√©cifique
                    error_msg = opportunity_result.get("error", "Erreur Salesforce non sp√©cifi√©e")
                    logger.error(f"‚ùå Erreur cr√©ation opportunit√© Salesforce: {error_msg}")
                    
                    salesforce_quote = {
                        "success": False,
                        "error": error_msg,
                        "raw_response": opportunity_result,
                        "attempted_data": opportunity_data
                    }
                        
            except Exception as e:
                logger.exception(f"‚ùå EXCEPTION lors de la cr√©ation Salesforce: {str(e)}")
                salesforce_quote = {
                    "success": False,
                    "error": f"Exception Salesforce: {str(e)}",
                    "exception_type": type(e).__name__
                }
            
            # ========== √âTAPE 6: CONSTRUCTION DE LA R√âPONSE ==========
            
            logger.info("=== CONSTRUCTION R√âPONSE FINALE ===")
            
            # D√©terminer le succ√®s global
            sap_success = sap_quote and sap_quote.get("success", False)
            sf_success = salesforce_quote and salesforce_quote.get("success", False)
            
            # Pour le POC, on consid√®re que le succ√®s = au moins SAP OU Salesforce
            overall_success = sap_success or sf_success
            
            # Construire la r√©ponse finale
            result = {
                "success": overall_success,
                "quote_id": f"SAP-{sap_quote.get('doc_num', 'FAILED')}" if sap_success else f"SF-{salesforce_quote.get('id', 'FAILED')}" if sf_success else f"FAILED-{today.strftime('%Y%m%d-%H%M%S')}",
                "sap_doc_entry": sap_quote.get("doc_entry") if sap_success else None,
                "sap_doc_num": sap_quote.get("doc_num") if sap_success else None,
                "salesforce_quote_id": salesforce_quote.get("id") if sf_success else None,
                "opportunity_id": salesforce_quote.get("id") if sf_success else None,
                "status": "Created" if overall_success else "Failed",
                "total_amount": total_amount,
                "currency": "EUR",
                "draft_mode": self.draft_mode,
                "sap_result": sap_quote,
                "salesforce_result": salesforce_quote,
                "creation_details": {
                    "sap_success": sap_success,
                    "salesforce_success": sf_success,
                    "client_code": sap_card_code,
                    "lines_count": len(document_lines),
                    "creation_timestamp": today.isoformat()
                }
            }
            
            # Message de statut
            if overall_success:
                messages = []
                if sap_success:
                    messages.append(f"SAP DocNum: {sap_quote.get('doc_num')}")
                if sf_success:
                    messages.append(f"Salesforce ID: {salesforce_quote.get('id')}")
                result["message"] = f"Devis cr√©√© avec succ√®s - {', '.join(messages)}"
            else:
                errors = []
                if not sap_success:
                    errors.append(f"SAP: {sap_quote.get('error', 'Erreur inconnue') if sap_quote else 'Aucune r√©ponse'}")
                if not sf_success:
                    errors.append(f"Salesforce: {salesforce_quote.get('error', 'Erreur inconnue') if salesforce_quote else 'Aucune r√©ponse'}")
                result["message"] = f"√âchec cr√©ation devis - {'; '.join(errors)}"
                result["error"] = result["message"]
            
            logger.info("=== CR√âATION DEVIS TERMIN√âE ===")
            logger.info(f"Succ√®s global: {overall_success}")
            logger.info(f"SAP: {'‚úÖ' if sap_success else '‚ùå'}")
            logger.info(f"Salesforce: {'‚úÖ' if sf_success else '‚ùå'}")
            logger.info(f"Quote ID: {result['quote_id']}")
            
            return result
            
        except Exception as e:
            logger.exception(f"‚ùå ERREUR CRITIQUE dans _create_quote_in_salesforce: {str(e)}")
            return {
                "success": False,
                "error": f"Erreur critique lors de la cr√©ation du devis: {str(e)}",
                "quote_id": f"ERROR-{datetime.now().strftime('%Y%m%d-%H%M%S')}",
                "status": "Failed",
                "draft_mode": self.draft_mode,
                "creation_details": {
                    "error_type": "critical_exception",
                    "error_timestamp": datetime.now().isoformat()
                }
            }
    
    async def _create_sap_client_if_needed(self, client_info: Dict) -> Dict:
        """Cr√©e un client SAP si n√©cessaire - STRUCTURE DE RETOUR CORRIG√âE"""
        import logging
        logger = logging.getLogger(__name__)
        
        try:
            client_name = client_info.get("data", {}).get("Name", "Client NOVA")
            
            # 1. Chercher si le client existe avec sap_search
            search_result = await self.mcp_connector.call_sap_mcp(
                "sap_search", {
                    "query": client_name,
                    "entity_type": "BusinessPartners",
                    "limit": 5
                }
            )
            
            # CORRECTION: V√©rifier la vraie structure de retour SAP
            if "error" not in search_result:
                # Si des r√©sultats existent dans la r√©ponse
                if search_result.get("value") and len(search_result["value"]) > 0:
                    found_client = search_result["value"][0]
                    logger.info(f"‚úÖ Client SAP trouv√©: {found_client.get('CardCode')} - {found_client.get('CardName')}")
                    return {"success": True, "client": found_client}
                elif search_result.get("results") and len(search_result["results"]) > 0:
                    found_client = search_result["results"][0]
                    logger.info(f"‚úÖ Client SAP trouv√©: {found_client.get('CardCode')} - {found_client.get('CardName')}")
                    return {"success": True, "client": found_client}
            
            # 2. Si pas trouv√©, cr√©er le client
            card_code = f"C{datetime.now().strftime('%Y%m%d%H%M%S')}"
            
            customer_data = {
                "CardCode": card_code,
                "CardName": client_name,
                "CardType": "cCustomer",
                "Currency": "EUR",
                "Valid": "tYES",
                "Frozen": "tNO"
            }
            
            create_result = await self.mcp_connector.call_sap_mcp(
                "sap_create_customer_complete", 
                {"customer_data": customer_data}
            )
            
            if create_result.get("success"):
                logger.info(f"‚úÖ Client SAP cr√©√©: {card_code}")
                return {"success": True, "client": {"CardCode": card_code, "CardName": client_name}}
            else:
                logger.error(f"‚ùå √âchec cr√©ation client SAP: {create_result.get('error')}")
                return {"success": False, "error": create_result.get("error", "Erreur inconnue")}
                
        except Exception as e:
            logger.error(f"‚ùå Exception cr√©ation client SAP: {str(e)}")
            return {"success": False, "error": str(e)}
    
    async def _create_salesforce_quote(self, quote_data: Dict[str, Any], sap_quote: Optional[Dict[str, Any]]) -> Dict[str, Any]:
        """Cr√©e R√âELLEMENT le devis dans Salesforce avec tous les d√©tails"""
        try:
            logger.info("=== CR√âATION R√âELLE DU DEVIS DANS SALESFORCE ===")
            
            # R√©f√©rence SAP si disponible
            sap_ref = f" (SAP DocNum: {sap_quote.get('doc_num')})" if sap_quote and sap_quote.get('doc_num') else ""
            
            # 1. Pr√©parer les donn√©es de l'opportunit√© (devis)
            opportunity_data = {
                'Name': f'NOVA-{datetime.now().strftime("%Y%m%d-%H%M%S")}',
                'AccountId': quote_data.get("client", {}).get("id", ""),
                'StageName': 'Proposal/Price Quote',
                'CloseDate': (datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d'),
                'Amount': quote_data.get("total_amount", 0),
                'Description': f'Devis g√©n√©r√© automatiquement via NOVA Middleware{sap_ref}',
                'LeadSource': 'NOVA Middleware',
                'Type': 'New Customer',
                'Probability': 50
            }
            
            logger.info(f"Donn√©es opportunit√© pr√©par√©es: {json.dumps(opportunity_data, indent=2)}")
            
            # 2. Cr√©er l'opportunit√©
            opportunity_result = await MCPConnector.call_salesforce_mcp("salesforce_create_record", {
                "sobject": "Opportunity",
                "data": opportunity_data
            })
            
            if "error" in opportunity_result or not opportunity_result.get("success"):
                logger.error(f"‚ùå Erreur cr√©ation opportunit√©: {opportunity_result.get('error', 'Erreur inconnue')}")
                return {"success": False, "error": opportunity_result.get("error", "√âchec cr√©ation opportunit√©")}
            
            opportunity_id = opportunity_result.get("id")
            logger.info(f"‚úÖ Opportunit√© cr√©√©e dans Salesforce: {opportunity_id}")
            
            # Retourner un r√©sultat simplifi√© pour le POC
            result = {
                "success": True,
                "id": opportunity_id,
                "opportunity_id": opportunity_id,
                "lines_created": len(quote_data.get("quote_lines", [])),
                "total_amount": quote_data.get("total_amount", 0),
                "message": f"Opportunit√© Salesforce cr√©√©e avec succ√®s: {opportunity_id}"
            }
            
            logger.info("=== DEVIS SALESFORCE CR√â√â AVEC SUCC√àS ===")
            return result
            
        except Exception as e:
            logger.exception(f"‚ùå Erreur critique lors de la cr√©ation du devis Salesforce: {str(e)}")
            return {
                "success": False, 
                "error": str(e),
                "message": "Erreur lors de la cr√©ation du devis dans Salesforce"
            }
    
    def _get_stock_value(self, product: Dict[str, Any]) -> float:  # ‚Üê BON
        """Extrait la valeur du stock, qu'il soit un float ou un dict"""
        stock = product.get("stock", 0)
        
        # Si c'est d√©j√† un float/int, le retourner directement
        if isinstance(stock, (int, float)):
            return float(stock)
        
        # Si c'est un dictionnaire, chercher 'total'
        if isinstance(stock, dict):
            return float(stock.get("total", 0))
        
        # Fallback
        return 0.0
    
    def _get_stock_safely(self, product: Dict[str, Any]) -> float:
        """
        Extrait la valeur du stock de mani√®re robuste
        G√®re les cas o√π stock est un float OU un dictionnaire
        """
        stock = product.get("stock", 0)
        
        # Cas 1: stock est d√©j√† un nombre (float/int)
        if isinstance(stock, (int, float)):
            return float(stock)
        
        # Cas 2: stock est un dictionnaire avec 'total'
        if isinstance(stock, dict):
            return float(stock.get("total", 0))
            
        # Cas 3: fallback
        return 0.0
        
    def _build_response(self) -> Dict[str, Any]:
        """üîß CORRECTION : Construit la r√©ponse finale avec nom client correct"""
        logger.info("Construction de la r√©ponse finale enrichie")
        
        client_info = self.context.get("client_info", {})
        quote_result = self.context.get("quote_result", {})
        sap_client = self.context.get("sap_client", {})
        client_validation = self.context.get("client_validation", {})
        products_info = self.context.get("products_info", [])
        extracted_info = self.context.get("extracted_info", {})
        
        # CORRECTION CRITIQUE: V√©rifier les conditions d'erreur AVANT de construire la r√©ponse
        if not client_info.get("found", False):
            return {
                "success": False,
                "status": "error",
                "message": f"Client non trouv√©: {client_info.get('error', 'Erreur inconnue')}",
                "error": client_info.get('error', 'Client non trouv√©'),
                "next_steps": "Veuillez v√©rifier le nom du client et r√©essayer."
            }
        
        if not quote_result.get("success", False):
            return {
                "success": False,
                "status": "error",
                "message": f"√âchec de la cr√©ation du devis: {quote_result.get('error', 'Erreur inconnue')}",
                "error": quote_result.get('error', 'Erreur cr√©ation devis'),
                "next_steps": "Veuillez contacter le support technique."
            }
        
        # üéØ CORRECTION CRITIQUE : Extraction intelligente du nom client  
        client_name = "Client extrait"

        # 1. Priorit√© au contexte client_info (donn√©es Salesforce)
        if self.context.get("client_info", {}).get("data", {}).get("Name"):
            client_name = self.context["client_info"]["data"]["Name"]
            logger.info(f"‚úÖ Nom client depuis context Salesforce: {client_name}")

        # 2. Sinon, essayer les donn√©es SAP dans le contexte
        elif self.context.get("client_info", {}).get("data", {}).get("CardName"):
            sap_name = self.context["client_info"]["data"]["CardName"]
            # Nettoyer le format "CSAFRAN8267 - SAFRAN" -> "SAFRAN"
            if " - " in sap_name:
                client_name = sap_name.split(" - ", 1)[1].strip()
            else:
                client_name = sap_name
            logger.info(f"‚úÖ Nom client depuis context SAP (nettoy√©): {client_name}")

        # 3. En dernier recours, utiliser l'extraction LLM originale
        elif self.context.get("extracted_info", {}).get("client"):
            client_name = self.context["extracted_info"]["client"]
            logger.info(f"‚úÖ Nom client depuis extraction LLM: {client_name}")
        
        # 4. En dernier recours, utiliser l'extraction LLM originale
        elif extracted_info.get("client"):
            client_name = extracted_info["client"]
            logger.info(f"‚úÖ Nom client depuis extraction LLM: {client_name}")
        
        # 5. NOUVEAU: Utiliser les donn√©es SAP brutes depuis le r√©sultat du devis
        elif quote_result.get("sap_result", {}).get("raw_result", {}).get("CardName"):
            sap_card_name = quote_result["sap_result"]["raw_result"]["CardName"]
            client_name = sap_card_name
            logger.info(f"‚úÖ Nom client depuis SAP raw result: {client_name}")
        
        # Journalisation du nom client final apr√®s toutes les conditions
        logger.info(f"üéØ Nom client final pour interface: '{client_name}'")

        # Construction des donn√©es client pour l'interface
        client_data = client_info.get("data", {})
        client_response = {
            "name": client_name,  # ‚Üê UTILISER LE NOM CORRECTEMENT EXTRAIT
            "account_number": client_data.get("AccountNumber") or sap_client.get("data", {}).get("CardCode") or "",
            "salesforce_id": client_data.get("Id", ""),
            "phone": client_data.get("Phone", ""),
            "email": client_data.get("Email", ""),
            "city": client_data.get("BillingCity", ""),
            "country": client_data.get("BillingCountry", "")
        }
        
        # Construction des donn√©es produits (garder la logique existante)
        products_response = []
        for product in products_info:
            if isinstance(product, dict) and "error" not in product:
                # üîß EXTRACTION CORRIG√âE DES DONN√âES PRODUIT
                product_code = (product.get("code") or 
                            product.get("item_code") or 
                            product.get("ItemCode", ""))
                
                product_name = (product.get("name") or 
                            product.get("item_name") or 
                            product.get("ItemName", "Sans nom"))
                
                quantity = float(product.get("quantity", 1))
                unit_price = float(product.get("unit_price", 0))
                line_total = quantity * unit_price
                
                product_data = {
                    "code": product_code,                    # ‚úÖ CORRIG√â
                    "name": product_name,                    # ‚úÖ CORRIG√â  
                    "quantity": quantity,                    # ‚úÖ CORRIG√â
                    "unit_price": unit_price,               # ‚úÖ CORRIG√â
                    "line_total": line_total,               # ‚úÖ CORRIG√â
                    "stock_available": self._get_stock_value(product),
                    "available": self._get_stock_safely(product) >= quantity
                }
                products_response.append(product_data)
                
                logger.info(f"‚úÖ Produit format√© dans r√©ponse: {product_code} x{quantity} = {line_total}‚Ç¨")
        
        # üîß CONSTRUCTION R√âPONSE FINALE CORRIG√âE
        response = {
            "success": True,
            "status": "success",
            "quote_id": quote_result.get("opportunity_id", f"NOVA-{datetime.now().strftime('%Y%m%d-%H%M%S')}"),
            
            # üéØ DONN√âES CLIENT CORRIG√âES AVEC BON NOM
            "client": client_response,
            
            # üéØ DONN√âES PRODUITS
            "products": products_response,
            
            # Calculs financiers
            "total_amount": sum(float(p.get("line_total", 0)) for p in products_response),
            "currency": "EUR",
            "date": datetime.now().strftime("%Y-%m-%d"),
            "quote_status": "Created",
            
            # Disponibilit√©
            "all_products_available": all(p.get("available", False) for p in products_response),
            
            # Informations syst√®me
            "sap_doc_num": quote_result.get("sap_doc_num"),
            "salesforce_quote_id": quote_result.get("opportunity_id"),
            "message": f"Devis g√©n√©r√© avec succ√®s pour {client_name}",  # ‚Üê INCLURE LE NOM
            
            # Mode draft
            "draft_mode": self.draft_mode
        }
        
        # Ajouter les informations de validation client si disponibles
        if client_validation:
            response["client_validation"] = {
                "validation_used": True,
                "country": client_validation.get("country", "Unknown"),
                "validation_level": client_validation.get("validation_level", "basic"),
                "warnings": client_validation.get("warnings", []),
                "suggestions": client_validation.get("suggestions", []),
                "enriched_data": client_validation.get("enriched_data", {}),
                "duplicate_check": client_validation.get("duplicate_check", {})
            }
        else:
            response["client_validation"] = {
                "validation_used": False,
                "reason": "Client existant trouv√© dans Salesforce"
            }
        # Informations de v√©rification doublons DEVIS (nouveau)
        duplicate_check = self.context.get("duplicate_check", {})
        if duplicate_check:
            response["duplicate_check"] = {
                "duplicates_found": duplicate_check.get("duplicates_found", False),
                "warnings_count": len(duplicate_check.get("warnings", [])),
                "suggestions_count": len(duplicate_check.get("suggestions", [])),
                "recent_quotes": len(duplicate_check.get("recent_quotes", [])),
                "draft_quotes": len(duplicate_check.get("draft_quotes", [])),
                "similar_quotes": len(duplicate_check.get("similar_quotes", [])),
                "details": duplicate_check
            }
        # Ajouter les r√©f√©rences syst√®me pour tra√ßabilit√©
        response["system_references"] = {
            "sap_client_created": sap_client.get("created", False) if sap_client else False,
            "sap_client_card_code": sap_client.get("data", {}).get("CardCode") if sap_client and sap_client.get("data") else None,
            "quote_creation_timestamp": datetime.now().isoformat(),
            "validation_enabled": self.validation_enabled
        }
        
        logger.info(f"‚úÖ R√©ponse finale enrichie construite avec nom client: {client_name}")
        response["workflow_steps"] = self.workflow_steps
        return response
    
    # ‚úÖ M√âTHODE D'AIDE - Ajouter aussi cette m√©thode pour enrichir les donn√©es client
    def _enrich_client_data(self, client_name: str, salesforce_data: Dict[str, Any]) -> None:
        """Enrichit les donn√©es client dans le contexte"""
        self.enriched_client_name = client_name
        
        # Enrichir le contexte avec le nom correct
        if "client_info" not in self.context:
            self.context["client_info"] = {}
        
        if "data" not in self.context["client_info"]:
            self.context["client_info"]["data"] = {}
        
        # S'assurer que le nom est bien pr√©sent
        self.context["client_info"]["data"]["Name"] = client_name
        self.context["client_info"]["data"].update(salesforce_data)
        
        logger.info(f"‚úÖ Client enrichi dans le contexte: {client_name}")
    
    async def _validate_client(self, client_name: str) -> Dict[str, Any]:
        """
        Valide le client avec suggestions intelligentes
        """
        logger.info(f"üîç RECHERCHE CLIENT R√âEL: {client_name}")

        try:
            # === RECHERCHE CLASSIQUE (code existant) ===
            query = f"SELECT Id, Name, AccountNumber, AnnualRevenue, LastActivityDate FROM Account WHERE Name LIKE '%{client_name}%' LIMIT 10"
            logger.debug(f"üìù Requ√™te Salesforce: {query}")

            sf_result = await self.mcp_connector.call_salesforce_mcp("salesforce_query", {"query": query})

            logger.info(f"üìä R√âSULTAT SALESFORCE BRUT: {json.dumps(sf_result, indent=2, ensure_ascii=False)}")

            # Client trouv√© directement
            if sf_result.get("totalSize", 0) > 0 and sf_result.get("records"):
                client_record = sf_result["records"][0]
                logger.debug(f"üìã ENREGISTREMENT CLIENT TROUV√â: {json.dumps(client_record, indent=2)}")

                self._enrich_client_data(client_record.get("Name", client_name), client_record)
                logger.info(f"‚úÖ Client trouv√© directement: {client_record.get('Name')} (ID: {client_record.get('Id')})")
                logger.debug(f"üîç D√©tails client: AccountNumber={client_record.get('AccountNumber')}, Revenue={client_record.get('AnnualRevenue')}")
                return {"found": True, "data": client_record}
            
            # === NOUVEAU : RECHERCHE INTELLIGENTE ===
            logger.info("üß† Client non trouv√©, activation du moteur de suggestions...")

            # R√©cup√©rer tous les clients pour la recherche floue
            all_clients_query = "SELECT Id, Name, AccountNumber, AnnualRevenue, LastActivityDate FROM Account LIMIT 1000"
            logger.debug(f"üìù Requ√™te tous clients: {all_clients_query}")

            all_clients_result = await self.mcp_connector.call_salesforce_mcp("salesforce_query", {"query": all_clients_query})
            logger.debug(f"üìä R√âSULTAT TOUS CLIENTS: {json.dumps(all_clients_result, indent=2, ensure_ascii=False)}")

            available_clients = all_clients_result.get("records", []) if all_clients_result.get("totalSize", 0) > 0 else []
            logger.info(f"üîç {len(available_clients)} clients disponibles pour analyse")
            
            # G√©n√©rer les suggestions
            self.client_suggestions = await self.suggestion_engine.suggest_client(client_name, available_clients)
            logger.debug(f"üîç SUGGESTIONS G√âN√âR√âES: {json.dumps(self.client_suggestions.to_dict(), indent=2)}")

            if self.client_suggestions.has_suggestions:
                primary_suggestion = self.client_suggestions.primary_suggestion

                # Si confiance √©lev√©e, proposer auto-correction
                if primary_suggestion.confidence.value == "high":
                    logger.info(f"üéØ Suggestion haute confiance: {primary_suggestion.suggested_value} (score: {primary_suggestion.score})")
                    logger.debug(f"üîç D√©tails suggestion: {primary_suggestion.details}")
                    
                    # Retourner avec suggestion pour que l'utilisateur puisse choisir
                    return {
                        "found": False, 
                        "suggestions": self.client_suggestions.to_dict(),
                        "auto_suggest": True,
                        "message": f"Client '{client_name}' non trouv√©. Je sugg√®re '{primary_suggestion.suggested_value}' (similarit√©: {primary_suggestion.score}%)"
                    }
                else:
                    # Confiance moyenne/faible, pr√©senter les options
                    logger.info(f"ü§î Multiple suggestions trouv√©es pour: {client_name}")
                    return {
                        "found": False,
                        "suggestions": self.client_suggestions.to_dict(),
                        "auto_suggest": False,
                        "message": self.client_suggestions.conversation_prompt
                    }
            else:
                # === AUCUN CLIENT TROUV√â - SUGGESTIONS ===
                # Aucune suggestion, proposer cr√©ation
                logger.info(f"‚ùå Aucune suggestion trouv√©e pour: {client_name}")
                # üÜï TENTATIVE DE CR√âATION AUTOMATIQUE
                creation_result = await self._create_client_automatically(client_name)

                if creation_result.get("created"):
                    logger.info(f"‚úÖ Client '{client_name}' cr√©√© automatiquement !")
                    return {
                        "found": True,
                        "data": creation_result.get("client_data"),
                        "source": "auto_created",
                        "message": creation_result.get("message"),
                        "auto_created": True
                    }

                logger.warning(f"‚ö†Ô∏è Cr√©ation automatique √©chou√©e: {creation_result.get('error')}")
                return {
                    "found": False,
                    "suggestions": None,
                    "message": f"Client '{client_name}' non trouv√©. Voulez-vous cr√©er un nouveau client ?"
                }
                
        except Exception as e:
            logger.exception(f"Erreur validation client avec suggestions: {str(e)}")
            return {"found": False, "error": str(e)}
    
    async def _check_duplicate_quotes(self, client_info: Dict[str, Any], products: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        V√©rifie s'il existe d√©j√† des devis similaires pour √©viter les doublons
        
        Args:
            client_info: Informations du client valid√©
            products: Liste des produits demand√©s
            
        Returns:
            Dict avec statut de v√©rification et actions sugg√©r√©es
        """
        logger.info("üîç V√©rification des doublons de devis...")
        
        duplicate_check = {
            "duplicates_found": False,
            "recent_quotes": [],
            "similar_quotes": [],
            "draft_quotes": [],
            "action_required": False,
            "suggestions": [],
            "warnings": []
        }
        
        try:
            # R√©cup√©rer les identifiants client
            client_name = client_info.get("data", {}).get("Name", "")
            
            if not client_name:
                logger.warning("Aucun nom client pour v√©rification doublons")
                return duplicate_check
            
            # 1. V√©rifier les devis SAP r√©cents (derni√®res 48h)
            recent_quotes = await self._get_recent_sap_quotes(client_name, hours=48)
            
            # 2. V√©rifier les devis brouillons existants
            draft_quotes = await self._get_client_draft_quotes(client_name)
            
            # 3. Analyser la similarit√© des produits
            similar_quotes = await self._find_similar_product_quotes(client_name, products)
            
            # Populate results
            duplicate_check["recent_quotes"] = recent_quotes
            duplicate_check["draft_quotes"] = draft_quotes  
            duplicate_check["similar_quotes"] = similar_quotes
            
            # Analyser les r√©sultats
            total_findings = len(recent_quotes) + len(draft_quotes) + len(similar_quotes)
            
            if total_findings > 0:
                duplicate_check["duplicates_found"] = True
                duplicate_check["action_required"] = True
                
                # Messages d'alerte
                if recent_quotes:
                    duplicate_check["warnings"].append(f"‚ö†Ô∏è {len(recent_quotes)} devis r√©cent(s) trouv√©(s) pour {client_name}")
                    
                if draft_quotes:
                    duplicate_check["warnings"].append(f"üìù {len(draft_quotes)} devis en brouillon pour {client_name}")
                    duplicate_check["suggestions"].append("üí° Consid√©rez consolider avec les brouillons existants")
                    
                if similar_quotes:
                    duplicate_check["warnings"].append(f"üîÑ {len(similar_quotes)} devis avec produits similaires")
                    duplicate_check["suggestions"].append("üí° V√©rifiez s'il s'agit d'une mise √† jour ou d'un nouveau besoin")
            
            else:
                duplicate_check["suggestions"].append("‚úÖ Aucun doublon d√©tect√© - Cr√©ation s√©curis√©e")
                
            logger.info(f"V√©rification doublons termin√©e: {total_findings} potentiel(s) doublon(s)")
            return duplicate_check
            
        except Exception as e:
            logger.exception(f"Erreur v√©rification doublons devis: {str(e)}")
            duplicate_check["warnings"].append(f"‚ùå Erreur v√©rification doublons: {str(e)}")
            return duplicate_check

    async def _get_recent_sap_quotes(self, client_name: str, hours: int = 48) -> List[Dict[str, Any]]:
        """R√©cup√®re les devis SAP r√©cents pour un client"""
        try:
            
            # Calculer la date limite
            cutoff_date = datetime.now() - timedelta(hours=hours)
            cutoff_str = cutoff_date.strftime("%Y-%m-%d")
            
            # Rechercher dans SAP avec filtre date et client
            
            result = await MCPConnector.call_sap_mcp("sap_search_quotes", {
                "client_name": client_name,
                "date_from": cutoff_str,
                "limit": 10
            })
            
            if result.get("success") and result.get("quotes"):
                return result["quotes"]
            
            return []
            
        except Exception as e:
            logger.warning(f"Erreur recherche devis r√©cents: {str(e)}")
            return []

    async def _get_client_draft_quotes(self, client_name: str) -> List[Dict[str, Any]]:
        """R√©cup√®re les devis en brouillon pour un client"""
        try:
            
            # R√©cup√©rer tous les brouillons
            draft_result = await sap_list_draft_quotes()
            
            if not draft_result.get("success"):
                return []
            
            # Filtrer par nom client
            client_drafts = [
                quote for quote in draft_result.get("draft_quotes", [])
                if quote.get("card_name", "").lower() == client_name.lower()
            ]
            
            return client_drafts
            
        except Exception as e:
            logger.warning(f"Erreur recherche brouillons client: {str(e)}")
            return []

    async def _find_similar_product_quotes(self, client_name: str, requested_products: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Trouve les devis avec des produits similaires"""
        try:
            # Pour l'instant, impl√©mentation simplifi√©e
            # TODO: Logique avanc√©e de comparaison produits
            
            # Extraire les codes produits demand√©s
            requested_codes = set(product.get("code", "").upper() for product in requested_products)
            
            logger.info(f"Recherche produits similaires pour {client_name}: {requested_codes}")
            
            # Retourner vide pour l'instant - √† impl√©menter selon les besoins
            return []
            
        except Exception as e:
            logger.warning(f"Erreur recherche produits similaires: {str(e)}")
            return []
        
    async def _get_products_info(self, products: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        R√©cup√®re UNIQUEMENT les informations techniques des produits depuis SAP
        Le calcul des prix est d√©l√©gu√© au Price Engine
        """
        if not products:
            logger.warning("Aucun produit sp√©cifi√©")
            return []
            
        logger.info(f"üîç RECHERCHE PRODUITS (sans calcul prix): {products}")
        enriched_products = []

        for product in products:
            try:
                product_code = product.get("code", "")
                product_name = product.get("name", "")
                
                # PROBL√àME ICI : Si product_code est vide, on ne fait rien
                if product_code:
                    # Recherche par code exact (existant)
                    product_details = await MCPConnector.call_sap_mcp("sap_get_product_details", {
                        "item_code": product_code
                    })
                elif product_name:
                    # NOUVELLE LOGIQUE : Recherche par nom
                    logger.info(f"üîç Produit sans code, recherche par nom: {product_name}")
                    product_details = await self._search_product_by_name_only(product_name)
                else:
                    logger.error(f"‚ùå Produit sans code ni nom: {product}")
                    enriched_products.append({
                        "code": "",
                        "quantity": product.get("quantity", 1),
                        "error": "Produit sans code ni nom"
                    })
                    continue
                
                # Calculer le stock total (logique conserv√©e car technique)
                total_stock = self._extract_stock_from_sap_data(product_details)
                
                # R√©cup√©rer l'ID Salesforce
                salesforce_id = await self._find_product_in_salesforce(product["code"])
                
                # ‚úÖ NOUVEAU : Produit enrichi SANS calcul de prix
                enriched_product = {
                    "code": product["code"],
                    "quantity": product["quantity"],
                    "name": product_details.get("ItemName", "Unknown"),
                    "stock": total_stock,
                    "salesforce_id": salesforce_id,
                    # ‚úÖ Conserver les donn√©es SAP brutes pour le Price Engine
                    "sap_raw_data": product_details,
                    # ‚úÖ Prix √† null - sera calcul√© par le Price Engine
                    "unit_price": None,
                    "line_total": None,
                    "price_calculated": False
                }
                
                enriched_products.append(enriched_product)
                logger.info(f"‚úÖ Produit enrichi (sans prix): {product['code']} - Stock: {total_stock}")
                
            except Exception as e:
                logger.error(f"Erreur r√©cup√©ration produit {product['code']}: {str(e)}")
                enriched_products.append({
                    "code": product["code"],
                    "quantity": product["quantity"],
                    "error": str(e)
                })
        
        return enriched_products
    async def _find_similar_products(self, product_name: str) -> List[Dict[str, Any]]:
        """
        Trouve des produits similaires bas√©s sur des mots-cl√©s
        """
        if not product_name:
            return []
            
        try:
            # Extraire des mots-cl√©s intelligents
            keywords = self._extract_product_keywords(product_name)
            similar_products = []
            
            for keyword in keywords[:2]:  # Limiter √† 2 mots-cl√©s
                search_result = await self.mcp_connector.call_mcp(
                    "sap_mcp",
                    "sap_search",
                    {
                        "search_term": keyword,
                        "search_fields": ["ItemName", "U_Description"],
                        "limit": 3
                    }
                )
                
                if search_result.get("success") and search_result.get("results"):
                    for product in search_result["results"]:
                        if product not in similar_products:  # √âviter les doublons
                            similar_products.append({
                                "code": product.get("ItemCode"),
                                "name": product.get("ItemName"),
                                "price": float(product.get("AvgPrice", 0)),
                                "description": product.get("U_Description", ""),
                                "matched_keyword": keyword
                            })
            
            logger.info(f"üîç {len(similar_products)} alternatives trouv√©es pour '{product_name}'")
            return similar_products[:5]  # Limiter √† 5 alternatives max
            
        except Exception as e:
            logger.error(f"Erreur recherche alternatives: {str(e)}")
            return []
    async def _search_product_by_name_only(self, product_name: str) -> Dict[str, Any]:
        """
        Recherche un produit SAP par nom uniquement (quand pas de code)
        """
        try:
            logger.info(f"üîç Recherche SAP par nom: {product_name}")
            
            # Utiliser la m√©thode MCP de recherche g√©n√©rale
            search_result = await self.mcp_connector.call_mcp(
                "sap_mcp",
                "sap_search",
                {
                    "search_term": product_name,
                    "search_fields": ["ItemName", "U_Description"],
                    "limit": 5
                }
            )
            
            if search_result.get("success") and search_result.get("results"):
                # Prendre le premier r√©sultat comme meilleure correspondance
                best_match = search_result["results"][0]
                
                logger.info(f"‚úÖ Produit trouv√© par nom: {best_match.get('ItemName')} ({best_match.get('ItemCode')})")
                
                # Retourner au format attendu par _get_products_info
                return {
                    "ItemCode": best_match.get("ItemCode"),
                    "ItemName": best_match.get("ItemName"),
                    "OnHand": best_match.get("OnHand", 0),
                    "AvgPrice": best_match.get("AvgPrice", 0),
                    "U_Description": best_match.get("U_Description", ""),
                    "found_by": "name_search"
                }
            elif search_result.get("success"):
                # Recherche r√©ussie mais aucun r√©sultat
                logger.warning(f"‚ùå Aucun produit SAP trouv√© pour: {product_name}")
                return {
                    "error": f"Aucun produit trouv√© pour '{product_name}'"
                }
            else:
                # Erreur dans la recherche MCP
                logger.error(f"‚ùå Erreur recherche MCP: {search_result.get('error')}")
                return {
                    "error": f"Erreur recherche SAP: {search_result.get('error')}"
                }
                
        except Exception as e:
            logger.exception(f"‚ùå Exception recherche par nom: {str(e)}")
            return {
                "error": f"Erreur syst√®me: {str(e)}"
            }
    def _extract_stock_from_sap_data(self, product_details: Dict) -> float:
        """Extrait le stock total depuis les donn√©es SAP"""
        total_stock = 0.0
        
        if "stock" in product_details and isinstance(product_details["stock"], dict):
            total_stock = float(product_details["stock"].get("total", 0))
        elif "QuantityOnStock" in product_details:
            total_stock = float(product_details.get("QuantityOnStock", 0))
        elif "OnHand" in product_details:
            total_stock = float(product_details.get("OnHand", 0))
        
        return total_stock

    async def _apply_price_engine(self, client_data: Dict, products_data: List[Dict]) -> Dict[str, Any]:
        """Applique le Price Engine pour calculer les prix finaux"""
        try:
            
            price_engine = PriceEngineService()
            
            # Pr√©parer les donn√©es pour le Price Engine
            pricing_request = {
                "client": {
                    "id": client_data.get("Id"),
                    "name": client_data.get("Name"),
                    "account_number": client_data.get("AccountNumber"),
                    "type": client_data.get("Type", "Standard"),
                    "city": client_data.get("BillingCity"),
                    "country": client_data.get("BillingCountry")
                },
                "products": [
                    {
                        "code": p.get("code"),
                        "name": p.get("name"),
                        "quantity": p.get("quantity", 1),
                        "base_price": p.get("sap_data", {}).get("Price", 0),
                        "category": p.get("sap_data", {}).get("ItemsGroupCode"),
                        "sap_data": p.get("sap_data", {})
                    }
                    for p in products_data
                ],
                "conditions": {
                    "draft_mode": self.draft_mode,
                    "timestamp": datetime.now().isoformat()
                }
            }
            
            # Calculer les prix avec le Price Engine
            pricing_result = await price_engine.calculate_pricing(pricing_request)
            
            if pricing_result.get("success"):
                return {
                    "success": True,
                    "updated_products": pricing_result.get("products", []),
                    "total_amount": pricing_result.get("total_amount", 0.0),
                    "pricing_details": pricing_result.get("details", {})
                }
            else:
                logger.error(f"Erreur Price Engine: {pricing_result.get('error')}")
                return {"success": False, "error": pricing_result.get("error")}
                
        except Exception as e:
            logger.error(f"Erreur application Price Engine: {str(e)}")
            return {"success": False, "error": str(e)}
        
    async def _apply_price_calculations(self, products_data: List[Dict], client_data: Dict) -> List[Dict]:
        """
        Applique les calculs de prix via le Price Engine
        """
        try:
            
            logger.info("üí∞ D√©marrage calculs Prix Engine...")
            
            # Pr√©parer les donn√©es pour le Price Engine
            price_engine = PriceEngineService()
            
            pricing_request = {
                "client": {
                    "id": client_data.get("Id"),
                    "name": client_data.get("Name"),
                    "account_number": client_data.get("AccountNumber"),
                    "type": client_data.get("Type", "Standard"),
                    "city": client_data.get("BillingCity"),
                    "country": client_data.get("BillingCountry")
                },
                "products": [
                    {
                        "code": p.get("code"),
                        "name": p.get("name"),
                        "quantity": p.get("quantity", 1),
                        "sap_data": p.get("sap_raw_data", {}),
                        "stock": p.get("stock", 0)
                    }
                    for p in products_data if not p.get("error")
                ],
                "conditions": {
                    "draft_mode": self.draft_mode,
                    "timestamp": datetime.now().isoformat()
                }
            }
            
            # üöÄ APPEL AU PRICE ENGINE
            pricing_result = await price_engine.calculate_pricing(pricing_request)
            
            if not pricing_result.get("success"):
                logger.error(f"‚ùå Erreur Price Engine: {pricing_result.get('error')}")
                raise Exception(pricing_result.get("error", "Erreur Price Engine"))
            
            # Fusionner les r√©sultats du Price Engine avec les donn√©es produits
            priced_products = []
            pricing_products = {p["code"]: p for p in pricing_result.get("products", [])}
            
            for product in products_data:
                if product.get("error"):
                    priced_products.append(product)  # Conserver les erreurs
                    continue
                    
                product_code = product["code"]
                pricing_data = pricing_products.get(product_code, {})
                
                # ‚úÖ Fusionner donn√©es techniques + prix
                priced_product = {
                    **product,  # Donn√©es techniques existantes
                    "unit_price": pricing_data.get("unit_price", 0.0),
                    "line_total": pricing_data.get("line_total", 0.0),
                    "price_calculated": True,
                    "pricing_details": pricing_data.get("details", {}),
                    "discounts": pricing_data.get("discounts", []),
                    "price_engine_version": pricing_result.get("version", "1.0")
                }
                
                priced_products.append(priced_product)
            
            logger.info(f"‚úÖ Price Engine appliqu√© sur {len(priced_products)} produits")
            return priced_products
            
        except Exception as e:
            logger.error(f"‚ùå Erreur application Price Engine: {str(e)}")
            # En cas d'erreur, retourner les produits avec prix par d√©faut
            return self._apply_fallback_pricing(products_data)

    def _apply_fallback_pricing(self, products_data: List[Dict]) -> List[Dict]:
        """Prix de secours si le Price Engine √©choue"""
        logger.warning("‚ö†Ô∏è Application des prix de secours...")
        
        for product in products_data:
            if not product.get("error") and product.get("unit_price") is None:
                # Prix de secours bas√© sur les donn√©es SAP brutes
                sap_data = product.get("sap_raw_data", {})
                fallback_price = self._extract_fallback_price_from_sap(sap_data)
                
                product.update({
                    "unit_price": fallback_price,
                    "line_total": product["quantity"] * fallback_price,
                    "price_calculated": True,
                    "pricing_method": "fallback"
                })
        
        return products_data

    def _extract_fallback_price_from_sap(self, sap_data: Dict) -> float:
        """Extrait un prix de secours depuis les donn√©es SAP"""
        # Votre logique actuelle de r√©cup√©ration de prix (extraite de l'ancienne version)
        if "price_details" in sap_data and sap_data["price_details"].get("price_engine"):
            pe = sap_data["price_details"]["price_engine"]
            return float(pe.get("unit_price_after_discount", 0.0))
        elif "Price" in sap_data:
            return float(sap_data.get("Price", 0.0))
        elif "ItemPrices" in sap_data and len(sap_data["ItemPrices"]) > 0:
            return float(sap_data["ItemPrices"][0].get("Price", 0.0))
        elif "LastPurchasePrice" in sap_data:
            return float(sap_data.get("LastPurchasePrice", 0.0))
        else:
            return 100.0  # Prix par d√©faut

    def _get_standard_system_prompt(self) -> str:
        """Retourne le prompt syst√®me standard pour l'extraction"""
        return """Tu es un assistant sp√©cialis√© dans l'extraction d'informations de devis.
        Extrait les informations client, produits et quantit√©s de la demande utilisateur.
        Retourne un JSON structur√© avec les champs: client_info, products, special_requirements."""

    def _get_robust_system_prompt(self) -> str:
        """Retourne le prompt syst√®me robuste avec fallbacks"""
        return """Tu es un assistant expert en extraction d'informations de devis.
        Extrait toutes les informations disponibles m√™me si incompl√®tes.
        Utilise des valeurs par d√©faut raisonnables pour les champs manquants.
        Retourne un JSON structur√© avec validation et suggestions."""

    def _get_minimal_system_prompt(self) -> str:
        """Retourne le prompt syst√®me minimal pour extraction rapide"""
        return """Extrait rapidement: nom client, produits demand√©s, quantit√©s.
        Format JSON simple uniquement."""
        
    async def _extract_info_unified(self, prompt: str, 
                                extraction_mode: str = "standard") -> Dict[str, Any]:
        """
        M√©thode d'extraction LLM unifi√©e
        
        Args:
            prompt: Demande utilisateur
            extraction_mode: Mode d'extraction (standard, robust, minimal)
        
        Returns:
            Informations extraites
        """
        system_prompts = {
            "standard": self._get_standard_system_prompt(),
            "robust": self._get_robust_system_prompt(),
            "minimal": self._get_minimal_system_prompt()
        }
        
        system_prompt = system_prompts.get(extraction_mode, system_prompts["standard"])
        
        try:
            # Logique d'extraction commune
            result = await self.llm_extractor.extract_quote_info(prompt)
            
            # Post-traitement selon le mode
            # Pour l'instant, on retourne le r√©sultat tel quel
            # Les modes "robust" et "minimal" peuvent √™tre impl√©ment√©s plus tard
            return result

        except Exception as e:
            logger.error(f"Erreur extraction {extraction_mode}: {e}")
            return {"error": str(e)}
    
    async def _extract_info_from_prompt(self, prompt: str) -> Dict[str, Any]:
        """
        Extraction des informations avec fallback robuste
        Version corrig√©e qui fonctionne m√™me si Claude √©choue
        """

        logger.info(f"üîÑ Extraction d'informations depuis: {prompt}")

        # üîß STRAT√âGIE 1: Essayer Claude API (si disponible)
        try:
            # V√©rifier si l'API Claude est configur√©e
            api_key = os.getenv("ANTHROPIC_API_KEY")

            if api_key and api_key.startswith("sk-ant-"):
                logger.info("üìû Tentative d'extraction via Claude API...")

                # Importer le module avec gestion d'erreur
                try:
                    extracted_info = await LLMExtractor.extract_quote_info(prompt)

                    # V√©rifier si l'extraction a r√©ussi
                    if extracted_info and "error" not in extracted_info:
                        logger.info("‚úÖ Extraction Claude r√©ussie")
                        return extracted_info
                    else:
                        logger.warning(f"‚ö†Ô∏è Erreur Claude: {extracted_info.get('error', 'R√©ponse invalide')}")

                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Exception Claude: {str(e)}")
            else:
                logger.info("‚ö†Ô∏è API Claude non configur√©e, passage au fallback")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur g√©n√©rale Claude: {str(e)}")

        # üîß STRAT√âGIE 2: Fallback avec extraction manuelle robuste
        logger.info("üîÑ Utilisation du fallback d'extraction manuelle...")

        try:
            fallback_result = await self._extract_info_basic_robust(prompt)

            if fallback_result and "client" in fallback_result:
                logger.info("‚úÖ Extraction manuelle r√©ussie")
                return fallback_result
            else:
                logger.warning("‚ö†Ô∏è Extraction manuelle √©choue, utilisation des valeurs par d√©faut")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Exception fallback: {str(e)}")

        # üîß STRAT√âGIE 3: Extraction minimale par d√©faut
        logger.info("üîÑ Extraction minimale par d√©faut...")

        return await self._extract_info_minimal(prompt)

    async def _extract_info_basic_robust(self, prompt: str) -> Dict[str, Any]:
        """
        Extraction manuelle robuste avec patterns am√©lior√©s
        """

        import re

        # Normaliser le prompt
        prompt_lower = prompt.lower()

        # üîç EXTRACTION CLIENT avec patterns multiples
        client_patterns = [
            r"pour\s+(?:la\s+soci√©t√©\s+|l'entreprise\s+|le\s+client\s+)?([A-Za-z0-9\s&\-'.,]+?)(?:\s+|$)",
            r"client\s*[:=]\s*([A-Za-z0-9\s&\-'.,]+?)(?:\s+|$)",
            r"soci√©t√©\s*[:=]\s*([A-Za-z0-9\s&\-'.,]+?)(?:\s+|$)",
            r"entreprise\s*[:=]\s*([A-Za-z0-9\s&\-'.,]+?)(?:\s+|$)",
            r"([A-Za-z0-9\s&\-'.,]{3,30})\s+(?:a\s+besoin|souhaite|demande|veut)",
        ]

        client_name = None

        for pattern in client_patterns:
            matches = re.findall(pattern, prompt_lower)
            if matches:
                # Nettoyer le nom du client
                client_name = matches[0].strip()

                # Supprimer les mots parasites
                stop_words = ['de', 'pour', 'le', 'la', 'les', 'un', 'une', 'des', 'du', 'devis', 'faire', 'cr√©er']
                client_words = [word for word in client_name.split() if word not in stop_words]

                if client_words:
                    client_name = ' '.join(client_words).title()
                    break

        # Si pas de client trouv√©, utiliser une valeur par d√©faut
        if not client_name:
            client_name = "Client √† identifier"

        # üîç EXTRACTION PRODUITS avec patterns multiples
        product_patterns = [
            r"(\d+)\s+(?:unit√©s?\s+de\s+|)([A-Za-z0-9\-_]+)",
            r"(\d+)\s+([A-Za-z0-9\-_\s]+?)(?:\s+pour|$)",
            r"(?:ref\s*[:=]\s*|r√©f√©rence\s*[:=]\s*|code\s*[:=]\s*)([A-Za-z0-9\-_]+)",
            r"(\d+)\s+(imprimante|ordinateur|√©cran|clavier|souris|serveur|switch|routeur|c√¢ble)",
        ]

        products = []

        for pattern in product_patterns:
            matches = re.findall(pattern, prompt_lower)
            for match in matches:
                if len(match) == 2:
                    # Pattern avec quantit√© et produit
                    quantity, product = match
                    products.append({
                        "code": product.strip(),
                        "quantity": int(quantity) if quantity.isdigit() else 1,
                        "name": product.strip().title()
                    })
                else:
                    # Pattern sans quantit√©
                    products.append({
                        "code": match.strip(),
                        "quantity": 1,
                        "name": match.strip().title()
                    })

        # Si pas de produits trouv√©s, analyser par mots-cl√©s
        if not products:
            keywords = ['imprimante', 'ordinateur', '√©cran', 'clavier', 'souris', 'serveur']

            for keyword in keywords:
                if keyword in prompt_lower:
                    # Chercher une quantit√© avant le mot-cl√©
                    quantity_match = re.search(rf"(\d+)\s+.*?{keyword}", prompt_lower)
                    quantity = int(quantity_match.group(1)) if quantity_match else 1

                    products.append({
                        "code": f"{keyword.upper()}_001",
                        "quantity": quantity,
                        "name": keyword.title()
                    })
                    break

        # Si toujours pas de produits, cr√©er un produit par d√©faut
        if not products:
            products.append({
                "code": "PRODUIT_001",
                "quantity": 1,
                "name": "Produit √† identifier"
            })

        return {
            "action_type": "DEVIS",
            "client": client_name,
            "products": products,
            "extracted_method": "manual_robust",
            "confidence": 0.7
        }

    async def _extract_info_minimal(self, prompt: str) -> Dict[str, Any]:
        """
        Extraction minimale garantie de fonctionner
        """

        # Analyser le prompt pour des indices basiques
        words = prompt.lower().split()

        # Chercher des nombres (potentiellement des quantit√©s)
        quantities = [int(word) for word in words if word.isdigit()]
        default_quantity = quantities[0] if quantities else 1

        # Chercher des mots-cl√©s produits
        product_keywords = ['imprimante', 'ordinateur', '√©cran', 'laptop', 'serveur', 'switch', 'routeur']
        found_products = [keyword for keyword in product_keywords if keyword in prompt.lower()]

        # G√©n√©rer un nom de client basique
        client_name = "Client NOVA"

        # Cr√©er les produits
        products = []

        if found_products:
            for product in found_products:
                products.append({
                    "code": f"{product.upper()}_001",
                    "quantity": default_quantity,
                    "name": product.title()
                })
        else:
            # Produit par d√©faut
            products.append({
                "code": "PRODUIT_STANDARD",
                "quantity": default_quantity,
                "name": "Produit Standard"
            })

        return {
            "action_type": "DEVIS",
            "client": client_name,
            "products": products,
            "extracted_method": "minimal_fallback",
            "confidence": 0.5,
            "note": "Extraction minimale - donn√©es √† v√©rifier"
        }
    async def _extract_intelligent_search_criteria(self, product_name: str) -> Dict[str, Any]:
        """Extrait crit√®res de recherche intelligents via LLM"""
        
        prompt = f"""
    Analyse ce produit et extrais les crit√®res de recherche SAP :
    Produit: "{product_name}"

    Extrais :
    - Cat√©gorie principale (imprimante, ordinateur, etc.)
    - Sp√©cifications techniques (vitesse ppm, type laser/jet, etc.)
    - Mots-cl√©s de recherche optimaux

    Format JSON uniquement.
    """
        
        try:
            result = await self.llm_extractor.extract_quote_info(prompt)
            search_criteria = result.get("search_criteria", {})
            
            return {
                "category": search_criteria.get("category", product_name.split()[0]),
                "specifications": search_criteria.get("specifications", {}),
                "keywords": search_criteria.get("characteristics", [product_name])
            }
        except Exception as e:
            logger.warning(f"LLM extraction failed: {e}")
            return {"category": product_name, "keywords": [product_name]}

    async def _smart_product_search(self, criteria: Dict[str, Any]) -> Dict[str, Any]:
        """Recherche produits avec crit√®res intelligents"""
        
        category = criteria.get("category", "")
        specifications = criteria.get("specifications", {})
        keywords = criteria.get("keywords", [])
        
        exact_matches = []
        close_matches = []
        
        # Recherche par cat√©gorie + sp√©cifications
        if "vitesse" in specifications:
            target_speed = int(specifications["vitesse"].replace(" ppm", "").replace("ppm", ""))
            query = f"{category} {target_speed}"
        else:
            query = category
        
        try:
            result = await self.mcp_connector.call_mcp(
                "sap_mcp", "sap_search", 
                {"query": query, "entity_type": "Items", "limit": 5}
            )
            
            if result.get("success"):
                products = result.get("results", []) or result.get("value", [])
                
                for product in products:
                    score = self._calculate_product_match_score(product, criteria)
                    
                    if score >= 0.8:
                        exact_matches.append(product)
                    elif score >= 0.5:
                        close_matches.append(product)
                        
        except Exception as e:
            logger.warning(f"Erreur recherche '{query}': {e}")
        
        return {
            "success": len(exact_matches) > 0 or len(close_matches) > 0,
            "exact_matches": exact_matches[:3],
            "close_matches": close_matches[:5]
        }

    def _calculate_product_match_score(self, product: Dict, criteria: Dict) -> float:
        """Calcule score de correspondance produit/crit√®res"""
        
        score = 0.0
        product_name = product.get("ItemName", "").lower()
        combined_text = f"{product_name} {product.get('U_Description', '').lower()}"
        
        # Score cat√©gorie
        category = criteria.get("category", "").lower()
        if category in combined_text:
            score += 0.4
        
        # Score sp√©cifications techniques (vitesse ppm)
        specifications = criteria.get("specifications", {})
        if "vitesse" in specifications:
            target_speed = int(specifications["vitesse"].replace(" ppm", "").replace("ppm", ""))
            
            import re
            speed_matches = re.findall(r'(\d+)\s*ppm', combined_text)
            for match in speed_matches:
                product_speed = int(match)
                speed_diff = abs(product_speed - target_speed)
                
                if speed_diff == 0:
                    score += 0.5
                elif speed_diff <= 2:
                    score += 0.3
                elif speed_diff <= 5:
                    score += 0.1
        
        return min(score, 1.0)
    async def _check_availability(self, products: List[Dict[str, Any]]) -> Dict[str, Any]:
        """V√©rifie la disponibilit√© des produits"""
        logger.info("V√©rification de la disponibilit√© des produits")
        
        availability_status = {
            "all_available": True,
            "unavailable_products": [],
            "alternatives": {}
        }
        
        for product in products:
            if "error" in product:
                availability_status["all_available"] = False
                availability_status["unavailable_products"].append({
                    "code": product["code"],
                    "reason": "Produit non trouv√©",
                    "details": product["error"]
                })
                continue
            
            if product.get("stock", 0) < product.get("quantity", 0):
                logger.warning(f"Produit {product['code']} insuffisant en stock: {product['stock']} < {product['quantity']}")
                availability_status["all_available"] = False
                
                unavailable_item = {
                    "code": product["code"],
                    "name": product.get("name", ""),
                    "quantity_requested": product.get("quantity", 0),
                    "quantity_available": product.get("stock", 0),
                    "reason": "Stock insuffisant"
                }
                availability_status["unavailable_products"].append(unavailable_item)
        
        return availability_status
    
    async def _build_missing_info_response(self, extracted_info: Dict[str, Any], missing_elements: List[str]) -> Dict[str, Any]:
        """Construit une r√©ponse proactive demandant les informations manquantes avec des propositions concr√®tes"""
        
        # R√©cup√©rer les listes pour proposer des choix
        available_clients = await self._get_available_clients_list()
        available_products = await self._get_available_products_list()

        # üîß PROTECTION SUPPL√âMENTAIRE: S'assurer que les listes ne sont jamais None
        if available_clients is None:
            logger.warning("available_clients est None, utilisation d'une liste vide")
            available_clients = []
        if available_products is None:
            logger.warning("available_products est None, utilisation d'une liste vide")
            available_products = []

        # Construire le message personnalis√© selon ce qui manque
        if "client" in missing_elements and "produits" in missing_elements:
            message = "üéØ **Parfait ! Je vais vous aider √† cr√©er votre devis √©tape par √©tape.**\n\n" + \
                     "Pour commencer, j'ai besoin de conna√Ætre le client. Voulez-vous que je vous pr√©sente la liste de nos clients ?"
            questions = [
                "üè¢ **√âtape 1 - Client** : Choisissez une option ci-dessous"
            ]
            
        elif "client" in missing_elements:
            products_info = ", ".join([f"{p.get('quantity', 1)}x {p.get('code', '')}" for p in extracted_info.get("products", [])])
            message = f"üéØ **Excellent ! J'ai identifi√© les produits : {products_info}**\n\n" + \
                     "Maintenant, pour quel client souhaitez-vous cr√©er ce devis ? Voulez-vous que je vous pr√©sente la liste de nos clients ?"
            questions = [
                "üè¢ **Client requis** : Choisissez une option ci-dessous"
            ]
            
        elif "produits" in missing_elements:
            client_name = extracted_info.get("client", "le client")
            message = f"üéØ **Parfait ! Devis pour {client_name}**\n\n" + \
                     "Maintenant, quels produits souhaitez-vous inclure dans ce devis ? Voulez-vous que je vous pr√©sente notre catalogue ?"
            questions = [
                "üì¶ **√âtape 2 - Produits** : Choisissez une option ci-dessous"
            ]
        
        # Construire les actions rapides PROACTIVES
        quick_actions = []
        
        if "client" in missing_elements:
            quick_actions.extend([
                {
                    "action": "show_clients_list",
                    "label": f"üìã Voir nos {len(available_clients)} clients",
                    "type": "primary",
                    "description": "Afficher la liste compl√®te des clients",
                    "data": {"count": len(available_clients)}
                },
                {
                    "action": "search_client",
                    "label": "üîç Rechercher un client",
                    "type": "secondary",
                    "description": "Rechercher par nom d'entreprise"
                },
                {
                    "action": "new_client",
                    "label": "‚ûï Nouveau client",
                    "type": "secondary",
                    "description": "Cr√©er un nouveau client"
                }
            ])
        
        if "produits" in missing_elements:
            quick_actions.extend([
                {
                    "action": "show_products_list",
                    "label": f"üì¶ Voir nos {len(available_products)} produits",
                    "type": "primary",
                    "description": "Afficher notre catalogue produits",
                    "data": {"count": len(available_products)}
                },
                {
                    "action": "search_product",
                    "label": "üîç Rechercher un produit",
                    "type": "secondary",
                    "description": "Rechercher par code ou nom"
                },
                {
                    "action": "product_categories",
                    "label": "üìÇ Par cat√©gories",
                    "type": "secondary",
                    "description": "Parcourir par cat√©gories"
                }
            ])
        
        # Actions g√©n√©rales toujours disponibles
        quick_actions.extend([
            {
                "action": "manual_entry",
                "label": "‚úèÔ∏è Saisie manuelle",
                "type": "tertiary",
                "description": "Saisir directement les informations"
            },
            {
                "action": "examples",
                "label": "üí° Voir des exemples",
                "type": "tertiary",
                "description": "Exemples de demandes"
            }
        ])
        
        return {
            "success": True,
            "workflow_status": "waiting_for_input",
            "response_type": "user_input_required",
            "message": message,
            "questions": questions,
            "extracted_info": extracted_info,
            "missing_elements": missing_elements,
            "quick_actions": quick_actions,
            "available_data": {
                "clients": available_clients[:10] if "client" in missing_elements else [],  # Top 10 pour aper√ßu
                "products": available_products[:10] if "produits" in missing_elements else [],  # Top 10 pour aper√ßu
                "clients_count": len(available_clients),
                "products_count": len(available_products)
            },
            "quote_data": {
                "status": "incomplete",
                "task_id": self.task_id,
                "partial_data": extracted_info,
                "timestamp": datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
                "workflow_steps": self.workflow_steps,
                "context_available": True,
                "draft_mode": self.draft_mode
            },
            "suggestions": {
                "examples": [
                    "Je veux un devis pour Acme Corp avec 5 PROD001 et 2 PROD002",
                    "Cr√©er un devis pour Entreprise XYZ, produit REF123 quantit√© 10",
                    "Devis pour client ABC avec 3 unit√©s ITEM456"
                ],
                "next_steps": [
                    "Choisissez un client dans la liste" if "client" in missing_elements else None,
                    "S√©lectionnez les produits souhait√©s" if "produits" in missing_elements else None
                ]
            }
        }
    
    async def _get_available_clients_list(self) -> List[Dict[str, Any]]:
        """R√©cup√®re la liste des clients disponibles depuis Salesforce"""
        try:
            clients_data = await self.mcp_connector.get_salesforce_accounts(limit=100)

            # üîß CORRECTION: V√©rifier si clients_data est valide
            if clients_data and isinstance(clients_data, list):
                clients = []
                for record in clients_data:
                    client_info = {
                        "id": record.get("Id", ""),
                        "name": record.get("Name", ""),
                        "type": record.get("Type", "Prospect"),
                        "industry": record.get("Industry", ""),
                        "phone": record.get("Phone", ""),
                        "website": record.get("Website", ""),
                        "recent_quotes": 0  # √Ä calculer si n√©cessaire
                    }
                    clients.append(client_info)

                # Trier par nom
                clients.sort(key=lambda x: x["name"])
                logger.info(f"R√©cup√©r√© {len(clients)} clients depuis Salesforce (m√©thode principale)")
                return clients
            else:
                logger.warning("M√©thode principale n'a pas retourn√© de donn√©es valides, passage au fallback")

        except Exception as e:
            logger.warning(f"M√©thode principale √©chou√©e, passage au fallback: {str(e)}")

        # üîß FALLBACK: Essayer avec appel MCP direct
        try:
            clients_data = await MCPConnector.call_salesforce_mcp("salesforce_query", {
                "query": "SELECT Id, Name, Type, Industry FROM Account LIMIT 100"
            })

            if clients_data and "records" in clients_data:
                clients = []
                for record in clients_data["records"]:
                    client_info = {
                        "id": record.get("Id", ""),
                        "name": record.get("Name", ""),
                        "type": record.get("Type", "Prospect"),
                        "industry": record.get("Industry", ""),
                        "phone": record.get("Phone", ""),
                        "website": record.get("Website", ""),
                        "recent_quotes": 0  # √Ä calculer si n√©cessaire
                    }
                    clients.append(client_info)

                # Trier par nom
                clients.sort(key=lambda x: x["name"])
                logger.info(f"R√©cup√©r√© {len(clients)} clients depuis Salesforce (fallback)")
                return clients
            else:
                logger.warning("Aucun client trouv√© dans Salesforce")

        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des clients: {str(e)}")

        # üîß CORRECTION: Toujours retourner une liste, jamais None
        logger.info("Retour de la liste d'exemple de clients")
        return [
            {"id": "example1", "name": "Acme Corporation", "type": "Customer", "industry": "Technology"},
            {"id": "example2", "name": "Global Industries", "type": "Prospect", "industry": "Manufacturing"},
            {"id": "example3", "name": "Tech Solutions Ltd", "type": "Customer", "industry": "IT Services"}
        ]
    
    async def _enhanced_product_search(self, product_name: str, product_code: str = "") -> Dict[str, Any]:
        """
        üîß RECHERCHE PRODUIT AM√âLIOR√âE pour cas comme "Imprimante 20 ppm"
        """
        try:
            logger.info(f"üîç Recherche produit am√©lior√©e: '{product_name}' (code: '{product_code}')")

            # 1. Recherche exacte par code si fourni
            if product_code:
                exact_result = await self.mcp_connector.call_mcp(
                    "sap_mcp",
                    "sap_search",
                    {
                        "table": "OITM",
                        "filter": f"ItemCode eq '{product_code}'",
                        "select": "ItemCode,ItemName,OnHand,AvgPrice"
                    }
                )
                
                if exact_result.get("success") and exact_result.get("data"):
                    return {
                        "found": True,
                        "product": exact_result["data"][0],
                        "search_method": "exact_code"
                    }

            # 2. Recherche intelligente par nom pour "imprimantes"
            if product_name:
                search_terms = self._extract_product_keywords(product_name)
                
                for term in search_terms:
                    logger.info(f"üîç Recherche avec terme: '{term}'")
                    
                    fuzzy_result = await self.mcp_connector.call_mcp(
                        "sap_mcp",
                        "sap_search",
                        {
                            "table": "OITM",
                            "filter": f"contains(tolower(ItemName),'{term.lower()}') or contains(tolower(U_Description),'{term.lower()}')",
                            "select": "ItemCode,ItemName,OnHand,AvgPrice,U_Description",
                            "top": 3
                        }
                    )
                    
                    if fuzzy_result.get("success") and fuzzy_result.get("data"):
                        best_match = fuzzy_result["data"][0]
                        logger.info(f"‚úÖ Produit trouv√©: {best_match.get('ItemName')} ({best_match.get('ItemCode')})")
                        
                        return {
                            "found": True,
                            "product": best_match,
                            "search_method": "fuzzy",
                            "search_term": term
                        }

            # 3. Recherche intelligente avec mots-cl√©s
            logger.info(f"üîç Recherche intelligente pour: {product_name}")
            keywords = self._extract_product_keywords(product_name)
            
            for keyword in keywords[:2]:  # Tester 2 mots-cl√©s max
                keyword_result = await self.mcp_connector.call_mcp(
                    "sap_mcp",
                    "sap_search",
                    {
                        "search_term": keyword,
                        "search_fields": ["ItemName", "U_Description"],
                        "limit": 3
                    }
                )
                
                if keyword_result.get("success") and keyword_result.get("results"):
                    best_match = keyword_result["results"][0]
                    logger.info(f"‚úÖ Produit trouv√© via mot-cl√© '{keyword}': {best_match.get('ItemName')}")
                    
                    return {
                        "found": True,
                        "product": {
                            "code": best_match.get("ItemCode"),
                            "name": best_match.get("ItemName"),
                            "price": float(best_match.get("AvgPrice", 0)),
                            "stock": int(best_match.get("OnHand", 0)),
                            "description": best_match.get("U_Description", "")
                        },
                        "search_method": "keyword_match",
                        "matched_keyword": keyword
                    }
            
            
        except Exception as e:
            logger.exception(f"‚ùå Erreur recherche produit: {str(e)}")
            return {
                "found": False,
                "error": str(e)
            }

    def _extract_product_keywords(self, product_name: str) -> List[str]:
        """
        üîß EXTRACTION INTELLIGENTE de mots-cl√©s pour "Imprimante 20 ppm"
        """
        product_lower = product_name.lower()
        keywords = []
        
        # D√©tection type de produit
        if "imprimante" in product_lower:
            keywords.extend(["printer", "imprimante", "laser"])
            
            # D√©tection vitesse
            if "20 ppm" in product_lower or "20ppm" in product_lower:
                keywords.extend(["20ppm", "20 ppm", "pages per minute"])
                
            # D√©tection technologie
            if any(tech in product_lower for tech in ["laser", "jet", "inkjet"]):
                keywords.extend(["laser", "inkjet"])
            else:
                keywords.append("laser")  # Par d√©faut pour imprimantes pro
        
        elif "ordinateur" in product_lower or "pc" in product_lower:
            keywords.extend(["computer", "pc", "desktop"])
        
        elif "√©cran" in product_lower or "moniteur" in product_lower:
            keywords.extend(["monitor", "screen", "display"])
        
        else:
            # Mots g√©n√©riques
            keywords.append(product_name.split()[0])  # Premier mot
        
        logger.info(f"üîç Mots-cl√©s extraits de '{product_name}': {keywords}")
        return keywords

    def _create_generic_product(self, product_name: str) -> Dict[str, Any]:
        """
        üîß CR√âATION PRODUIT G√âN√âRIQUE avec prix estim√©
        """
        import time
        
        # Prix estim√©s selon le type
        estimated_price = 100.0  # Par d√©faut
        
        if "imprimante" in product_name.lower():
            if "20 ppm" in product_name.lower():
                estimated_price = 250.0  # Imprimante laser 20 ppm
            else:
                estimated_price = 150.0  # Imprimante g√©n√©rique
        elif "ordinateur" in product_name.lower():
            estimated_price = 800.0
        elif "√©cran" in product_name.lower():
            estimated_price = 300.0
        
        generic_code = f"GEN{int(time.time()) % 10000:04d}"
        
        return {
            "ItemCode": generic_code,
            "ItemName": product_name.title(),
            "OnHand": 999,  # Stock fictif
            "AvgPrice": estimated_price,
            "U_Description": f"Produit g√©n√©rique cr√©√© automatiquement - Prix estim√©",
            "Generic": True
        }
    
    async def _get_available_products_list(self) -> List[Dict[str, Any]]:
        """R√©cup√®re la liste des produits disponibles depuis SAP"""
        try:
            # R√©cup√©rer les produits depuis SAP via MCP
            products_data = await self.mcp_connector.get_sap_products(limit=100)
            
            if products_data and "products" in products_data:
                products = []
                for product in products_data["products"]:
                    product_info = {
                        "code": product.get("code", ""),
                        "name": product.get("name", ""),
                        "description": product.get("description", ""),
                        "price": product.get("price", 0),
                        "currency": product.get("currency", "EUR"),
                        "stock": product.get("stock", 0),
                        "category": product.get("category", "G√©n√©ral"),
                        "unit": product.get("unit", "pi√®ce"),
                        "promotion": product.get("promotion", False),
                        "discount_threshold": product.get("discount_threshold", 50)  # Remise √† partir de 50 unit√©s
                    }
                    products.append(product_info)
                
                # Trier par code produit
                products.sort(key=lambda x: x["code"])
                logger.info(f"R√©cup√©r√© {len(products)} produits depuis SAP")
                return products
            else:
                logger.warning("Aucun produit trouv√© dans SAP")
                return []
                
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des produits: {str(e)}")
            # Retourner une liste d'exemple en cas d'erreur
            return [
                {"code": "PROD001", "name": "Imprimante Laser Pro", "price": 299.99, "currency": "EUR", "stock": 25, "category": "Imprimantes", "discount_threshold": 10},
                {"code": "PROD002", "name": "Scanner Document Plus", "price": 199.99, "currency": "EUR", "stock": 15, "category": "Scanners", "discount_threshold": 5},
                {"code": "PROD003", "name": "Cartouche Encre XL", "price": 49.99, "currency": "EUR", "stock": 100, "category": "Consommables", "discount_threshold": 20, "promotion": True}
            ]
    
    async def _build_product_quantity_response(self, client_info: Dict[str, Any], selected_products: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Construit une r√©ponse pour demander les quantit√©s avec suggestions de remises et promotions"""
        
        products_with_suggestions = []
        total_savings_potential = 0
        
        for product in selected_products:
            product_code = product.get("code", "")
            product_name = product.get("name", product_code)
            price = product.get("price", 0)
            discount_threshold = product.get("discount_threshold", 50)
            promotion = product.get("promotion", False)
            
            # Calculer les suggestions de quantit√©
            suggestions = {
                "recommended_quantities": [1, 5, 10, discount_threshold] if discount_threshold > 10 else [1, 5, 10],
                "discount_info": {
                    "threshold": discount_threshold,
                    "discount_rate": 0.15 if discount_threshold <= 20 else 0.10,  # 15% pour petites quantit√©s, 10% pour grandes
                    "savings_per_unit": price * (0.15 if discount_threshold <= 20 else 0.10)
                },
                "promotion": {
                    "active": promotion,
                    "description": f"Promotion sp√©ciale sur {product_name}" if promotion else None,
                    "additional_discount": 0.05 if promotion else 0  # 5% suppl√©mentaire
                }
            }
            
            # Chercher des produits alternatifs
            alternatives = await self._find_product_alternatives(product)
            
            product_info = {
                "code": product_code,
                "name": product_name,
                "price": price,
                "currency": product.get("currency", "EUR"),
                "stock": product.get("stock", 0),
                "suggestions": suggestions,
                "alternatives": alternatives
            }
            
            products_with_suggestions.append(product_info)
            
            # Calculer le potentiel d'√©conomies
            if discount_threshold <= 50:
                potential_savings = price * discount_threshold * suggestions["discount_info"]["discount_rate"]
                total_savings_potential += potential_savings
        
        client_name = client_info.get("name", "votre client")
        
        message = f"üéØ **Excellent ! Devis pour {client_name}**\n\n" + \
                 f"Maintenant, pr√©cisons les quantit√©s pour chaque produit. Je vais vous donner des conseils sur les remises disponibles :"
        
        quick_actions = [
            {
                "action": "auto_quantities",
                "label": "‚ú® Quantit√©s optimales",
                "type": "primary",
                "description": f"Appliquer les quantit√©s recommand√©es (potentiel d'√©conomies: {total_savings_potential:.2f}‚Ç¨)"
            },
            {
                "action": "manual_quantities",
                "label": "‚úèÔ∏è Saisir manuellement",
                "type": "secondary",
                "description": "D√©finir les quantit√©s une par une"
            },
            {
                "action": "add_more_products",
                "label": "‚ûï Ajouter d'autres produits",
                "type": "secondary",
                "description": "Compl√©ter la s√©lection"
            }
        ]
        
        return {
            "success": False,
            "workflow_status": "configuring_quantities",
            "message": message,
            "client_info": client_info,
            "products_details": products_with_suggestions,
            "savings_potential": total_savings_potential,
            "quick_actions": quick_actions,
            "suggestions": {
                "tips": [
                    f"Commandez {products_with_suggestions[0]['suggestions']['discount_info']['threshold']} unit√©s ou plus pour b√©n√©ficier de remises",
                    "Certains produits ont des promotions en cours",
                    "Je peux vous proposer des alternatives avec un meilleur rapport qualit√©-prix"
                ]
            }
        }
    
    async def _search_products_with_validation(self, products: List[Dict]) -> Dict[str, Any]:
        """Recherche produits avec gestion des alternatives"""
        
        self._track_step_start("search_products", f"üîç Recherche de {len(products)} produit(s)")
        
        results = []
        requires_validation = False
        
        for i, product in enumerate(products):
            product_name = product.get("name", "")
            product_code = product.get("code", "")
            quantity = product.get("quantity", 1)
            
            self._track_step_progress("product_search_progress", 
                                    int((i / len(products)) * 100), 
                                    f"Recherche: {product_name}")
            
            # Rechercher dans SAP
            sap_results = await self.mcp_connector.search_sap_items(product_name, product_code)
            
            exact_matches = []
            fuzzy_matches = []
            
            for result in sap_results.get("results", []):
                name_similarity = self._calculate_similarity(product_name, result.get("ItemName", ""))
                code_similarity = self._calculate_similarity(product_code, result.get("ItemCode", "")) if product_code else 0
                
                max_similarity = max(name_similarity, code_similarity)
                
                if max_similarity >= 0.9:
                    exact_matches.append({"data": result, "similarity": max_similarity})
                elif max_similarity >= 0.6:
                    fuzzy_matches.append({"data": result, "similarity": max_similarity})
            
            if exact_matches:
                # Produit trouv√©
                best_match = max(exact_matches, key=lambda x: x["similarity"])
                results.append({
                    "original": product,
                    "found": True,
                    "product_data": best_match["data"],
                    "quantity": quantity,
                    "status": "found"
                })
            elif fuzzy_matches:
                # Alternatives trouv√©es
                results.append({
                    "original": product,
                    "found": False,
                    "alternatives": fuzzy_matches,
                    "quantity": quantity,
                    "status": "alternatives_available"
                })
                requires_validation = True
            else:
                # Aucun produit trouv√©
                results.append({
                    "original": product,
                    "found": False,
                    "alternatives": [],
                    "quantity": quantity,
                    "status": "not_found"
                })
        
        self._track_step_complete("product_search_progress", "Recherche termin√©e")
        
        if requires_validation:
            self._track_step_start("product_alternatives", "üîÑ Alternatives produits trouv√©es")
            self._track_step_start("product_validation", "‚è≥ S√©lection utilisateur requise")
            
            validation_data = {
                "products": results,
                "message": "S√©lectionnez les produits appropri√©s"
            }
            
            self.current_task.require_user_validation("product_validation", "product_selection", validation_data)
            
            await websocket_manager.send_user_interaction_required(self.task_id, {
                "type": "product_selection",
                "message": "Certains produits n√©cessitent votre attention",
                "data": validation_data
            })
            
            return {
                "found": False,
                "requires_validation": True,
                "validation_type": "product_selection",
                "results": results
            }
        else:
            # Tous les produits trouv√©s
            found_products = [r for r in results if r["found"]]
            self._track_step_complete("search_products", f"‚úÖ {len(found_products)} produit(s) trouv√©(s)")
            
            return {
                "found": True,
                "products": found_products
            }
    
    async def _find_product_alternatives(self, product: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Trouve des produits alternatifs avec avantages/inconv√©nients"""
        try:
            product_category = product.get("category", "")
            product_price = product.get("price", 0)
            
            # Simuler la recherche d'alternatives (en r√©alit√©, cela ferait appel √† SAP)
            alternatives = []
            
            # Exemple d'alternatives bas√©es sur la cat√©gorie
            if "Imprimante" in product.get("name", ""):
                alternatives = [
                    {
                        "code": "PROD001B",
                        "name": "Imprimante Laser Pro V2",
                        "price": product_price * 1.2,
                        "advantages": ["Vitesse d'impression sup√©rieure (+30%)", "Garantie √©tendue 3 ans"],
                        "disadvantages": ["Prix plus √©lev√©", "Consommation √©nerg√©tique sup√©rieure"],
                        "recommendation": "Recommand√© pour usage intensif"
                    },
                    {
                        "code": "PROD001C",
                        "name": "Imprimante Laser Eco",
                        "price": product_price * 0.8,
                        "advantages": ["Prix attractif", "Faible consommation", "Compact"],
                        "disadvantages": ["Vitesse r√©duite (-20%)", "Capacit√© papier limit√©e"],
                        "recommendation": "Id√©al pour usage occasionnel"
                    }
                ]
            
            return alternatives[:2]  # Limiter √† 2 alternatives
            
        except Exception as e:
            logger.error(f"Erreur lors de la recherche d'alternatives: {str(e)}")
            return []
    
    async def _handle_product_search(self, extracted_info: Dict[str, Any]) -> Dict[str, Any]:
        """
        G√®re les demandes de recherche de produits par caract√©ristiques
        """
        logger.info("üîç Traitement demande de recherche produit")
        
        search_criteria = extracted_info.get("search_criteria", {})
        if not search_criteria:
            return {
                "success": False,
                "message": "Crit√®res de recherche non sp√©cifi√©s",
                "action_type": "RECHERCHE_PRODUIT",
                "suggestion": "Exemple: 'Je cherche une imprimante laser recto-verso r√©seau 50 ppm'"
            }
        
        # Utiliser le moteur de recherche
        search_engine = ProductSearchEngine()
        
        results = await search_engine.search_products_by_characteristics(search_criteria)
        
        if results.get("success"):
            return {
                "success": True,
                "action_type": "RECHERCHE_PRODUIT",
                "message": f"üéØ {results['total_found']} produit(s) trouv√©(s)",
                "search_criteria": search_criteria,
                "products": results["matched_products"],
                "quick_actions": [
                    {
                        "action": "create_quote",
                        "label": "üìã Cr√©er un devis",
                        "type": "primary",
                        "description": "Cr√©er un devis avec un de ces produits"
                    },
                    {
                        "action": "refine_search",
                        "label": "üîç Affiner la recherche",
                        "type": "secondary", 
                        "description": "Pr√©ciser les crit√®res"
                    }
                ]
            }
        else:
            return {
                "success": False,
                "action_type": "RECHERCHE_PRODUIT",
                "message": "‚ùå Aucun produit trouv√© avec ces crit√®res",
                "error": results.get("error"),
                "search_criteria": search_criteria,
                "suggestions": [
                    "Essayez des termes plus g√©n√©raux",
                    "V√©rifiez l'orthographe des caract√©ristiques",
                    "Contactez le support pour des produits sp√©cifiques"
                ]
            }

    async def _handle_client_info(self, extracted_info: Dict[str, Any]) -> Dict[str, Any]:
        """
        G√®re les demandes d'information client
        """
        logger.info("üë§ Traitement demande d'information client")
        
        client_name = extracted_info.get("client")
        if not client_name:
            return {
                "success": False,
                "action_type": "INFO_CLIENT",
                "message": "Nom du client non sp√©cifi√©",
                "suggestion": "Exemple: 'Informations sur le client Edge Communications'"
            }
        
        # Rechercher le client dans Salesforce
        client_info = await self._validate_client(client_name)
        
        if client_info.get("found"):
            client_data = client_info["data"]
            return {
                "success": True,
                "action_type": "INFO_CLIENT",
                "message": f"‚ÑπÔ∏è Informations pour {client_data.get('Name')}",
                "client": {
                    "name": client_data.get("Name"),
                    "account_number": client_data.get("AccountNumber"),
                    "phone": client_data.get("Phone"),
                    "email": client_data.get("Email"),
                    "address": f"{client_data.get('BillingStreet', '')} {client_data.get('BillingCity', '')}",
                    "salesforce_id": client_data.get("Id")
                },
                "quick_actions": [
                    {
                        "action": "create_quote_for_client",
                        "label": "üìã Cr√©er un devis",
                        "type": "primary",
                        "description": f"Nouveau devis pour {client_data.get('Name')}"
                    }
                ]
            }
        else:
            return {
                "success": False,
                "action_type": "INFO_CLIENT",
                "message": f"‚ùå Client '{client_name}' non trouv√©",
                "suggestions": client_info.get("suggestions", []),
                "quick_actions": [
                    {
                        "action": "create_client",
                        "label": "‚ûï Cr√©er ce client",
                        "type": "secondary",
                        "description": f"Ajouter '{client_name}' comme nouveau client"
                    }
                ]
            }

    async def _handle_stock_consultation(self, extracted_info: Dict[str, Any]) -> Dict[str, Any]:
        """
        G√®re les demandes de consultation de stock
        """
        logger.info("üì¶ Traitement demande de consultation stock")
        
        # √Ä impl√©menter selon vos besoins
        return {
            "success": True,
            "action_type": "CONSULTATION_STOCK",
            "message": "üöß Fonction en cours de d√©veloppement",
            "suggestion": "Utilisez la recherche de produits pour voir les stocks"
        }

    async def _handle_other_request(self, extracted_info: Dict[str, Any]) -> Dict[str, Any]:
        """
        G√®re les autres types de demandes
        """
        logger.info("‚ùì Traitement autre demande")
        
        return {
            "success": False,
            "action_type": "AUTRE",
            "message": "ü§î Je n'ai pas compris votre demande",
            "extracted_info": extracted_info,
            "suggestions": [
                "G√©n√©rer un devis: 'faire un devis pour [client] avec [produits]'",
                "Rechercher un produit: 'je cherche une imprimante laser recto-verso'",
                "Consulter un client: 'informations sur le client [nom]'"
            ]
        }
    
    async def handle_client_suggestions(self, choice: Dict, workflow_context: Dict) -> Dict:
        """
        üîß GESTION COMPL√àTE DES SUGGESTIONS CLIENT
        """
        choice_type = choice.get("type")
        
        if choice_type == "use_suggestion":
            # Client s√©lectionn√© depuis les suggestions
            suggested_client = choice.get("client_data")
            client_name = suggested_client.get("name") or suggested_client.get("Name")
            
            logger.info(f"‚úÖ Client s√©lectionn√©: {client_name}")
            
            # üîß MISE √Ä JOUR DU CONTEXTE ET CONTINUATION
            self.context.update({
                "client_info": {"data": suggested_client, "found": True},
                "client_validated": True
            })
            
            # Extraire les produits du contexte original
            original_products = workflow_context.get("extracted_info", {}).get("products", [])
            
            # üîß CONTINUATION DIRECTE DU WORKFLOW
            if original_products:
                # Passer √† l'√©tape suivante : r√©cup√©ration produits
                return await self._get_products_info(original_products)
            else:
                # Demander les produits si manquants
                return self._build_product_request_response(client_name)
        
        elif choice_type == "create_new":
            # üîß D√âCLENCHER CR√âATION CLIENT PUIS CONTINUER
            new_client_name = choice.get("client_name", "")
            return await self._handle_new_client_creation(new_client_name, workflow_context)
        
        else:
            return self._build_error_response("Choix non support√©", f"Type '{choice_type}' non reconnu")

    async def _handle_new_client_creation(self, client_name: str, workflow_context: Dict) -> Dict:
        """
        üîß CR√âATION CLIENT PUIS CONTINUATION WORKFLOW
        """
        # Validation et cr√©ation du client
        validation_result = await self.client_validator.validate_and_enrich_client(client_name)
        
        if validation_result.get("can_create"):
            # Cr√©er dans Salesforce puis SAP
            sf_client = await self._create_salesforce_client(validation_result)
            sap_client = await self._create_sap_client_from_validation(validation_result, sf_client)
            
            # Mettre √† jour le contexte
            self.context.update({
                "client_info": {"data": sf_client, "found": True},
                "client_validated": True
            })
            
            # üîß CONTINUER AVEC LES PRODUITS
            original_products = workflow_context.get("extracted_info", {}).get("products", [])
            if original_products:
                return await self._get_products_info(original_products)
            else:
                return self._build_product_request_response(sf_client.get("Name", client_name))
        
        else:
            return self._build_error_response("Impossible de cr√©er le client", validation_result.get("error", ""))
    
    async def _continue_workflow_after_client_selection(self, client_data: Dict, original_context: Dict) -> Dict:
        """
        üîß CONTINUATION AUTOMATIQUE DU WORKFLOW APR√àS S√âLECTION CLIENT
        """
        logger.info("üîÑ Continuation du workflow avec client s√©lectionn√©")
        
        # Mettre √† jour le contexte avec le client valid√©
        self.context["client_info"] = {"data": client_data, "found": True}
        self.context["client_validated"] = True
        
        # R√©cup√©rer les produits de la demande originale
        original_products = original_context.get("extracted_info", {}).get("products", [])
        
        if original_products:
            # Passer directement √† la r√©cup√©ration des produits
            self._track_step_start("get_products_info", "üîç R√©cup√©ration des informations produits")
            return await self._get_products_info(original_products)
        else:
            # Si pas de produits, demander √† l'utilisateur
            return self._build_product_selection_interface(client_data.get("Name", ""))

    # üÜï M√âTHODES AUXILIAIRES POUR LA VALIDATION S√âQUENTIELLE

    async def _initiate_client_creation(self, client_name: str) -> Dict[str, Any]:
        """Initie le processus de cr√©ation d'un nouveau client"""
        return {
            "status": "user_interaction_required",
            "interaction_type": "client_creation",
            "message": f"Le client '{client_name}' n'existe pas. Voulez-vous le cr√©er ?",
            "question": "Cr√©er un nouveau client ?",
            "options": [
                {"value": "create_client", "label": "Oui, cr√©er le client"},
                {"value": "retry_client", "label": "Non, saisir un autre nom"}
            ],
            "input_type": "choice",
            "context": {"client_name": client_name}
        }

    async def _continue_product_validation(self, products: List[Dict]) -> Dict[str, Any]:
        """Continue la validation avec les produits"""
        try:
            # Utiliser le validateur s√©quentiel pour valider les produits
            extracted_info = {"products": products}
            validation_result = await self.sequential_validator.validate_quote_request(extracted_info)

            if validation_result["status"] == "ready":
                return await self._continue_quote_generation(validation_result["data"])
            else:
                return validation_result

        except Exception as e:
            logger.exception(f"Erreur validation produits: {str(e)}")
            return self._build_error_response("Erreur validation produits", str(e))

    async def _continue_product_resolution(self, validated_products: List[Dict], remaining_products: List[Dict]) -> Dict[str, Any]:
        """Continue la r√©solution des produits restants"""
        try:
            # Traiter le prochain produit non r√©solu
            next_product = remaining_products[0]

            return {
                "status": "user_interaction_required",
                "interaction_type": "product_selection",
                "message": f"S√©lectionnez le produit pour '{next_product.get('original_request', '')}'",
                "question": "Quel produit souhaitez-vous ?",
                "options": next_product.get("suggestions", []),
                "input_type": "product_choice",
                "context": {
                    "validation_context": {
                        "validated_products": validated_products,
                        "unresolved_products": remaining_products
                    }
                }
            }

        except Exception as e:
            logger.exception(f"Erreur r√©solution produits: {str(e)}")
            return self._build_error_response("Erreur r√©solution produits", str(e))

    async def _continue_quantity_validation(self, validated_products: List[Dict]) -> Dict[str, Any]:
        """Continue avec la validation des quantit√©s"""
        try:
            # V√©rifier la disponibilit√© des stocks
            final_products = []
            stock_issues = []

            for product in validated_products:
                product_data = product.get("product_data", {})
                requested_qty = product.get("requested_quantity", 1)
                available_stock = product_data.get("Stock", 0)

                if available_stock >= requested_qty:
                    final_products.append({
                        **product_data,
                        "RequestedQuantity": requested_qty,
                        "LineTotal": product_data.get("Price", 0) * requested_qty
                    })
                else:
                    stock_issues.append({
                        "product": product_data.get("Name", "Produit inconnu"),
                        "requested": requested_qty,
                        "available": available_stock
                    })

            if stock_issues:
                return {
                    "status": "user_interaction_required",
                    "interaction_type": "quantity_adjustment",
                    "message": "Probl√®mes de stock d√©tect√©s",
                    "question": "Comment souhaitez-vous proc√©der ?",
                    "stock_issues": stock_issues,
                    "options": [
                        {"value": "proceed", "label": "Continuer avec les quantit√©s disponibles"},
                        {"value": "modify", "label": "Modifier les quantit√©s"},
                        {"value": "cancel", "label": "Annuler la demande"}
                    ],
                    "input_type": "choice",
                    "context": {"final_products": final_products}
                }
            else:
                # Pas de probl√®me de stock, continuer
                return await self._continue_quote_generation({"products": final_products})

        except Exception as e:
            logger.exception(f"Erreur validation quantit√©s: {str(e)}")
            return self._build_error_response("Erreur validation quantit√©s", str(e))

    # üîß NOUVELLES ROUTES FASTAPI OPTIMIS√âES

    # Cr√©er un routeur pour les nouvelles routes
    router_v2 = APIRouter()

    @router_v2.post("/generate_quote_v2")  # Nouvelle version optimis√©e
    async def generate_quote_optimized(request: dict):
        """
        Route optimis√©e avec validation s√©quentielle et cache
        """

        try:
            user_prompt = request.get("prompt", "").strip()
            draft_mode = request.get("draft_mode", False)

            if not user_prompt:
                raise HTTPException(status_code=400, detail="Prompt requis")

            # Initialiser le workflow optimis√©
            workflow = DevisWorkflow(validation_enabled=True, draft_mode=draft_mode)

            # Lancer le processus
            result = await workflow.process_quote_request(user_prompt, draft_mode)

            return {
                "success": True,
                "data": result,
                "performance": {
                    "cache_stats": await workflow.cache_manager.get_cache_stats(),
                    "timestamp": datetime.now().isoformat()
                }
            }

        except Exception as e:
            logger.exception(f"Erreur route generate_quote_v2: {str(e)}")
            raise HTTPException(status_code=500, detail=str(e))

    @router_v2.post("/continue_quote")
    async def continue_quote_after_interaction(request: dict):
        """
        Continue le workflow apr√®s interaction utilisateur
        """
        try:
            task_id = request.get("task_id")
            user_input = request.get("user_input", {})
            context = request.get("context", {})

            if not task_id:
                raise HTTPException(status_code=400, detail="task_id requis")

            # R√©cup√©rer l'instance workflow depuis le cache
            workflow_data = await cache_manager.get_workflow_state(task_id)
            if not workflow_data:
                raise HTTPException(status_code=404, detail="Workflow expir√©")

            # Recr√©er l'instance et restaurer le contexte
            workflow = DevisWorkflow()
            workflow.task_id = task_id
            workflow.context = workflow_data.get("context", {})

            # Continuer le workflow avec le contexte restaur√©
            result = await workflow.continue_after_user_input(user_input, workflow.context)

            # Sauvegarder l'√©tat mis √† jour
            await cache_manager.save_workflow_state(task_id, {
                "context": workflow.context,
                "last_update": datetime.now().isoformat()
            })

            return {"success": True, "data": result}

        except HTTPException:
            # R√©√©lever les erreurs HTTP
            raise
        except Exception as e:
            logger.exception(f"Erreur continue_quote: {e}")
            raise HTTPException(status_code=500, detail="Erreur interne")

    async def _process_quote_workflow(self, extracted_info: Dict[str, Any]) -> Dict[str, Any]:
        """
        üîß REFONTE : Workflow de devis avec gestion d'interruption client et statuts critiques
        """
        try:
            client_name = extracted_info.get("client", "")
            products = extracted_info.get("products", [])

            # √âtape 1 : recherche/validation du client
            self._track_step_start("search_client", f"üë§ Recherche du client : {client_name}")
            client_result = await self._process_client_validation(client_name)

            # üîß CORRECTION CRITIQUE: V√©rifier si interaction utilisateur requise
            if client_result.get("status") in ["user_interaction_required", "client_selection_required"]:
                # Marquer la t√¢che comme en attente d'interaction
                if self.current_task:
                    self.current_task.status = TaskStatus.PENDING
                    self.current_task.require_user_validation("client_selection", "client_selection", client_result)
                logger.info("‚è∏Ô∏è Workflow interrompu - Interaction utilisateur requise pour s√©lection client")
                # üîß CORRECTION CRITIQUE: Envoyer interaction via WebSocket avec debug am√©lior√©
                interaction_data = client_result.get("interaction_data", client_result)

                # Debug des donn√©es
                if not interaction_data.get("client_options"):
                    logger.error("‚ùå ERREUR: Pas de client_options dans interaction_data")
                    logger.error(f"‚ùå Structure re√ßue: {json.dumps(interaction_data, indent=2, default=str)}")
                else:
                    logger.info(f"‚úÖ {len(interaction_data.get('client_options', []))} clients pr√™ts pour s√©lection")
                    for i, client in enumerate(interaction_data.get('client_options', [])):
                        logger.info(f"Client {i+1}: {client.get('name')} ({client.get('source')}) - ID: {client.get('id')}")

                logger.info(f"üì® Envoi WebSocket pour t√¢che {self.task_id}")
                await websocket_manager.send_user_interaction_required(self.task_id, interaction_data)
                logger.info(f"‚è∏Ô∏è T√¢che {self.task_id} en attente d'interaction utilisateur")
                return client_result
            # üîß NOUVEAU: V√©rifier autres statuts qui n√©cessitent un arr√™t
            if client_result.get("status") in ["error", "cancelled"]:
                logger.warning(f"‚ùå Workflow interrompu - Statut client : {client_result.get('status')}")
                return client_result

            self._track_step_complete("search_client", f"‚úÖ Client : {client_result.get('status')}")

            # √âtape 2 : r√©cup√©ration des produits
            self._track_step_start("lookup_products", f"üì¶ Recherche de {len(products)} produit(s)")
            products_result = await self._process_products_retrieval(products)
            found = len(products_result.get("products", []))
            self._track_step_complete("lookup_products", f"‚úÖ {found} produit(s) trouv√©(s)")

            # √âtape 3 : cr√©ation du devis
            self._track_step_start("prepare_quote", "üìã Pr√©paration du devis")
            quote_result = await self._create_quote_document(client_result, products_result)
            if not isinstance(quote_result, dict):
                logger.error("‚ùå _create_quote_document a retourn√© un r√©sultat invalide")
                quote_result = {"status": "error", "quote_data": {}}

            # Extraction s√©curis√©e de quote_data
            quote_data = quote_result.get("quote_data") or {}
            returned_products = quote_data.get("products") or products_result.get("products", [])
            if not returned_products:
                logger.warning("‚ùå Aucun produit valide pour le devis")
                return {"success": False, "error": "Aucun produit valide trouv√©"}

            # √âtape 4 : synchronisation dans les syst√®mes externes
            # üîß FACTORISATION : un seul appel pour SAP et Salesforce
            self._track_step_start("sync_external_systems", "üíæ Synchronisation SAP & Salesforce")
            sync_results = {}
            for system in ("sap", "salesforce"):
                key = f"sync_to_{system}"
                self._track_step_start(key, f"{'üíæ' if system=='sap' else '‚òÅÔ∏è'} Enregistrement dans {system.upper()}")
                result = await self._sync_quote_to_systems(quote_result, target=system)
                self._track_step_complete(key, f"‚úÖ {system.upper()} mis √† jour")
                sync_results[system] = result

            # Calcul du montant total
            total_amount = sum(p.get("total_price", 0) for p in returned_products)

            # R√©sultat final
            return {
                "success": True,
                "status": quote_result.get("status", "success"),
                "type": "quote_generated",
                "message": "‚úÖ Devis g√©n√©r√© avec succ√®s !",
                "task_id": self.task_id,
                "workflow_steps": self.workflow_steps,
                "quote_id": quote_data.get("quote_id", ""),
                "client": quote_data.get("client", client_result.get("client_data", {})),
                "products": returned_products,
                "total_amount": total_amount,
                "currency": quote_data.get("currency", "EUR"),
                "quote_data": quote_data,
                "client_result": client_result,
                "products_result": products_result,
                "sync_results": sync_results,
            }

        except Exception as e:
            logger.error(f"‚ùå Erreur workflow devis : {e}", exc_info=True)
            raise



    async def _process_other_action(self, extracted_info: Dict[str, Any]) -> Dict[str, Any]:
        """
        üîß MODIFICATION : Traitement des autres types d'actions
        """
        action_type = extracted_info.get("action_type", "UNKNOWN")

        return {
            "status": "success",
            "type": "other_action",
            "message": f"Action {action_type} trait√©e",
            "data": extracted_info
        }

    # üîß NOUVELLE M√âTHODE : Version publique pour les tests
    async def test_connections(self) -> bool:
        """
        üîß NOUVELLE M√âTHODE : Version publique de _check_connections pour les tests
        """
        return await self._check_connections()

    async def _check_connections(self) -> bool:
        """
        üîß MODIFICATION CRITIQUE : V√©rifier les connexions avec progression avanc√©e
        """
        try:
            self._track_step_progress("validate_input", 10, "üîç Initialisation des tests...")

            # Ex√©cuter les tests de connexion avec progression int√©gr√©e
            connection_results = await test_mcp_connections_with_progress()

            # Analyser les r√©sultats
            overall_status = connection_results.get("overall_status", "unknown")
            connections = connection_results.get("connections", {})

            sf_connected = connections.get("salesforce", {}).get("connected", False)
            sap_connected = connections.get("sap", {}).get("connected", False)

            # D√©terminer le message de statut
            if overall_status == "all_connected":
                status_msg = "‚úÖ Toutes les connexions valid√©es"
                connections_ok = True
            elif overall_status == "partial_connection":
                status_msg = f"‚ö†Ô∏è Connexions partielles (SF: {'‚úÖ' if sf_connected else '‚ùå'}, SAP: {'‚úÖ' if sap_connected else '‚ùå'})"
                connections_ok = self.force_production  # Continuer si mode production forc√©
            else:
                status_msg = "‚ùå Aucune connexion disponible"
                connections_ok = False

            self._track_step_progress("validate_input", 100, status_msg)

            # Log d√©taill√©
            logger.info(f"üîß Test connexions termin√© - Statut: {overall_status}")
            logger.info(f"üîß SF: {sf_connected}, SAP: {sap_connected}, Force Production: {self.force_production}")

            # En mode production forc√©, continuer m√™me avec des connexions partielles
            if self.force_production and not connections_ok:
                logger.warning("üî• MODE PRODUCTION FORC√â - Continuation malgr√© les erreurs de connexion")
                connections_ok = True
                self._track_step_progress("validate_input", 100, "üî• Mode production forc√© - Continuation")

            return connections_ok

        except Exception as e:
            logger.error(f"‚ùå Erreur v√©rification connexions: {str(e)}")
            self._track_step_progress("validate_input", 100, f"‚ùå Erreur: {str(e)}")

            # En mode production forc√©, continuer m√™me en cas d'erreur
            if self.force_production:
                logger.warning("üî• MODE PRODUCTION FORC√â - Continuation malgr√© l'erreur")
                return True

            return False
    
    async def _search_client_with_validation(self, client_name: str) -> Dict[str, Any]:
        """Recherche client avec gestion des alternatives et validation"""
        
        # √âtape 1: Recherche directe
        self._track_step_start("search_client", f"üîç Recherche du client '{client_name}'")
        
        # NOUVEAU: Utiliser find_client_everywhere pour recherche exhaustive
        self._track_step_progress("search_client", 30, "Recherche exhaustive dans toutes les bases...")
        client_search_result = await find_client_everywhere(client_name)
        
        self._track_step_complete("client_search_progress", "Bases de donn√©es consult√©es")
        
        # NOUVEAU: Analyser les r√©sultats de find_client_everywhere
        total_found = client_search_result.get("total_found", 0)
        logger.info(f"üîç Recherche exhaustive termin√©e: {total_found} client(s) trouv√©(s)")
        
        if total_found > 0:
            # CLIENT(S) TROUV√â(S) - Proposer s√©lection utilisateur
            self._track_step_complete("search_client", f"‚úÖ {total_found} client(s) trouv√©(s) pour '{client_name}'")
            return await self._propose_existing_clients_selection(client_name, client_search_result)

        else:
            # AUCUN CLIENT TROUV√â - V√©rifier une derni√®re fois avant cr√©ation
            logger.info(f"‚ùå Aucun client trouv√© pour '{client_name}' - Proposition de cr√©ation")
            self._track_step_start("client_alternatives", "‚ùå Aucun client trouv√©")
            
            # Rechercher des informations INSEE/Pappers
            enrichment_data = await self._search_company_info(client_name)
            
            self._track_step_start("client_validation", "‚è≥ Cr√©ation de client requise")
            
            validation_data = {
                "client_name": client_name,
                "enrichment_data": enrichment_data,
                "options": [
                    {"id": "create_new", "label": "Cr√©er ce nouveau client"},
                    {"id": "retry_search", "label": "Rechercher avec un autre nom"}
                ]
            }
            
            self.current_task.require_user_validation("client_validation", "client_creation", validation_data)
            
            # D√âSACTIV√â - Retour synchrone utilis√©
            # await websocket_manager.send_user_interaction_required(
            #     self.task_id, 
            #     selection_result
            # )
            
            return {
                "found": False,
                "requires_validation": True,
                "validation_type": "client_creation",
                "enrichment_data": enrichment_data
            }
    def _sanitize_soql_string(self, value: str) -> str:
        return value.replace("'", "\\'")
    

    async def _propose_existing_clients_selection(self, client_name: str, search_results: Dict[str, Any]) -> Dict[str, Any]:
        """Propose la s√©lection du client avec interface utilisateur - AM√âLIOR√â"""
        try:
            option_id = 1
            client_options: List[Dict[str, Any]] = []   
            
            # Utiliser les clients d√©dupliqu√©s pour √©viter les doublons
            deduplicated_clients = search_results.get("deduplicated_clients", [])
            logger.info(f"üîß Traitement de {len(deduplicated_clients)} clients d√©dupliqu√©s")
            
            for client in deduplicated_clients:
                if not client:
                    continue
                    
                source = client.get("source", "unknown")
                
                # D√©terminer le nom et les IDs selon la source
                if source == "both":
                    # Client pr√©sent dans les deux syst√®mes
                    name = client.get("Name") or client.get("CardName", f"Client {option_id}")
                    source_display = "Salesforce & SAP"
                    sf_id = client.get("Id", "N/A")
                    sap_data = client.get("sap_data", {})
                    sap_code = sap_data.get("CardCode", "N/A")
                    
                    # Fusionner les d√©tails des deux syst√®mes
                    details = {
                        "sf_id": sf_id,
                        "sap_code": sap_code,
                        "phone": client.get("Phone") or sap_data.get("Phone1", "N/A"),
                        "address": sap_data.get("BillToStreet", "N/A"),
                        "city": sap_data.get("City", client.get("BillingCity", "N/A")),
                        "siret": sap_data.get("FederalTaxID", "N/A"),
                        "industry": client.get("Industry", "N/A")
                    }
                    
                elif source == "salesforce":
                    name = client.get("Name", f"Client SF {option_id}")
                    source_display = "Salesforce"
                    details = {
                        "sf_id": client.get("Id", "N/A"),
                        "phone": client.get("Phone", "N/A"),
                        "address": client.get("BillingStreet", "N/A"),
                        "city": client.get("BillingCity", "N/A"),
                        "industry": client.get("Industry", "N/A"),
                        "siret": "Non disponible en Salesforce"
                    }
                    
                else:  # source == "sap"
                    name = client.get("CardName", f"Client SAP {option_id}")
                    source_display = "SAP"
                    details = {
                        "sap_code": client.get("CardCode", "N/A"),
                        "phone": client.get("Phone1", "N/A"),
                        "address": client.get("BillToStreet", "N/A"),
                        "city": client.get("City", "N/A"),
                        "siret": client.get("FederalTaxID", "N/A"),
                        "country": client.get("Country", "FR")
                    }
                
                # Format dense pour l'affichage
                display_info = []
                if details.get("city") and details["city"] != "N/A":
                    display_info.append(details["city"])
                if details.get("siret") and details["siret"] != "N/A" and "Non disponible" not in details["siret"]:
                    display_info.append(f"SIRET: {details['siret']}")
                if details.get("phone") and details["phone"] != "N/A":
                    display_info.append(f"T√©l: {details['phone']}")
                    
                display_detail = " | ".join(display_info) if display_info else "Informations limit√©es"
                
                client_options.append({
                    "id": option_id,
                    "name": name,
                    "source": source_display,
                    "source_raw": source,
                    "display_detail": display_detail,
                    "sf_id": details.get("sf_id"),
                    "sap_code": details.get("sap_code"), 
                    "details": details
                })
                
                option_id += 1     
                # V√©rifier qu'on a des clients √† proposer
                if not client_options:
                    return {
                        "status": "client_not_found",
                        "requires_user_selection": False,
                        "message": f"Client '{client_name}' introuvable."
                    }
                validation_data = {
                    "options": client_options,
                    "clients": client_options,
                    "client_options": client_options,
                    "total_options": len(client_options),
                    "original_client_name": client_name,
                    "allow_create_new": True,
                    "interaction_type": "client_selection"
                }

                self.current_task.require_user_validation("client_selection", "client_selection", validation_data)
                logger.info(f"üîç DEBUG WORKFLOW: selection_result = {json.dumps({'status': 'user_interaction_required', 'client_options_count': len(client_options)}, indent=2, default=str)}")
                logger.info(f"üîç DEBUG WORKFLOW: interaction_data pr√©sent = {'interaction_data' in locals()}")
                return {
                    "status": "user_interaction_required",
                    "requires_user_selection": True,
                    "validation_pending": True,
                    "task_id": self.task_id,
                    "message": f"S√©lection client requise - {len(client_options)} options disponibles",
                    "interaction_type": "client_selection",
                    "interaction_data": {
                        "type": "client_selection",
                        "interaction_type": "client_selection",
                        "options": client_options,
                        "clients": client_options,
                        "client_options": client_options,
                        "total_options": len(client_options),
                        "original_client_name": client_name,
                        "allow_create_new": True,
                        "message": f"S√©lection client requise - {len(client_options)} options disponibles"
                    },
                    "client_options": client_options,
                    "total_options": len(client_options),
                    "original_client_name": client_name,
                    "allow_create_new": True
                }


        except Exception as e:
            logger.error(f"‚ùå Erreur proposition s√©lection clients: {e}")
            return {"status": "error", "found": False, "error": str(e)}



    async def _create_client_automatically(self, client_name: str) -> Dict[str, Any]:
        """
        üÜï NOUVELLE M√âTHODE : Cr√©ation automatique du client dans SAP et Salesforce
        Bas√©e sur l'exemple "rondot" des logs
        """
        try:
            # V√©rifier si d√©j√† en cours de cr√©ation
            creation_key = f"creating_client_{client_name.lower().strip()}"
            if hasattr(self, '_creation_locks') and creation_key in self._creation_locks:
                logger.warning(f"‚ö†Ô∏è Cr√©ation client {client_name} d√©j√† en cours")
                return {"created": False, "error": "Cr√©ation d√©j√† en cours"}
            
            # Verrouiller la cr√©ation
            if not hasattr(self, '_creation_locks'):
                self._creation_locks = set()
            self._creation_locks.add(creation_key)
            
            try:
                logger.info(f"üöÄ D√©but cr√©ation automatique client: {client_name}")


                # 1. G√©n√©ration CardCode unique (√©viter les doublons)
                clean_name = re.sub(r'[^a-zA-Z0-9]', '', client_name)[:6].upper()
                timestamp = str(int(time.time()))[-4:]
                card_code = f"C{clean_name}{timestamp}"

                # 2. Donn√©es client pour SAP
                sap_client_data = {
                    "CardCode": card_code,
                    "CardName": client_name.title(),  # "rondot" -> "Rondot"
                    "CardType": "cCustomer",
                    "GroupCode": 100,  # Groupe client par d√©faut
                    "Currency": "EUR",
                    "Valid": "tYES",
                    "Frozen": "tNO",
                    "Notes": f"Client cr√©√© automatiquement par NOVA le {datetime.now().strftime('%d/%m/%Y')}"
                }

                logger.info(f"üìù Donn√©es SAP pr√©par√©es: {card_code} - {client_name.title()}")

                # 3. Cr√©ation dans SAP d'abord
                self._track_step_progress("search_client", 30, f"Cr√©ation client SAP {card_code}...")
                
                sap_result = await self.mcp_connector.call_mcp(
                    "sap_mcp",
                    "sap_create_customer_complete",
                    {"customer_data": sap_client_data}
                )

                if not sap_result.get("success", False):
                    logger.error(f"‚ùå √âchec cr√©ation SAP: {sap_result.get('error')}")
                    return {
                        "created": False,
                        "error": f"Erreur SAP: {sap_result.get('error', 'Erreur inconnue')}"
                    }

                logger.info(f"‚úÖ Client SAP cr√©√©: {card_code}")

                # 4. Cr√©ation dans Salesforce ensuite
                self._track_step_progress("search_client", 60, f"Cr√©ation client Salesforce...")
                
                sf_client_data = {
                    "Name": client_name.title(),
                    "AccountNumber": card_code,
                    "Type": "Customer",
                    "Industry": "Technology",
                    "BillingCountry": "France",
                    "Description": f"Client cr√©√© automatiquement depuis SAP ({card_code})"
                }

                sf_result = await self.mcp_connector.call_mcp(
                    "salesforce_mcp",
                    "salesforce_create_record",
                    {
                        "sobject": "Account",
                        "data": sf_client_data
                    }
                )

                if sf_result.get("success"):
                    logger.info(f"‚úÖ Client Salesforce cr√©√©: {sf_result.get('id')}")
                    
                    # Construire les donn√©es client pour le workflow
                    client_data = {
                        "Id": sf_result.get("id"),
                        "Name": client_name.title(),
                        "AccountNumber": card_code,
                        "Type": "Customer"
                    }

                    return {
                        "created": True,
                        "client_data": client_data,
                        "sap_card_code": card_code,
                        "salesforce_id": sf_result.get("id"),
                        "message": f"Client '{client_name}' cr√©√© avec succ√®s (SAP: {card_code}, SF: {sf_result.get('id')[:8]}...)"
                    }
                else:
                    logger.warning(f"‚ö†Ô∏è Client SAP cr√©√© mais √©chec Salesforce: {sf_result.get('error')}")
                    
                    # Retourner quand m√™me le client SAP
                    client_data = {
                        "Id": f"SAP_{card_code}",  # ID temporaire
                        "Name": client_name.title(),
                        "AccountNumber": card_code,
                        "Type": "Customer"
                    }

                    return {
                        "created": True,
                        "client_data": client_data,
                        "sap_card_code": card_code,
                        "salesforce_error": sf_result.get("error"),
                        "message": f"Client '{client_name}' cr√©√© dans SAP uniquement (CardCode: {card_code})"
                    }
            except Exception as e:
                logger.exception(f"‚ùå Exception lors de la cr√©ation automatique du client: {e}")
                return {
                    "created": False,
                    "error": f"Exception: {str(e)}"
                }
            finally:
                # Lib√©rer le verrou
                if hasattr(self, '_creation_locks') and creation_key in self._creation_locks:
                    self._creation_locks.remove(creation_key)

        except Exception as e:
            logger.exception(f"‚ùå Exception cr√©ation automatique client (global): {str(e)}")
            return {
                "created": False,
                "error": f"Exception globale: {str(e)}"
            }


    async def _process_client_validation(self, client_name: str) -> Dict[str, Any]:
        """
        Validation compl√®te du client avec recherche Salesforce, fallback SAP et enrichissement.
        üîß CORRIG√â: D√©tection et arr√™t pour interaction utilisateur
        """
        if not client_name or not client_name.strip():
            return {
                "status": "error",
                "data": None,
                "message": "Nom de client vide"
            }

        try:
            safe_client_name = self._sanitize_soql_string(client_name)
            logger.info(f"üîç Recherche approfondie du client: {client_name}")
            
            # Utiliser find_client_everywhere pour recherche exhaustive
            comprehensive_search = await find_client_everywhere(client_name)
            total_found = comprehensive_search.get("total_found", 0)
            
            if total_found > 0:
                logger.info(f"‚úÖ {total_found} client(s) existant(s) trouv√©(s) pour '{client_name}'")
                
                # üîß CORRECTION CRITIQUE: D√©tecter l'interaction utilisateur requise
                selection_result = await self._propose_existing_clients_selection(client_name, comprehensive_search)
                
                
                # Si pas d'interaction requise, continuer normalement
                return selection_result
            # === √âTAPE 1: RECHERCHE EXACTE ===
            exact_query = f"""
                SELECT Id, Name, AccountNumber, Phone, BillingCity, BillingCountry 
                FROM Account 
                WHERE Name = '{safe_client_name}' 
                LIMIT 1
            """
            self._track_step_progress("search_client", 10, f"üîç Recherche exacte de '{client_name}'")
            exact_result = await self.mcp_connector.call_mcp("salesforce_mcp", "salesforce_query", {"query": exact_query})

            if exact_result.get("success") and exact_result.get("totalSize", 0) > 0:
                client_data = exact_result["records"][0]
                logger.info(f"‚úÖ Client trouv√© (exact): {client_data['Name']}")
                return {
                    "status": "found",
                    "data": client_data,
                    "message": f"Client trouv√© dans Salesforce (exact)",
                    "source": "salesforce_exact"
                }

            # === √âTAPE 2: INSENSIBLE √Ä LA CASSE ===
            ci_query = f"""
                SELECT Id, Name, AccountNumber, Phone, BillingCity, BillingCountry 
                FROM Account 
                WHERE UPPER(Name) = UPPER('{safe_client_name}') 
                LIMIT 5
            """
            self._track_step_progress("search_client", 20, "üîç Recherche insensible √† la casse")
            ci_result = await self.mcp_connector.call_mcp("salesforce_mcp", "salesforce_query", {"query": ci_query})

            if ci_result.get("success") and ci_result.get("totalSize", 0) > 0:
                for record in ci_result["records"]:
                    if record["Name"].upper() == client_name.upper():
                        logger.info(f"‚úÖ Client trouv√© (insensible √† la casse): {record['Name']}")
                        return {
                            "status": "found",
                            "data": record,
                            "message": f"Client trouv√© (insensible √† la casse)",
                            "source": "salesforce_case_insensitive"
                        }

            # === √âTAPE 3: RECHERCHE FLOUE ===
            fuzzy_query = f"""
                SELECT Id, Name, AccountNumber, Phone, BillingCity, BillingCountry 
                FROM Account 
                WHERE Name LIKE '%{safe_client_name}%' 
                LIMIT 10
            """
            self._track_step_progress("search_client", 40, "üîç Recherche floue dans Salesforce")
            fuzzy_result = await self.mcp_connector.call_mcp("salesforce_mcp", "salesforce_query", {"query": fuzzy_query})

            if fuzzy_result.get("success") and fuzzy_result.get("totalSize", 0) > 0:
                suggestions = fuzzy_result["records"]
                logger.info(f"üîç {len(suggestions)} suggestions trouv√©es pour '{client_name}'")
                return {
                    "status": "not_found",
                    "suggestions_available": True,
                    "suggestions": suggestions,
                    "message": f"{len(suggestions)} clients similaires trouv√©s dans Salesforce"
                }

            # === √âTAPE 4: RECHERCHE DANS SAP ===
            self._track_step_progress("search_client", 60, "üîç Recherche dans SAP")
            sap_result = await self.mcp_connector.call_mcp("sap_mcp", "sap_search", {
                "query": client_name,
                "entity_type": "BusinessPartners",
                "limit": 5
            })

            if sap_result.get("success") and sap_result.get("count", 0) > 0:
                for sap_client in sap_result.get("results", []):
                    if sap_client.get("CardName", "").upper() == client_name.upper():
                        logger.info(f"‚úÖ Client trouv√© dans SAP: {sap_client['CardName']}")
                        sf_creation = await self._create_salesforce_from_sap(sap_client)
                        if sf_creation.get("success"):
                            return {
                                "status": "found",
                                "data": sf_creation["data"],
                                "message": "Client synchronis√© depuis SAP",
                                "source": "sap_sync"
                            }

            # === √âTAPE 5: ENRICHISSEMENT et D√âDOUBLONNAGE ===
            self._track_step_progress("search_client", 80, "üîç Enrichissement externe")
            enrichment_data = await self._search_company_enrichment(client_name)
            duplicates = await self._check_duplicates_enhanced(client_name, enrichment_data)

            if duplicates.get("has_duplicates"):
                return await self._handle_potential_duplicates(duplicates, client_name)

            # === √âTAPE 6: CR√âATION PROPOS√âE ===
            
            self._track_step_progress("search_client", 95, "‚ö†Ô∏è AUCUN client trouv√© - Validation requise")
            user_approval = await self._request_user_validation_for_client_creation(client_name, enrichment_data)

            if user_approval.get("status") == "approved":
                creation_result = await self._create_client_automatically(client_name)
                if creation_result.get("created"):
                    return {
                        "status": "created",
                        "data": creation_result.get("client_data"),
                        "source": "auto_created",
                        "message": creation_result.get("message"),
                        "auto_created": True
                    }
                else:
                    logger.warning(f"‚ùå Cr√©ation √©chou√©e: {creation_result.get('error')}")
                    return {
                        "status": "not_found",
                        "data": None,
                        "message": f"Cr√©ation √©chou√©e: {creation_result.get('error')}",
                        "search_term": client_name
                    }
            else:
                logger.info(f"‚èπÔ∏è Cr√©ation annul√©e par l'utilisateur")
                return {
                    "status": "cancelled",
                    "data": None,
                    "message": "Cr√©ation annul√©e par l'utilisateur",
                    "search_term": client_name
                }

        except Exception as e:
            logger.exception(f"‚ùå Erreur lors de la validation client {client_name}: {str(e)}")
            return {
                "status": "error",
                "data": None,
                "message": f"Erreur syst√®me: {str(e)}"
            }

    async def _create_salesforce_from_sap(self, sap_data: Dict[str, Any]) -> Dict[str, Any]:
        """Cr√©e un enregistrement Salesforce √† partir des donn√©es SAP"""
        try:
            logger.info("üîÑ Cr√©ation Salesforce depuis donn√©es SAP")
            
            # Mapper les donn√©es SAP vers Salesforce
            sf_data = {
                "Name": sap_data.get("CardName", "Client SAP"),
                "Type": "Customer",
                "AccountNumber": sap_data.get("CardCode", ""),
                "Description": f"Client synchronis√© depuis SAP - CardCode: {sap_data.get('CardCode', '')}",
                "BillingStreet": sap_data.get("BillToStreet", ""),
                "BillingCity": sap_data.get("BillToCity", ""),
                "BillingState": sap_data.get("BillToState", ""),
                "BillingPostalCode": sap_data.get("BillToZipCode", ""),
                "BillingCountry": sap_data.get("BillToCountry", ""),
                "Phone": sap_data.get("Phone1", ""),
                "Fax": sap_data.get("Fax", ""),
                "Website": sap_data.get("Website", ""),
                "Industry": sap_data.get("Industry", "")
            }
            
            # Cr√©er dans Salesforce
            result = await self.mcp_connector.call_salesforce_mcp("salesforce_create_record", {
                "sobject": "Account",
                "data": sf_data
            })
            
            if result.get("success"):
                logger.info(f"‚úÖ Client Salesforce cr√©√© depuis SAP: {result.get('id')}")
                return {
                    "success": True,
                    "salesforce_id": result.get("id"),
                    "data": sf_data
                }
            else:
                logger.error(f"‚ùå Erreur cr√©ation Salesforce: {result.get('error')}")
                return {
                    "success": False,
                    "error": result.get("error", "Erreur cr√©ation Salesforce")
                }
                
        except Exception as e:
            logger.exception(f"Erreur _create_salesforce_from_sap: {str(e)}")
            return {
                "success": False,
                "error": str(e)
            }
    async def _handle_potential_duplicates(self, duplicate_check: Dict, client_name: str) -> Dict[str, Any]:
        """G√®re les doublons potentiels d√©tect√©s"""
        
        duplicates = duplicate_check.get("duplicates", [])
        
        return {
            "status": "user_interaction_required",
            "interaction_type": "duplicate_resolution",
            "message": f"Doublons potentiels trouv√©s pour '{client_name}'",
            "duplicates": duplicates,
            "options": duplicate_check.get("actions", []),
            "context": {
                "client_name": client_name,
                "duplicate_check": duplicate_check
            }
        }
    async def _request_user_validation_for_client_creation(self, client_name: str, enrichment_data: Dict) -> Dict[str, Any]:
        """Demande validation utilisateur pour cr√©ation client"""
        try:
            logger.info(f"üì© Demande validation cr√©ation client: {client_name}")
            
            # Pour le POC, auto-approuver si donn√©es enrichies disponibles
            if enrichment_data.get("success") and enrichment_data.get("company_data"):
                logger.warning("‚ö†Ô∏è BLOQUAGE: find_client_everywhere n'a trouv√© AUCUN client existant")
                return {
                    "status": "requires_explicit_confirmation",
                    "method": "auto_approved_with_data",
                    "enrichment_data": enrichment_data
                }
            
            # Si pas de donn√©es enrichies, on refuse la cr√©ation.
            logger.warning("‚ö†Ô∏è BLOQUAGE: Aucune donn√©e d'enrichissement ET aucun client trouv√©")
            return {
                "status": "requires_explicit_confirmation",
                "method": "auto_approved_fallback",
                "enrichment_data": enrichment_data,
                "note": "Cr√©ation approuv√©e automatiquement en mode POC"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur validation utilisateur: {str(e)}")
            return {
                "status": "error",
                "error": str(e)
            }


    
    async def _create_client_if_needed(self, client_name: str) -> Dict[str, Any]:
        """Cr√©ation automatique du client si n√©cessaire"""
        try:
            import re
            import time

            # G√©n√©ration CardCode unique
            clean_name = re.sub(r'[^a-zA-Z0-9]', '', client_name)[:8].upper()
            timestamp = str(int(time.time()))[-4:]
            card_code = f"AUTO{clean_name}{timestamp}"[:15]

            # Donn√©es client SAP
            sap_client_data = {
                "CardCode": card_code,
                "CardName": client_name,
                "CardType": "cCustomer",
                "GroupCode": 100,
                "Currency": "EUR",
                "Valid": "tYES",
                "Frozen": "tNO",
                "Notes": f"Client cr√©√© automatiquement par NOVA"
            }

            logger.info(f"üÜï Cr√©ation client SAP: {card_code} ({client_name})")

            # Cr√©ation dans SAP
            create_result = await self.mcp_connector.call_mcp(
                "sap_mcp",
                "sap_create_customer_complete",
                {"customer_data": sap_client_data}
            )

            if create_result.get("success", False):
                logger.info(f"‚úÖ Client SAP cr√©√© avec succ√®s: {card_code}")
                
                # Cr√©ation parall√®le dans Salesforce
                sf_data = {
                    "Name": client_name,
                    "AccountNumber": card_code,
                    "Type": "Customer",
                    "Industry": "Technology"
                }

                sf_result = await self.mcp_connector.call_mcp(
                    "salesforce_mcp",
                    "salesforce_create_record",
                    {"sobject": "Account", "data": sf_data}
                )

                return {
                    "created": True,
                    "sap_client": create_result.get("data", {"CardCode": card_code, "CardName": client_name}),
                    "salesforce_client": sf_result.get("data") if sf_result.get("success") else None,
                    "message": f"Client '{client_name}' cr√©√© avec succ√®s"
                }
            else:
                return {
                    "created": False,
                    "error": create_result.get("error", "Erreur inconnue lors de la cr√©ation SAP")
                }

        except Exception as e:
            logger.exception(f"Erreur cr√©ation client: {str(e)}")
            return {"created": False, "error": str(e)}
    def _extract_product_keywords(self, product_name: str) -> List[str]:
        """Extrait des mots-cl√©s intelligents pour la recherche produit"""
        product_lower = product_name.lower()
        keywords = []
        
        # Dictionnaire de synonymes pour √©largir la recherche
        synonyms = {
            "imprimante": ["printer", "imprimante", "laser", "jet"],
            "ordinateur": ["computer", "pc", "desktop"],
            "√©cran": ["monitor", "screen", "display"],
            "clavier": ["keyboard", "clavier"],
            "souris": ["mouse", "souris"]
        }
        
        # Chercher des correspondances
        for word, related in synonyms.items():
            if word in product_lower:
                keywords.extend(related)
                break
        
        # Si pas de correspondance, utiliser le premier mot
        if not keywords:
            first_word = product_name.split()[0].lower()
            if len(first_word) >= 3:
                keywords.append(first_word)
        
        return keywords[:3]  # Limiter √† 3 mots-cl√©s
    async def _process_products_retrieval(self, products: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        R√©cup√©ration des produits avec progression avanc√©e
        """
        try:
            if not products:
                return {
                    "status": "success",
                    "products": [],
                    "message": "Aucun produit √† traiter"
                }

            self._track_step_progress("lookup_products", 10, f"üîç Recherche de {len(products)} produit(s)...")

            found_products = []
            total_products = len(products)

            for i, product in enumerate(products):
                product_name = product.get("name", "")
                product_code = product.get("code", "")
                quantity = product.get("quantity", 1)

                # Progression
                progress = int(20 + (i / total_products) * 70)
                self._track_step_progress("lookup_products", progress,
                                        f"üì¶ Recherche '{product_name}' ({i+1}/{total_products})")

                # === RECHERCHE MULTI-CRIT√àRES ===
                product_found = None
                
                # 1. Recherche par code exact si disponible
                if product_code:
                    try:
                        code_result = await self.mcp_connector.call_mcp(
                            "sap_mcp",
                            "sap_read",
                            {"endpoint": f"/Items('{product_code}')"}
                        )
                        
                        if not code_result.get("error") and code_result.get("data", {}).get("ItemCode"):
                            product_found = code_result["data"]
                            logger.info(f"‚úÖ Produit trouv√© par code: {product_code}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Erreur recherche par code {product_code}: {e}")
                
                # 2. Recherche par nom si pas trouv√© par code
                if not product_found and product_name:
                    try:
                        # 2.1 Extraction crit√®res intelligents via LLM
                        search_criteria = await self._extract_intelligent_search_criteria(product_name)
                        
                        # 2.2 Recherche principale par crit√®res
                        search_result = await self._smart_product_search(search_criteria)
                        
                        if search_result.get("success") and search_result.get("products"):
                            exact_matches = search_result.get("exact_matches", [])
                            close_matches = search_result.get("close_matches", [])
                            
                            if exact_matches:
                                product_found = exact_matches[0]
                                logger.info(f"‚úÖ Correspondance exacte: {product_name}")
                            elif close_matches:
                                # Proposer alternatives √† l'utilisateur
                                return await self._propose_product_alternatives(
                                    product_name, close_matches, i, total_products
                                )
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Erreur recherche par nom {product_name}: {e}")
                
                # 3. Ajouter le produit aux r√©sultats
                if product_found:
                    # Calculer le prix total
                    unit_price = float(product_found.get("Price", 0) or 0)
                    total_price = unit_price * quantity
                    
                    found_products.append({
                        "code": product_found.get("ItemCode", product_code or "UNKNOWN"),
                        "name": product_found.get("ItemName", product_name or "Produit inconnu"),
                        "quantity": quantity,
                        "unit_price": unit_price,
                        "total_price": total_price,
                        "currency": "EUR",
                        "sap_data": product_found,
                        "found": True,
                        "search_method": "code" if product_code else "name"
                    })
                else:
                    # Produit non trouv√© - cr√©er une entr√©e d'erreur
                    logger.warning(f"‚ùå Produit non trouv√©: {product_name or product_code}")
                    found_products.append({
                        "code": product_code or "NOT_FOUND",
                        "name": product_name or "Produit non sp√©cifi√©",
                        "quantity": quantity,
                        "unit_price": 0.0,
                        "total_price": 0.0,
                        "currency": "EUR",
                        "sap_data": None,
                        "found": False,
                        "error": "Produit non trouv√© dans le catalogue SAP"
                    })

            # Finaliser la progression
            self._track_step_progress("lookup_products", 100, f"‚úÖ Recherche termin√©e")
            
            # Statistiques
            found_count = len([p for p in found_products if p.get("found", False)])
            total_amount = sum(p.get("total_price", 0) for p in found_products)
            
            logger.info(f"üìä Produits: {found_count}/{total_products} trouv√©s - Total: {total_amount}‚Ç¨")
            
            return {
                "status": "success",
                "products": found_products,
                "stats": {
                    "total_requested": total_products,
                    "found": found_count,
                    "not_found": total_products - found_count,
                    "total_amount": total_amount
                },
                "message": f"{found_count}/{total_products} produit(s) trouv√©(s)"
            }
            
        except Exception as e:
            logger.exception(f"Erreur r√©cup√©ration produits: {str(e)}")
            
            # CORRECTION: Protection garantie du format de retour
            return {
                "status": "error",
                "products": [],
                "stats": {
                    "total_requested": len(products) if products else 0,
                    "found": 0,
                    "not_found": len(products) if products else 0,
                    "total_amount": 0
                },
                "message": f"Erreur syst√®me: {str(e)}"
            }

    async def _create_quote_document(self, client_result: Dict, products_result: Dict) -> Dict[str, Any]:
        """
        Cr√©ation document devis avec donn√©es r√©elles
        """
        try:
            logger.info("üìã Cr√©ation du document de devis")
            
            # === DONN√âES CLIENT ===
            client_data = client_result.get("data", {})
            if not client_data:
                return {
                    "status": "error",
                    "quote_data": None,
                    "message": "Donn√©es client manquantes"
                }
            
            # === DONN√âES PRODUITS ===
            products_data = products_result.get("products", [])
            if not products_data:
                return {
                    "status": "error", 
                    "quote_data": None,
                    "message": "Aucun produit √† inclure"
                }
            
            # === CALCULS ===
            total_amount = sum(product.get("total_price", 0) for product in products_data)
            products_count = len(products_data)
            found_products_count = len([p for p in products_data if p.get("found", False)])
            
            # === G√âN√âRATION ID DEVIS ===
            quote_id = f"QUOTE_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            
            # === DOCUMENT DEVIS COMPLET ===
            quote_document = {
                "quote_id": quote_id,
                "created_date": datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
                "created_timestamp": datetime.now().isoformat(),
                "status": "draft",
                "currency": "EUR",
                
                # Informations client
                "client": {
                    "name": client_data.get("Name", "Client Inconnu"),
                    "account_number": client_data.get("AccountNumber", ""),
                    "salesforce_id": client_data.get("Id", ""),
                    "phone": client_data.get("Phone", ""),
                    "email": client_data.get("Email", ""),
                    "billing_city": client_data.get("BillingCity", ""),
                    "billing_country": client_data.get("BillingCountry", "")
                },
                
                # Produits d√©taill√©s
                "products": products_data,
                
                # Totaux et statistiques
                "totals": {
                    "subtotal": total_amount,
                    "tax_rate": 0.20,  # TVA 20%
                    "tax_amount": total_amount * 0.20,
                    "total_amount": total_amount * 1.20,
                    "products_count": products_count,
                    "found_products_count": found_products_count
                },
                
                # M√©tadonn√©es
                "metadata": {
                    "generated_by": "NOVA AI Assistant",
                    "workflow_version": "2.0",
                    "task_id": self.task_id,
                    "client_source": client_result.get("source", "unknown"),
                    "products_stats": products_result.get("stats", {})
                }
            }
            
            # === LOG ET RETOUR ===
            logger.info(f"‚úÖ Devis cr√©√©: {quote_id}")
            logger.info(f"   Client: {client_data.get('Name')}")
            logger.info(f"   Produits: {found_products_count}/{products_count}")
            logger.info(f"   Total HT: {total_amount:.2f}‚Ç¨")
            logger.info(f"   Total TTC: {total_amount * 1.20:.2f}‚Ç¨")
            
            return {
                "status": "success",
                "quote_data": quote_document,  # s'assurer que quote_document est d√©fini
                "message": f"Devis {quote_id} cr√©√© avec {found_products_count}/{products_count} produits"
            }
            
        except Exception as e:
            logger.exception(f"Erreur cr√©ation devis: {str(e)}")
            return {
                "status": "error",
                "quote_data": None,
                "message": f"Erreur cr√©ation devis: {str(e)}"
            }

    
    async def _create_salesforce_opportunity_safe(self, quote_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        üîß CR√âATION S√âCURIS√âE d'opportunit√© Salesforce
        """
        try:
            client_data = quote_data.get("client_data", {})
            
            # Validation pr√©alable
            if not client_data or not client_data.get("Id"):
                logger.error("‚ùå Impossible de cr√©er l'opportunit√© : client Salesforce requis")
                return {
                    "success": False,
                    "error": "Client Salesforce requis pour cr√©er l'opportunit√©",
                    "skip_reason": "missing_client"
                }

            # Donn√©es minimales pour √©viter les erreurs
            opportunity_data = {
                "Name": f"Devis {quote_data.get('quote_id', 'AUTO')} - {client_data.get('Name', 'Client')}",
                "AccountId": client_data["Id"],
                "StageName": "Prospecting",  # √âtape existante dans Salesforce
                "CloseDate": (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")
            }
            
            # Ajouter le montant seulement s'il est valide
            total_amount = quote_data.get("total_amount", 0)
            if total_amount and total_amount > 0:
                opportunity_data["Amount"] = total_amount

            logger.info(f"üìã Cr√©ation opportunit√©: {opportunity_data['Name']}")

            result = await self.mcp_connector.call_mcp(
                "salesforce_mcp",
                "salesforce_create_record",
                {
                    "sobject": "Opportunity",
                    "data": opportunity_data
                }
            )

            if result.get("success"):
                logger.info(f"‚úÖ Opportunit√© cr√©√©e: {result.get('id')}")
                return {
                    "success": True,
                    "opportunity_id": result.get("id"),
                    "data": opportunity_data
                }
            else:
                logger.error(f"‚ùå Erreur cr√©ation opportunit√©: {result.get('error')}")
                return {
                    "success": False,
                    "error": result.get("error", "Erreur inconnue"),
                    "attempted_data": opportunity_data
                }

        except Exception as e:
            logger.exception(f"‚ùå Exception cr√©ation opportunit√©: {str(e)}")
            return {
                "success": False,
                "error": f"Exception: {str(e)}"
            }
    
    async def _sync_quote_to_systems(self, quote_result: Dict, target: str = None) -> Dict[str, Any]:
        """
        Synchronisation vers SAP/Salesforce - VERSION PRODUCTION
        """
        try:
            quote_data = quote_result.get("quote_data", {})
            # Gestion du param√®tre target pour synchronisation sp√©cifique
            if target and target not in ("sap", "salesforce"):
                return {
                "status": "error",
                "message": f"Target '{target}' non support√©. Utilisez 'sap' ou 'salesforce'"
                }
            if not quote_data:
                return {
                    "status": "error",
                    "message": "Pas de donn√©es de devis √† synchroniser"
                }
            
            quote_id = quote_data.get("quote_id")
            logger.info(f"üíæ Synchronisation production du devis {quote_id}")
            
            # === PR√âPARATION DONN√âES SAP ===
            client_data = quote_data.get("client", {})
            products_data = quote_data.get("products", [])
            
            # Pr√©paration structure SAP quotation_data
            sap_quotation_data = {
                "CardCode": client_data.get("CardCode") or client_data.get("sap_code"),
                "CardName": client_data.get("CardName") or client_data.get("name"),
                "DocDate": datetime.now().strftime("%Y-%m-%d"),
                "DocDueDate": (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d"),
                "DocumentLines": [
                    {
                        "ItemCode": product.get("ItemCode") or product.get("code"),
                        "Quantity": product.get("Quantity") or product.get("quantity", 1),
                        "UnitPrice": product.get("UnitPrice") or product.get("price", 0),
                        "LineTotal": (product.get("UnitPrice") or product.get("price", 0)) * (product.get("Quantity") or product.get("quantity", 1))
                    }
                    for product in products_data
                ]
            }
            
            # === SYNCHRONISATION SAP ===
            logger.info(f"üì° Appel SAP sap_create_quotation_complete")
            sap_result = await self.mcp_connector.sap_create_quotation_complete(sap_quotation_data)
            
            # === PR√âPARATION DONN√âES SALESFORCE ===
            sf_opportunity_data = {
                "Name": f"Devis {client_data.get('name', 'Client')} - {datetime.now().strftime('%Y-%m-%d')}",
                "AccountId": client_data.get("salesforce_id"),
                "CloseDate": (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d"),
                "StageName": "Quotation",
                "Amount": quote_data.get("total_amount", 0),
                "Description": f"Devis g√©n√©r√© automatiquement - {quote_id}"
            }
            
            sf_line_items = [
                {
                    "Product2Id": product.get("salesforce_id"),
                    "Quantity": product.get("Quantity") or product.get("quantity", 1),
                    "UnitPrice": product.get("UnitPrice") or product.get("price", 0)
                }
                for product in products_data
                if product.get("salesforce_id")
            ]
            
            # === SYNCHRONISATION SALESFORCE ===
            logger.info(f"üì° Appel Salesforce salesforce_create_opportunity_complete")
            sf_result = await self.mcp_connector.salesforce_create_opportunity_complete(
                sf_opportunity_data, sf_line_items
            )
            
            # === TRAITEMENT DES R√âSULTATS ===
            sync_results = {
                "sap_sync": {
                    "attempted": True,
                    "success": sap_result.get("success", False),
                    "message": sap_result.get("error", "Synchronisation SAP r√©ussie") if not sap_result.get("success") else "Devis SAP cr√©√©",
                    "quote_sap_id": sap_result.get("DocNum") or sap_result.get("DocEntry"),
                    "doc_entry": sap_result.get("DocEntry")
                },
                "salesforce_sync": {
                    "attempted": True,
                    "success": sf_result.get("success", False),
                    "message": sf_result.get("error", "Synchronisation Salesforce r√©ussie") if not sf_result.get("success") else "Opportunit√© Salesforce cr√©√©e",
                    "opportunity_id": sf_result.get("id") or sf_result.get("opportunity_id")
                }
            }
            
            # D√©termination du statut global
            if sync_results["sap_sync"]["success"] and sync_results["salesforce_sync"]["success"]:
                status = "success"
                message = f"Synchronisation compl√®te r√©ussie pour {quote_id}"
            elif sync_results["sap_sync"]["success"] or sync_results["salesforce_sync"]["success"]:
                status = "partial_success"
                message = f"Synchronisation partielle pour {quote_id}"
            else:
                status = "error"
                message = f"√âchec synchronisation pour {quote_id}"
            
            logger.info(f"‚úÖ Synchronisation termin√©e: {status}")
            
            return {
                "status": status,
                "sync_results": sync_results,
                "message": message
            }
            
        except Exception as e:
            logger.exception(f"Erreur synchronisation: {str(e)}")
            return {
                "status": "error",
                "message": f"Erreur synchronisation: {str(e)}"
            }

    def _initialize_task_tracking(self, prompt: str) -> str:
        """
        üîß MODIFICATION : Initialiser le tracking si pas d√©j√† fait
        """
        if not self.current_task:
            
            self.current_task = progress_tracker.create_task(
                user_prompt=prompt,
                draft_mode=self.draft_mode
            )
            self.task_id = self.current_task.task_id
            logger.info(f"üîÑ Tracking initialis√© pour la t√¢che: {self.task_id}")

        return self.task_id

class EnhancedDevisWorkflow(DevisWorkflow):
    """Workflow enrichi avec recherche parall√®le"""
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.suggestion_engine = SuggestionEngine()
        self.websocket_manager = websocket_manager
        self.task_id = None
    
    async def process_prompt(self, prompt: str, task_id: str = None, draft_mode: bool = False):
        """Traitement avec recherche parall√®le"""
        self.task_id = task_id
        
        # Extraction LLM classique
        extracted_info = await self.llm_extractor.extract_devis_info(prompt)
        
        # Recherche parall√®le
        if extracted_info.get("client") and extracted_info.get("products"):
            parallel_result = await self._parallel_client_product_search(extracted_info)
            
            # Continuer avec le workflow existant
            return await super().process_prompt(prompt, draft_mode)
        
        return await super().process_prompt(prompt, draft_mode)
    
    async def _parallel_client_product_search(self, extracted_info: dict):
        """Recherche parall√®le client et produits"""
        
        # Notification WebSocket
        await self._notify_websocket("parallel_search_started", {
            "client_query": extracted_info.get("client"),
            "product_queries": extracted_info.get("products", [])
        })
        
        # Lancer recherches parall√®les
        client_task = asyncio.create_task(
            self._search_client_with_notifications(extracted_info.get("client"))
        )
        product_task = asyncio.create_task(
            self._search_products_with_notifications(extracted_info.get("products", []))
        )
        
        # Attendre r√©sultats
        client_result, product_results = await asyncio.gather(
            client_task, product_task, return_exceptions=True
        )
        
        return {
            "client_result": client_result,
            "product_results": product_results
        }
    async def _search_company_info(self, company_name: str) -> Dict[str, Any]:
        """
        Recherche des informations enrichies sur une entreprise
        """
        logger.info(f"üîç Recherche informations entreprise: {company_name}")
        
        try:
            # Utiliser le service d'enrichissement existant
            
            
            # Rechercher les informations via INSEE/Pappers
            search_result = await client_creation_workflow.search_company_by_name(company_name)
            
            if search_result.get("success") and search_result.get("companies"):
                # Prendre la premi√®re entreprise trouv√©e
                company_data = search_result["companies"][0]
                
                return {
                    "found": True,
                    "company_name": company_data.get("company_name", company_name),
                    "siret": company_data.get("siret", "Non disponible"),
                    "siren": company_data.get("siren", "Non disponible"),
                    "address": {
                        "street": company_data.get("address", ""),
                        "postal_code": company_data.get("postal_code", ""),
                        "city": company_data.get("city", "")
                    },
                    "activity": {
                        "code": company_data.get("activity_code", ""),
                        "label": company_data.get("activity_label", "")
                    },
                    "status": company_data.get("status", "Inconnu"),
                    "creation_date": company_data.get("creation_date", ""),
                    "source": company_data.get("source", "recherche_automatique")
                }
            else:
                # Donn√©es minimales si pas d'enrichissement possible
                return {
                    "found": False,
                    "company_name": company_name,
                    "siret": "√Ä renseigner",
                    "siren": "√Ä renseigner", 
                    "address": {
                        "street": "√Ä renseigner",
                        "postal_code": "√Ä renseigner",
                        "city": "√Ä renseigner"
                    },
                    "activity": {
                        "code": "√Ä renseigner",
                        "label": "√Ä renseigner"
                    },
                    "status": "√Ä v√©rifier",
                    "creation_date": "",
                    "source": "creation_manuelle"
                }
                
        except Exception as e:
            logger.error(f"Erreur enrichissement donn√©es client: {str(e)}")
            return {
                "found": False,
                "company_name": company_name,
                "siret": "Erreur r√©cup√©ration",
                "error": str(e)
            }
    async def _search_client_with_notifications(self, client_name: str):
        """Recherche client avec notifications"""
        
        # √âtape 1: Recherche Salesforce
        await self._notify_websocket("client_search_step", {
            "step": "salesforce",
            "status": "searching",
            "message": f"Recherche de '{client_name}' dans Salesforce..."
        })
        
        sf_result = await self._search_salesforce_client(client_name)
        
        if sf_result.get("found"):
            await self._notify_websocket("client_found", {
                "source": "salesforce",
                "client_data": sf_result["data"],
                "message": f"Client '{client_name}' trouv√© dans Salesforce"
            })
            return sf_result
        
        # √âtape 2: Recherche externe
        await self._notify_websocket("client_search_step", {
            "step": "external_apis",
            "status": "searching",
            "message": f"Recherche externe de '{client_name}'..."
        })
        
        external_result = await company_search_service.search_company(client_name)
        
        if external_result.get("success"):
            await self._notify_websocket("client_external_data", {
                "companies": external_result["companies"],
                "message": f"Donn√©es externes trouv√©es pour '{client_name}'"
            })
            
            return {
                "found": False,
                "external_data": external_result,
                "requires_validation": True
            }
        
        return {"found": False, "message": f"Client '{client_name}' introuvable"}
    async def continue_workflow_with_user_input(self, user_input: Dict[str, Any], interaction_type: str = None) -> Dict[str, Any]:
        """G√®re la continuation du workflow apr√®s interaction utilisateur"""
        
        try:
            logger.info(f"üîÑ Continuation workflow - Type: {interaction_type}")
            
            context = self.context.copy()
            
            if interaction_type == "client_selection":
                return await self._handle_client_selection(user_input, context)
                
            elif interaction_type == "client_creation_confirmation":
                return await self._handle_client_creation_confirmation(user_input, context)
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la continuation du workflow: {str(e)}")
            return {"success": False, "error": str(e)}  
        
    async def _handle_client_creation_confirmation(self, user_input: Dict[str, Any], context: Dict) -> Dict[str, Any]:
        """G√®re la confirmation de cr√©ation d'un nouveau client"""
        
        action = user_input.get("action")
        client_name = user_input.get("client_name") or context.get("client_name")
        
        if action == "confirm_create":
            # L'utilisateur confirme la cr√©ation
            logger.info(f"‚úÖ Utilisateur confirme cr√©ation client: {client_name}")
            
            # R√©cup√©rer les donn√©es enrichies du contexte
            enrichment_data = context.get("enrichment_data", {})
            
            # Proc√©der √† la cr√©ation avec les donn√©es valid√©es
            creation_result = await self._create_validated_client(client_name, enrichment_data)
            
            if creation_result.get("created"):
                # Client cr√©√© avec succ√®s - continuer le workflow
                self.context["client_info"] = {
                    "data": creation_result["client_data"], 
                    "found": True
                }
                
                # Continuer avec la validation des produits
                original_products = context.get("original_products", [])
                return await self._continue_product_validation(original_products)
            else:
                return {
                    "success": False,
                    "message": f"‚ùå Erreur lors de la cr√©ation du client: {creation_result.get('error')}",
                    "type": "error"
                }
        
        elif action == "cancel_create":
            # L'utilisateur annule la cr√©ation
            return {
                "success": False,
                "message": "‚ùå Cr√©ation du client annul√©e par l'utilisateur",
                "type": "cancelled"
            }
        
        elif action == "modify_search":
            # L'utilisateur veut modifier la recherche
            return {
                "success": False,
                "requires_user_input": True,
                "message": "üîç Veuillez pr√©ciser le nom exact du client:",
                "input_type": "text",
                "placeholder": "Nom exact de l'entreprise"
            }
        
        else:
            return {
                "success": False,
                "message": "‚ùå Action non reconnue",
                "type": "error"
            }
    async def _create_validated_client(self, client_name: str, enrichment_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Cr√©e un client apr√®s validation utilisateur avec les donn√©es enrichies
        """
        try:
            logger.info(f"üöÄ Cr√©ation client valid√©: {client_name}")
            
            # Utiliser les donn√©es enrichies pour la cr√©ation
            
            # G√©n√©ration CardCode unique
            clean_name = re.sub(r'[^a-zA-Z0-9]', '', client_name)[:6].upper()
            timestamp = str(int(time.time()))[-4:]
            card_code = f"C{clean_name}{timestamp}"
            
            # Pr√©parer les donn√©es pour SAP avec informations enrichies
            sap_client_data = {
                "CardCode": card_code,
                "CardName": enrichment_data.get("company_name", client_name.title()),
                "CardType": "cCustomer",
                "GroupCode": 100,
                "Currency": "EUR",
                "Valid": "tYES",
                "Frozen": "tNO",
                "FederalTaxID": enrichment_data.get("siret", ""),
                "Notes": f"Client cr√©√© avec validation utilisateur le {datetime.now().strftime('%d/%m/%Y')}"
            }
            
            # Ajouter l'adresse si disponible
            address_data = enrichment_data.get("address", {})
            if address_data.get("street"):
                sap_client_data.update({
                    "MailAddress": address_data.get("street", ""),
                    "MailZipCode": address_data.get("postal_code", ""),
                    "MailCity": address_data.get("city", "")
                })
            
            logger.info(f"üìù Donn√©es SAP valid√©es pr√©par√©es: {card_code}")
            
            # Cr√©ation dans SAP
            sap_result = await self.mcp_connector.call_mcp(
                "sap_mcp",
                "sap_create_customer_complete",
                {"customer_data": sap_client_data}
            )
            
            if not sap_result.get("success", False):
                logger.error(f"‚ùå √âchec cr√©ation SAP: {sap_result.get('error')}")
                return {
                    "created": False,
                    "error": f"Erreur SAP: {sap_result.get('error', 'Erreur inconnue')}"
                }
            
            logger.info(f"‚úÖ Client SAP cr√©√©: {card_code}")
            
            # Pr√©parer les donn√©es pour Salesforce
            sf_client_data = {
                "Name": enrichment_data.get("company_name", client_name.title()),
                "AccountNumber": card_code,
                "Type": "Customer",
                "Industry": enrichment_data.get("activity", {}).get("label", ""),
                "BillingStreet": address_data.get("street", ""),
                "BillingPostalCode": address_data.get("postal_code", ""),
                "BillingCity": address_data.get("city", ""),
                "Description": f"Client cr√©√© avec validation - SIRET: {enrichment_data.get('siret', 'N/A')}"
            }
            
            # Cr√©ation dans Salesforce
            sf_result = await self.mcp_connector.call_mcp(
                "salesforce_mcp",
                "salesforce_create_record",
                {
                    "sobject_type": "Account",
                    "data": sf_client_data
                }
            )
            
            if not sf_result.get("success", False):
                logger.error(f"‚ùå √âchec cr√©ation Salesforce: {sf_result.get('error')}")
                return {
                    "created": False,
                    "error": f"Erreur Salesforce: {sf_result.get('error', 'Erreur inconnue')}"
                }
            
            sf_client_id = sf_result.get("data", {}).get("Id")
            logger.info(f"‚úÖ Client Salesforce cr√©√©: {sf_client_id}")
            
            return {
                "created": True,
                "client_data": {
                    "Id": sf_client_id,
                    "Name": enrichment_data.get("company_name", client_name.title()),
                    "AccountNumber": card_code,
                    "SIRET": enrichment_data.get("siret", ""),
                    "BillingStreet": address_data.get("street", ""),
                    "BillingCity": address_data.get("city", "")
                },
                "sap_card_code": card_code,
                "creation_method": "validated_by_user"
            }
            
        except Exception as e:
            logger.exception(f"‚ùå Erreur cr√©ation client valid√©: {str(e)}")
            return {
                "created": False,
                "error": f"Erreur syst√®me: {str(e)}"
            }
    async def _search_sap_product(self, product_code: str, product_name: str):
        """D√©l√©guer √† product_manager"""
        return await self.product_manager._search_sap_product(product_code, product_name)
    
    async def _search_products_with_notifications(self, products: list):
        """Recherche produits avec notifications"""
        
        results = []
        
        for i, product in enumerate(products):
            product_name = product.get("name", "")
            
            await self._notify_websocket("product_search_started", {
                "product_index": i,
                "product_name": product_name,
                "message": f"Recherche produit {i+1}/{len(products)}"
            })
            
            # Recherche SAP
            sap_result = await self._search_sap_product(product.get("code", ""), product_name)
            
            if sap_result.get("found"):
                await self._notify_websocket("product_found", {
                    "product_index": i,
                    "product_data": sap_result["data"],
                    "message": f"Produit '{product_name}' trouv√©"
                })
                results.append({"index": i, "found": True, "data": sap_result["data"]})
            else:
                await self._notify_websocket("product_not_found", {
                    "product_index": i,
                    "product_name": product_name,
                    "message": f"Produit '{product_name}' introuvable"
                })
                results.append({"index": i, "found": False})
        
        return results
    
    async def _notify_websocket(self, event_type: str, data: dict):
        """Notification WebSocket"""
        if self.task_id:
            await self.websocket_manager.send_task_update(self.task_id, {
                "event": event_type,
                "data": data
            })

# Export du routeur pour int√©gration dans main.py
__all__ = ['DevisWorkflow', 'router_v2']