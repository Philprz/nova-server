# workflow/devis_workflow.py - VERSION COMPL√àTE AVEC VALIDATEUR CLIENT

import sys
import io
import os
import json
import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from services.llm_extractor import LLMExtractor
from services.mcp_connector import MCPConnector
from services.progress_tracker import progress_tracker, QuoteTask
from services.suggestion_engine import SuggestionEngine
from services.client_validator import ClientValidator

# Configuration de l'encodage
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

# Configuration des logs
os.makedirs('logs', exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/workflow_devis.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ],
    force=True
)
logger = logging.getLogger('workflow_devis')

# Import conditionnel du validateur client
try:
    from services.client_validator import ClientValidator
    VALIDATOR_AVAILABLE = True
    logger.info("‚úÖ Validateur client disponible")
except ImportError as e:
    VALIDATOR_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è Validateur client non disponible: {str(e)}")

class DevisWorkflow:
    """Coordinateur du workflow de devis entre Claude, Salesforce et SAP - VERSION AVEC VALIDATEUR CLIENT"""
    
    def __init__(self, validation_enabled: bool = True, draft_mode: bool = False):
            self.mcp_connector = MCPConnector()
            self.llm_extractor = LLMExtractor()
            self.client_validator = ClientValidator() if validation_enabled else None
            self.validation_enabled = validation_enabled
            self.draft_mode = draft_mode
            self.context = {}
            
            # NOUVEAU : Support du tracking de progression
            self.current_task: Optional[QuoteTask] = None
            self.task_id: Optional[str] = None
            
            # Ancien syst√®me de workflow_steps conserv√© pour compatibilit√©
            self.workflow_steps = []
            # üß† NOUVEAU : Initialiser le moteur de suggestions
            self.suggestion_engine = SuggestionEngine()
            self.client_suggestions = None
            self.product_suggestions = []        
        # === NOUVELLE M√âTHODE POUR D√âMARRER LE TRACKING ===
        
    def _initialize_task_tracking(self, prompt: str) -> str:
        """Initialise le tracking de progression pour cette g√©n√©ration"""
        self.current_task = progress_tracker.create_task(
            user_prompt=prompt,
            draft_mode=self.draft_mode
        )
        self.task_id = self.current_task.task_id
        logger.info(f"Tracking initialis√© pour la t√¢che: {self.task_id}")
        return self.task_id
    
    def _track_step_start(self, step_id: str, message: str = ""):
        """D√©marre le tracking d'une √©tape"""
        if self.current_task:
            self.current_task.start_step(step_id, message)
    
    def _track_step_progress(self, step_id: str, progress: int, message: str = ""):
        """Met √† jour la progression d'une √©tape"""
        if self.current_task:
            self.current_task.update_step_progress(step_id, progress, message)
    
    def _track_step_complete(self, step_id: str, message: str = ""):
        """Termine une √©tape avec succ√®s"""
        if self.current_task:
            self.current_task.complete_step(step_id, message)
    
    def _track_step_fail(self, step_id: str, error: str, message: str = ""):
        """Termine une √©tape en erreur"""
        if self.current_task:
            self.current_task.fail_step(step_id, error, message)

    async def process_prompt(self, prompt: str, task_id: str = None, draft_mode: bool = False) -> Dict[str, Any]:
        """
        Traite une demande de devis en langage naturel avec tracking d√©taill√©
        
        Args:
            prompt: Demande en langage naturel
            task_id: ID de t√¢che existant (pour r√©cup√©rer une t√¢che) ou None pour en cr√©er une
            draft_mode: Mode brouillon si True, mode normal si False
        """
        try:
            # Stocker le mode draft si fourni
            if draft_mode:
                self.draft_mode = draft_mode
                logger.info("Mode DRAFT activ√© pour cette g√©n√©ration")
            
            # Initialiser ou r√©cup√©rer le tracking
            if task_id:
                self.current_task = progress_tracker.get_task(task_id)
                self.task_id = task_id
                if not self.current_task:
                    raise ValueError(f"T√¢che {task_id} introuvable")
            else:
                self.task_id = self._initialize_task_tracking(prompt)
            
            logger.info(f"=== D√âMARRAGE WORKFLOW - T√¢che {self.task_id} ===")
            logger.info(f"Mode: {'DRAFT' if self.draft_mode else 'NORMAL'}")
            
            # ========== PHASE 1: ANALYSE DE LA DEMANDE ==========
            
            # √âtape 1.1: Analyse initiale
            self._track_step_start("parse_prompt", "Analyse de votre demande...")
            await asyncio.sleep(0.5)  # Simulation temps de traitement
            self._track_step_progress("parse_prompt", 50, "D√©composition de la demande")
            
            # √âtape 1.2: Extraction des entit√©s
            self._track_step_complete("parse_prompt", "Demande analys√©e")
            self._track_step_start("extract_entities", "Identification des besoins...")
            
            extracted_info = await self._extract_info_from_prompt(prompt)
            self.context["extracted_info"] = extracted_info

            if not extracted_info.get("client") or not extracted_info.get("products"):
                self._track_step_fail("extract_entities", "Impossible de comprendre la demande", 
                                    "Client ou produits manquants")
                return self._build_error_response("Format non reconnu", "Client ou produits manquants")
            
            self._track_step_progress("extract_entities", 80, "Informations extraites")
            
            # √âtape 1.3: Validation input
            self._track_step_complete("extract_entities", "Besoins identifi√©s")
            self._track_step_start("validate_input", "V√©rification de la coh√©rence...")
            
            # Validation de coh√©rence (client + produits pr√©sents)
            if not extracted_info.get("client") or not extracted_info.get("products"):
                self._track_step_fail("validate_input", "Informations manquantes",
                                    "Client ou produits non sp√©cifi√©s")
                return self._build_error_response("Informations incompl√®tes", 
                                                "Veuillez sp√©cifier le client et les produits")
            
            self._track_step_complete("validate_input", "Demande valid√©e")
            
            # ========== PHASE 2: VALIDATION CLIENT ==========
            
            # √âtape 2.1: Recherche client
            self._track_step_start("search_client", "Recherche du client...")
            
            client_info = await self._validate_client(extracted_info.get("client"))
    
            # G√©rer les suggestions client
            if not client_info.get("found"):
                if client_info.get("suggestions"):
                    # Il y a des suggestions, retourner pour interaction utilisateur
                    self._track_step_progress("verify_client_info", 50, "Suggestions client disponibles")
                    return {
                        "status": "suggestions_required",
                        "type": "client_suggestions",
                        "message": client_info.get("message", "Suggestions disponibles"),
                        "suggestions": client_info["suggestions"],
                        "auto_suggest": client_info.get("auto_suggest", False),
                        "workflow_context": {
                            "extracted_info": extracted_info,
                            "task_id": self.task_id,
                            "step": "client_validation"
                        }
                    }
                else:
                    # Aucune suggestion, erreur classique
                    return self._build_error_response("Client non trouv√©", 
                                                    client_info.get("message", "Client introuvable"))
            
            self.context["client_info"] = client_info
            
            self._track_step_progress("search_client", 70, "Consultation des bases de donn√©es")
            
            # √âtape 2.2: V√©rification des informations
            self._track_step_complete("search_client", "Recherche termin√©e")
            self._track_step_start("verify_client_info", "V√©rification des informations...")
            
            # Gestion client non trouv√© avec validation
            if not client_info.get("found") and self.validation_enabled:
                self._track_step_progress("verify_client_info", 50, "Client non trouv√©, cr√©ation en cours...")
                validation_result = await self._handle_client_not_found_with_validation(extracted_info.get("client"))
                
                if validation_result.get("client_created"):
                    client_info = validation_result["client_info"] 
                    self.context["client_info"] = client_info
                    self.context["client_validation"] = validation_result["validation_details"]
                    self._track_step_progress("verify_client_info", 90, "Nouveau client cr√©√©")
                else:
                    self._track_step_fail("verify_client_info", validation_result.get("error", "Erreur de cr√©ation"),
                                        "Impossible de cr√©er le client")
                    return self._build_error_response("Impossible de cr√©er le client", validation_result.get("error"))
            elif not client_info.get("found"):
                self._track_step_fail("verify_client_info", "Client introuvable", client_info.get("error"))
                return self._build_error_response("Client non trouv√©", client_info.get("error"))
            
            # √âtape 2.3: Client pr√™t
            self._track_step_complete("verify_client_info", "Informations v√©rifi√©es")
            self._track_step_complete("client_ready", f"Client {client_info.get('name', 'N/A')} valid√©")
            # √âtape 2.4: V√©rification doublons
            self._track_step_start("check_duplicates", "V√©rification des doublons...")

            duplicate_check = await self._check_duplicate_quotes(
                client_info, 
                extracted_info.get("products", [])
            )
            self.context["duplicate_check"] = duplicate_check

            if duplicate_check.get("duplicates_found"):
                self._track_step_progress("check_duplicates", 80, f"‚ö†Ô∏è {len(duplicate_check.get('warnings', []))} alerte(s) d√©tect√©e(s)")
                
                logger.warning(f"‚ö†Ô∏è {len(duplicate_check.get('warnings', []))} doublons d√©tect√©s - R√©cup√©ration des informations produits quand m√™me")
                
                # üîß MODIFICATION : R√©cup√©rer les informations produits M√äME avec des doublons
                self._track_step_start("get_products_info", "R√©cup√©ration des informations produits...")
                
                validated_products = await self._validate_products_with_suggestions(extracted_info.get("products", []))
    
                # V√©rifier s'il y a des produits n√©cessitant des suggestions
                products_with_suggestions = [p for p in validated_products if not p.get("found") and p.get("suggestions")]
                    
                if products_with_suggestions:
                    # Il y a des suggestions produits, retourner pour interaction utilisateur
                    self._track_step_progress("get_products_info", 50, "Suggestions produits disponibles")
                    return {
                        "status": "suggestions_required",
                        "type": "product_suggestions",
                        "message": f"{len(products_with_suggestions)} produit(s) n√©cessitent votre attention",
                        "products": validated_products,
                        "workflow_context": {
                            "extracted_info": extracted_info,
                            "client_info": client_info,
                            "task_id": self.task_id,
                            "step": "product_validation"
                        }
                    }
                    
                    # Tous les produits sont OK, continuer avec la g√©n√©ration classique
                    products_info = [p["data"] for p in validated_products if p.get("found")]
                self.context["products_info"] = products_info
                
                self._track_step_complete("get_products_info", f"{len(products_info)} produit(s) analys√©(s)")
                
                # üì¢ AVERTISSEMENT NON BLOQUANT - L'utilisateur d√©cide AVEC les informations
                self._track_step_complete("check_duplicates", "Doublons d√©tect√©s - En attente de d√©cision")
                
                # R√©cup√©rer le nom du client depuis le contexte
                client_name = client_info.get("data", {}).get("Name", "Client")
                
                # üîß CONSTRUIRE MANUELLEMENT LA PR√âVISUALISATION DU DEVIS
                quote_preview = {
                    "client": {
                        "name": client_name,
                        "account_number": client_info.get("data", {}).get("AccountNumber", ""),
                        "salesforce_id": client_info.get("data", {}).get("Id", ""),
                        "phone": client_info.get("data", {}).get("Phone", ""),
                        "email": client_info.get("data", {}).get("Email", ""),
                        "city": client_info.get("data", {}).get("BillingCity", ""),
                        "country": client_info.get("data", {}).get("BillingCountry", "")
                    },
                    "products": [],
                    "total_amount": 0.0,
                    "currency": "EUR"
                }

                # Traiter les produits pour la pr√©visualisation
                total_amount = 0.0
                for product in products_info:
                    if isinstance(product, dict) and "error" not in product:
                        quantity = float(product.get("quantity", 1))
                        unit_price = float(product.get("unit_price", 0))
                        line_total = quantity * unit_price
                        total_amount += line_total
                        
                        quote_preview["products"].append({
                            "code": product.get("code", ""),
                            "name": product.get("name", "Sans nom"),
                            "quantity": quantity,
                            "unit_price": unit_price,
                            "line_total": line_total,
                            "stock": product.get("stock", 0)
                        })

                quote_preview["total_amount"] = total_amount

                # Retourner une r√©ponse WARNING avec tous les d√©tails n√©cessaires
                warning_response = {
                    "success": False,  # False pour arr√™ter le polling
                    "status": "warning",  
                    "task_id": self.task_id,
                    "message": f"Devis existants d√©tect√©s pour {client_name}", 
                    "error_type": "duplicates_detected",
                    "error_details": {
                        "duplicate_check": duplicate_check,
                        "client_name": client_name,
                        "client_id": client_info.get("data", {}).get("Id"),
                        "action_required": "Des devis existants ont √©t√© trouv√©s. Que souhaitez-vous faire ?",
                        "quote_preview": quote_preview
                    }
                }

                # üîß CRITIQUE : Marquer la t√¢che comme termin√©e AVANT de retourner
                if self.current_task and self.task_id:
                    progress_tracker.complete_task(self.task_id, warning_response)

                logger.info(f"üîß RETOUR WARNING RESPONSE pour t√¢che {self.task_id}")
                return warning_response
            else:
                # Pas de doublons, continuer normalement
                self._track_step_complete("check_duplicates", "Aucun doublon d√©tect√©")
    
            # ========== PHASE 3: TRAITEMENT DES PRODUITS ==========
            
            # √âtape 3.1: Connexion catalogue
            self._track_step_start("connect_catalog", "Connexion au catalogue...")
            await asyncio.sleep(0.3)  # Simulation connexion
            self._track_step_complete("connect_catalog", "Catalogue accessible")
            
            # √âtape 3.2: Recherche produits
            self._track_step_start("lookup_products", "V√©rification des produits...")
            
            products_info = await self._get_products_info(extracted_info.get("products", []))
            self.context["products_info"] = products_info
            
            self._track_step_progress("lookup_products", 60, f"{len(products_info)} produits analys√©s")
            
            # √âtape 3.3: V√©rification stock
            self._track_step_complete("lookup_products", "Produits trouv√©s")
            self._track_step_start("check_stock", "V√©rification du stock...")
            
            availability = await self._check_availability(products_info)
            self.context["availability"] = availability
            
            self._track_step_progress("check_stock", 80, "Stock v√©rifi√©")
            
            # √âtape 3.4: Calcul des prix
            self._track_step_complete("check_stock", "Stock disponible")
            self._track_step_start("calculate_prices", "Calcul des prix...")
            
            # Simulation calcul prix (logique d√©j√† dans get_products_info)
            await asyncio.sleep(0.2)
            self._track_step_progress("calculate_prices", 90, "Prix calcul√©s")
            
            # √âtape 3.5: Produits pr√™ts
            self._track_step_complete("calculate_prices", "Prix finalis√©s")
            self._track_step_complete("products_ready", f"{len([p for p in products_info if 'error' not in p])} produits confirm√©s")
            
            # ========== PHASE 4: CR√âATION DU DEVIS ==========
            
            # √âtape 4.1: Pr√©paration
            self._track_step_start("prepare_quote", "Pr√©paration du devis...")
            
            # Logique de pr√©paration (regroupement des donn√©es)
            await asyncio.sleep(0.2)
            self._track_step_progress("prepare_quote", 70, "Donn√©es consolid√©es")
            
            # √âtape 4.2: Enregistrement SAP
            self._track_step_complete("prepare_quote", "Devis pr√©par√©")
            self._track_step_start("save_to_sap", "Enregistrement dans SAP...")
            
            quote_result = await self._create_quote_in_salesforce()
            self.context["quote_result"] = quote_result
            
            if not quote_result.get("success"):
                self._track_step_fail("save_to_sap", quote_result.get("error", "Erreur SAP"),
                                    "Impossible d'enregistrer dans SAP")
                return self._build_error_response("Erreur de cr√©ation", quote_result.get("error"))
            
            self._track_step_progress("save_to_sap", 85, "Enregistr√© dans SAP")
            
            # √âtape 4.3: Synchronisation Salesforce
            self._track_step_complete("save_to_sap", "SAP mis √† jour")
            self._track_step_start("sync_salesforce", "Synchronisation Salesforce...")
            
            # La sync est d√©j√† dans _create_quote_in_salesforce
            await asyncio.sleep(0.3)
            self._track_step_progress("sync_salesforce", 95, "Salesforce synchronis√©")
            
            # √âtape 4.4: Finalisation
            self._track_step_complete("sync_salesforce", "Synchronisation termin√©e")
            self._track_step_start("quote_finalized", "Finalisation...")
            
            # Construire la r√©ponse finale
            response = self._build_response()
            response["task_id"] = self.task_id  # Ajouter l'ID de t√¢che
            
            self._track_step_complete("quote_finalized", "Devis g√©n√©r√© avec succ√®s")
            
            # Terminer la t√¢che
            if self.current_task:
                progress_tracker.complete_task(self.task_id, response)
            
            logger.info(f"=== WORKFLOW TERMIN√â - T√¢che {self.task_id} ===")
            return response
            
        except Exception as e:
            logger.exception(f"Erreur critique dans le workflow: {str(e)}")
            
            # Marquer la t√¢che comme √©chou√©e
            if self.current_task and self.task_id:
                progress_tracker.fail_task(self.task_id, str(e))
            
            return self._build_error_response("Erreur syst√®me", str(e))
    async def _extract_info_from_prompt(self, prompt: str) -> Dict[str, Any]:
        """Extraction des informations avec fallback robuste - VERSION ORIGINALE RESTAUR√âE"""
        try:
            # Tenter extraction via LLM (m√©thode statique correcte)
            extracted_info = await LLMExtractor.extract_quote_info(prompt)
            if "error" not in extracted_info:
                logger.info("Extraction LLM r√©ussie")
                return extracted_info
        except Exception as e:
            logger.warning(f"√âchec extraction LLM: {str(e)}")
        
        # Fallback vers extraction manuelle SIMPLE
        return await self._extract_info_basic_simple(prompt)
    
    def get_task_status(self, task_id: str = None) -> Optional[Dict[str, Any]]:
        """R√©cup√®re le statut d√©taill√© d'une t√¢che"""
        target_id = task_id or self.task_id
        if not target_id:
            return None
            
        task = progress_tracker.get_task(target_id)
        if not task:
            return None
            
        return task.get_detailed_progress()
    async def _handle_client_not_found_with_validation(self, client_name: str) -> Dict[str, Any]:
        """G√®re le cas o√π un client n'est pas trouv√© en utilisant le validateur"""
        logger.info(f"üîç Traitement client non trouv√© avec validation: {client_name}")
        
        # CORRECTION 1: V√©rifier si client_name est None ou vide
        if not client_name or client_name.strip() == "":
            logger.warning("‚ùå Nom de client vide ou None - impossible de valider")
            return {
                "client_created": False,
                "error": "Nom de client manquant - impossible de proc√©der √† la validation",
                "suggestion": "V√©rifiez que le prompt contient un nom de client valide"
            }
        
        try:
            # D√©tecter le pays probable
            country = self._detect_country_from_name(client_name)
            logger.info(f"Pays d√©tect√©: {country}")
            
            # Pr√©parer les donn√©es de base du client avec informations minimales
            client_data = {
                "company_name": client_name.strip(),
                "billing_country": country,
                # CORRECTION 2: Ajouter un email fictif pour contourner la validation stricte (POC)
                "email": f"contact@{client_name.replace(' ', '').lower()}.com",
                "phone": "+33 1 00 00 00 00" if country == "FR" else "+1 555 000 0000"
            }
            
            # Valider avec le validateur client
            validation_result = await self.client_validator.validate_complete(client_data, country)
            
            # CORRECTION 3: Accepter les warnings mais pas les erreurs critiques
            critical_errors = [err for err in validation_result.get("errors", []) 
                            if "obligatoire" in err.lower() and "nom" in err.lower()]
            
            if len(critical_errors) == 0:  # Seulement les erreurs critiques bloquent
                # Validation acceptable, cr√©er le client
                logger.info("‚úÖ Validation acceptable (warnings ignor√©s pour POC), cr√©ation du client...")
                
                # Enrichir les donn√©es avec les informations valid√©es
                enriched_data = {**client_data, **validation_result.get("enriched_data", {})}
                
                # Cr√©er le client dans Salesforce
                sf_client = await self._create_salesforce_client_from_validation(enriched_data, validation_result)
                
                if sf_client.get("success"):
                    # Cr√©er aussi dans SAP avec les donn√©es valid√©es
                    sap_client = await self._create_sap_client_from_validation(enriched_data, sf_client)
                    
                    return {
                        "client_created": True,
                        "client_info": {
                            "found": True,
                            "data": sf_client["data"]
                        },
                        "validation_details": validation_result,
                        "sap_client": sap_client
                    }
                else:
                    return {
                        "client_created": False,
                        "error": f"Erreur cr√©ation Salesforce: {sf_client.get('error')}"
                    }
            else:
                # Erreurs critiques trouv√©es
                logger.warning(f"‚ùå Erreurs critiques trouv√©es: {critical_errors}")
                return {
                    "client_created": False,
                    "error": f"Erreurs critiques de validation: {'; '.join(critical_errors)}",
                    "validation_details": validation_result
                }
                
        except Exception as e:
            logger.exception(f"Erreur lors de la validation du client: {str(e)}")
            return {
                "client_created": False,
                "error": f"Erreur syst√®me de validation: {str(e)}"
            }
    async def _validate_products_with_suggestions(self, products: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Valide les produits avec suggestions intelligentes
        """
        logger.info(f"üîç Validation de {len(products)} produit(s) avec suggestions")
        
        validated_products = []
        self.product_suggestions = []
        
        for i, product in enumerate(products):
            product_code = product.get("code", "")
            quantity = product.get("quantity", 1)
            
            logger.info(f"üîç Validation produit {i+1}: {product_code}")
            
            try:
                # === RECHERCHE CLASSIQUE (code existant) ===
                sap_result = await self.mcp_connector.call_sap_mcp("get_item", {"item_code": product_code})
                
                if sap_result.get("success") and sap_result.get("data"):
                    # Produit trouv√© directement
                    product_data = sap_result["data"]
                    validated_products.append({
                        "found": True,
                        "data": product_data,
                        "quantity": quantity,
                        "suggestions": None
                    })
                    self.product_suggestions.append(None)
                    logger.info(f"‚úÖ Produit trouv√© directement: {product_code}")
                    continue
                
                # === NOUVEAU : RECHERCHE INTELLIGENTE ===
                logger.info(f"üß† Produit '{product_code}' non trouv√©, activation des suggestions...")
                
                # R√©cup√©rer tous les produits pour la recherche floue
                all_products_result = await self.mcp_connector.call_sap_mcp("get_all_items", {"limit": 1000})
                available_products = all_products_result.get("data", []) if all_products_result.get("success") else []
                
                # G√©n√©rer les suggestions
                product_suggestion = await self.suggestion_engine.suggest_product(product_code, available_products)
                self.product_suggestions.append(product_suggestion)
                
                if product_suggestion.has_suggestions:
                    primary_suggestion = product_suggestion.primary_suggestion
                    logger.info(f"üéØ Suggestion produit: {primary_suggestion.suggested_value} (score: {primary_suggestion.score})")
                    
                    validated_products.append({
                        "found": False,
                        "original_code": product_code,
                        "quantity": quantity,
                        "suggestions": product_suggestion.to_dict(),
                        "auto_suggest": (primary_suggestion.confidence.value == "high"),
                        "message": product_suggestion.conversation_prompt
                    })
                else:
                    # Aucune suggestion
                    validated_products.append({
                        "found": False,
                        "original_code": product_code,
                        "quantity": quantity,
                        "suggestions": None,
                        "message": f"Produit '{product_code}' non trouv√© dans le catalogue"
                    })
                    
            except Exception as e:
                logger.exception(f"Erreur validation produit {product_code}: {str(e)}")
                validated_products.append({
                    "found": False,
                    "original_code": product_code,
                    "quantity": quantity,
                    "error": str(e)
                })
                self.product_suggestions.append(None)
        
        return validated_products
    
    def _detect_country_from_name(self, client_name: str) -> str:
        """D√©tecte le pays probable √† partir du nom du client"""
        # CORRECTION 4: Gestion robuste des valeurs None
        if not client_name:
            return "FR"  # Par d√©faut
            
        client_name_lower = client_name.lower()
        
        # CORRECTION 5: Am√©liorer la d√©tection USA
        us_indicators = ["inc", "llc", "corp", "corporation", "ltd", "usa", "america", "-usa-"]
        if any(indicator in client_name_lower for indicator in us_indicators):
            return "US"
        
        # Indicateurs fran√ßais
        french_indicators = ["sarl", "sas", "sa", "eurl", "sasu", "sci", "france", "paris", "lyon", "marseille", "-france-"]
        if any(indicator in client_name_lower for indicator in french_indicators):
            return "FR"
        
        # Indicateurs britanniques
        uk_indicators = ["limited", "plc", "uk", "britain", "london"]
        if any(indicator in client_name_lower for indicator in uk_indicators):
            return "UK"
        
        # Par d√©faut, France (march√© principal)
        return "FR"
    
    async def _create_salesforce_client_from_validation(self, client_data: Dict[str, Any], validation_result: Dict[str, Any]) -> Dict[str, Any]:
        """Cr√©e un client dans Salesforce avec les donn√©es valid√©es"""
        try:
            logger.info("Cr√©ation client Salesforce avec donn√©es valid√©es")
            
            # Pr√©parer les donn√©es Salesforce
            sf_data = {
                "Name": validation_result.get("enriched_data", {}).get("normalized_company_name", client_data["company_name"]),
                "Type": "Customer",
                "Description": f"Client cr√©√© automatiquement via NOVA avec validation {validation_result['country']}",
            }
            
            # Ajouter les donn√©es enrichies si disponibles
            enriched = validation_result.get("enriched_data", {})
            if enriched.get("normalized_email"):
                # Note: Salesforce Account n'a pas de champ Email standard, on l'ajoute en description
                sf_data["Description"] += f" - Email: {enriched['normalized_email']}"
            
            if enriched.get("normalized_website"):
                sf_data["Website"] = enriched["normalized_website"]
            
            # Utiliser les donn√©es SIRET si disponibles (France)
            siret_data = enriched.get("siret_data", {})
            if siret_data:
                sf_data["Description"] += f" - SIRET: {siret_data.get('siret', '')}"
                if siret_data.get("activity_label"):
                    sf_data["Industry"] = siret_data["activity_label"][:40]  # Limiter la taille
            
            # Cr√©er dans Salesforce
            result = await MCPConnector.call_salesforce_mcp("salesforce_create_record", {
                "sobject": "Account",
                "data": sf_data
            })
            
            if result.get("success"):
                # R√©cup√©rer les donn√©es compl√®tes du client cr√©√©
                client_id = result["id"]
                detailed_query = f"""
                SELECT Id, Name, AccountNumber, 
                    BillingStreet, BillingCity, BillingState, BillingPostalCode, BillingCountry,
                    ShippingStreet, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry,
                    Phone, Fax, Website, Industry, AnnualRevenue, NumberOfEmployees,
                    Description, Type, OwnerId, CreatedDate, LastModifiedDate
                FROM Account 
                WHERE Id = '{client_id}'
                """
                
                detailed_result = await MCPConnector.call_salesforce_mcp("salesforce_query", {"query": detailed_query})
                
                if "error" not in detailed_result and detailed_result.get("totalSize", 0) > 0:
                    client_data_complete = detailed_result["records"][0]
                    return {
                        "success": True,
                        "id": client_id,
                        "data": client_data_complete
                    }
                else:
                    return {
                        "success": True,
                        "id": client_id,
                        "data": {"Id": client_id, "Name": sf_data["Name"]}
                    }
            else:
                return {
                    "success": False,
                    "error": result.get("error", "Erreur cr√©ation Salesforce")
                }
                
        except Exception as e:
            logger.exception(f"Erreur cr√©ation client Salesforce valid√©: {str(e)}")
            return {
                "success": False,
                "error": str(e)
            }
    async def apply_client_suggestion(self, suggestion_choice: Dict[str, Any], 
                                    workflow_context: Dict[str, Any]) -> Dict[str, Any]:
        """
        Applique le choix de l'utilisateur pour une suggestion client
        """
        logger.info(f"üéØ Application suggestion client: {suggestion_choice}")
        
        choice_type = suggestion_choice.get("type")  # "use_suggestion", "create_new", "manual_entry"
        
        if choice_type == "use_suggestion":
            # Utiliser la suggestion propos√©e
            suggested_client = suggestion_choice.get("selected_client")
            
            # Reprendre le workflow avec le client sugg√©r√©
            workflow_context["extracted_info"]["client"] = suggested_client["name"]
            return await self.process_prompt(  # ‚úÖ CORRECT
                workflow_context["extracted_info"]["original_prompt"],
                task_id=workflow_context["task_id"]
            )
        
        elif choice_type == "create_new":
            # D√©clencher le processus de cr√©ation client
            return {
                "status": "client_creation_required",
                "message": "Processus de cr√©ation client √† impl√©menter",
                "workflow_context": workflow_context
            }
        
        else:
            return self._build_error_response("Choix non support√©", f"Type de choix '{choice_type}' non reconnu")

    async def apply_product_suggestions(self, product_choices: List[Dict[str, Any]], 
                                    workflow_context: Dict[str, Any]) -> Dict[str, Any]:
        """
        Applique les choix de l'utilisateur pour les suggestions produits
        """
        logger.info(f"üéØ Application suggestions produits: {len(product_choices)} choix")
        
        # Reconstituer la liste des produits avec les choix utilisateur
        final_products = []
        for choice in product_choices:
            if choice.get("type") == "use_suggestion":
                suggested_product = choice.get("selected_product")
                final_products.append({
                    "code": suggested_product["code"],
                    "quantity": choice.get("quantity", 1)
                })
            # Ajouter d'autres types de choix selon les besoins
        
        # Reprendre le workflow avec les produits corrig√©s
        workflow_context["extracted_info"]["products"] = final_products
        return await self.process_prompt(
            workflow_context["extracted_info"]["original_prompt"],
            task_id=workflow_context["task_id"]
        )
 
    async def _create_sap_client_from_validation(self, client_data: Dict[str, Any], salesforce_client: Dict[str, Any]) -> Dict[str, Any]:
        """Cr√©e un client dans SAP avec les donn√©es valid√©es"""
        try:
            logger.info("Cr√©ation client SAP avec donn√©es valid√©es")
            
            # Utiliser le code client sugg√©r√© par le validateur ou g√©n√©rer un nouveau
            enriched = client_data.get("enriched_data", {})
            card_code = enriched.get("suggested_client_code")
            
            if not card_code:
                # G√©n√©rer un CardCode de secours
                import re
                import time
                clean_name = re.sub(r'[^a-zA-Z0-9]', '', client_data["company_name"])[:8]
                timestamp = str(int(time.time()))[-4:]
                card_code = f"C{clean_name}{timestamp}".upper()[:15]
            
            # Pr√©parer les donn√©es SAP
            sap_data = {
                "CardCode": card_code,
                "CardName": client_data["company_name"],
                "CardType": "cCustomer",
                "GroupCode": 100,
                "Currency": "EUR",
                "Valid": "tYES",
                "Frozen": "tNO",
                "Notes": "Client cr√©√© automatiquement via NOVA avec validation",
                "FederalTaxID": salesforce_client.get("id", "")[:32]  # R√©f√©rence crois√©e
            }
            
            # Ajouter les donn√©es SIRET si disponibles
            siret_data = enriched.get("siret_data", {})
            if siret_data:
                sap_data["Notes"] += f" - SIRET: {siret_data.get('siret', '')}"
            
            # Cr√©er dans SAP
            result = await MCPConnector.call_sap_mcp("sap_create_customer_complete", {
                "customer_data": sap_data
            })
            
            if result.get("success"):
                logger.info(f"‚úÖ Client SAP cr√©√© avec validation: {card_code}")
                return {
                    "success": True,
                    "created": True,
                    "data": {"CardCode": card_code, "CardName": client_data["company_name"]},
                    "validation_used": True
                }
            else:
                logger.warning(f"‚ùå Erreur cr√©ation client SAP valid√©: {result.get('error')}")
                return {
                    "success": False,
                    "error": result.get("error", "Erreur cr√©ation SAP"),
                    "validation_used": True
                }
                
        except Exception as e:
            logger.exception(f"Erreur cr√©ation client SAP valid√©: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "validation_used": True
            }
        
    async def _find_product_in_salesforce(self, product_code: str) -> Optional[str]:
        """Trouve l'ID Salesforce correspondant au code produit SAP - RESTAUR√âE"""
        try:
            query = f"SELECT Id, Name, ProductCode FROM Product2 WHERE ProductCode = '{product_code}' LIMIT 1"
            result = await MCPConnector.call_salesforce_mcp("salesforce_query", {"query": query})
            
            if "error" not in result and result.get("totalSize", 0) > 0:
                return result["records"][0]["Id"]
            
            logger.info(f"Produit {product_code} non trouv√© dans Salesforce")
            return None
            
        except Exception as e:
            logger.warning(f"Erreur recherche produit Salesforce {product_code}: {str(e)}")
            return None
        
    async def _prepare_quote_data(self) -> Dict[str, Any]:
        """Pr√©pare les donn√©es du devis"""
        # Pr√©parer les donn√©es pour la cr√©ation du devis
        client_info = self.context.get("client_info", {})
        products_info = self.context.get("products_info", [])
        
        # R√©cup√©rer les d√©tails du client
        client_data = client_info.get("data", {})
        
        # Pr√©parer les lignes de devis
        quote_lines = []
        
        for product in products_info:
            if isinstance(product, dict) and "error" not in product:
                quote_lines.append({
                    "product_id": product.get("id"),
                    "quantity": product.get("quantity", 1),
                    "unit_price": product.get("unit_price", 0)
                })
        
        return {
            "client": {
                "id": client_data.get("Id"),
                "name": client_data.get("Name"),
                "account_number": client_data.get("AccountNumber")
            },
            "quote_lines": quote_lines,
            "total_amount": sum(line["quantity"] * line["unit_price"] for line in quote_lines),
            "draft_mode": self.draft_mode
        }

    async def create_quote_with_confirmation(self, confirmed: bool = False) -> Dict[str, Any]:
        """Cr√©e le devis apr√®s confirmation de l'utilisateur
        
        Args:
            confirmed: True si l'utilisateur a confirm√© la cr√©ation du devis
            
        Returns:
            R√©ponse format√©e avec les d√©tails du devis cr√©√©
        """
        logger.info(f"Traitement de la confirmation utilisateur, confirm√©={confirmed}")
        
        if not confirmed:
            return {
                "status": "cancelled",
                "message": "Cr√©ation du devis annul√©e"
            }
            
        # R√©cup√©rer le contexte pour poursuivre le workflow
        client_info = self.context.get("client_info", {})
        products_info = self.context.get("products_info", [])
        
        if not client_info or not products_info:
            logger.error("Contexte incomplet pour finaliser le devis")
            return {
                "status": "error",
                "message": "Donn√©es insuffisantes pour cr√©er le devis"
            }
        
        # ===== Poursuivre avec la cr√©ation du devis =====
        logger.info("Confirmation approuv√©e, poursuite de la cr√©ation du devis")
        
        self._track_step_start("create_quote", "Cr√©ation du devis apr√®s confirmation...")
        
        # Cr√©er le devis dans Salesforce et SAP
        quote_result = await self._create_quote_in_salesforce()
        self.context["quote_result"] = quote_result
        
        if not quote_result.get("success"):
            self._track_step_fail("create_quote", quote_result.get("error", "Erreur inconnue"),
                               "Impossible de cr√©er le devis confirm√©")
            return {
                "status": "error",
                "message": f"Erreur lors de la cr√©ation du devis: {quote_result.get('error', 'Erreur inconnue')}"
            }
            
        self._track_step_complete("create_quote", "Devis cr√©√© avec succ√®s")
        
        # Construire la r√©ponse finale
        response = self._build_response()
        
        # Marquer la t√¢che comme termin√©e
        if self.current_task and self.task_id:
            from services.progress_tracker import progress_tracker
            progress_tracker.complete_task(self.task_id, response)
            
        return response
        
    async def _check_sap_client_by_name(self, client_name: str, salesforce_client: Dict[str, Any] = None) -> Dict[str, Any]:
        """V√©rifie si le client existe dans SAP par son nom
        
        Args:
            client_name: Nom du client √† rechercher
            salesforce_client: Donn√©es du client Salesforce pour cr√©ation SAP si n√©cessaire
        """
        try:
            # V√©rifier si le client existe dans SAP par nom
            client_search = await MCPConnector.call_sap_mcp("sap_search", {
                "query": client_name,
                "entity_type": "BusinessPartners",
                "limit": 1
            })
            
            if "error" not in client_search and client_search.get("count", 0) > 0:
                # Client trouv√©
                sap_client = client_search.get("results", [])[0]
                logger.info(f"Client SAP existant trouv√©: {sap_client.get('CardCode')} - {sap_client.get('CardName')}")
                return {"created": False, "data": sap_client}
            
            # Client non trouv√©, le cr√©er avec TOUTES les donn√©es Salesforce si disponibles
            logger.info("Client non trouv√© dans SAP, cr√©ation avec donn√©es compl√®tes...")
            
            # V√©rifier que nous avons les donn√©es Salesforce
            sf_client = salesforce_client or {}
            client_id = sf_client.get("Id", "")
            
            # G√©n√©rer un CardCode unique
            import re
            import time
            
            # Nettoyer le nom pour le CardCode
            clean_name = re.sub(r'[^a-zA-Z0-9]', '', client_name)[:8]
            timestamp = str(int(time.time()))[-4:]
            card_code = f"C{clean_name}{timestamp}".upper()[:15]
            
            # Pr√©parer les donn√©es compl√®tes pour SAP
            sap_client_data = {
                "CardCode": card_code,
                "CardName": client_name,
                "CardType": "cCustomer",
                "GroupCode": 100,
                
                # Adresse de facturation
                "BillToStreet": sf_client.get("BillingStreet", "")[:254] if sf_client.get("BillingStreet") else "",
                "BillToCity": sf_client.get("BillingCity", "")[:100] if sf_client.get("BillingCity") else "",
                "BillToState": sf_client.get("BillingState", "")[:100] if sf_client.get("BillingState") else "",
                "BillToZipCode": sf_client.get("BillingPostalCode", "")[:20] if sf_client.get("BillingPostalCode") else "",
                "BillToCountry": sf_client.get("BillingCountry", "")[:3] if sf_client.get("BillingCountry") else "",
                
                # Adresse de livraison
                "ShipToStreet": sf_client.get("ShippingStreet") or sf_client.get("BillingStreet", ""),
                "ShipToCity": sf_client.get("ShippingCity") or sf_client.get("BillingCity", ""),
                "ShipToState": sf_client.get("ShippingState") or sf_client.get("BillingState", ""),
                "ShipToZipCode": sf_client.get("ShippingPostalCode") or sf_client.get("BillingPostalCode", ""),
                "ShipToCountry": sf_client.get("ShippingCountry") or sf_client.get("BillingCountry", ""),
                
                # Informations de contact
                "Phone1": sf_client.get("Phone", "")[:20] if sf_client.get("Phone") else "",
                "Fax": sf_client.get("Fax", "")[:20] if sf_client.get("Fax") else "",
                "Website": sf_client.get("Website", "")[:100] if sf_client.get("Website") else "",
                
                # Informations m√©tier
                "Industry": sf_client.get("Industry", "")[:30] if sf_client.get("Industry") else "",
                "Notes": sf_client.get("Description", "")[:254] if sf_client.get("Description") else "",
                
                # R√©f√©rence crois√©e Salesforce
                "FederalTaxID": client_id[:32] if client_id else "",
                
                # Param√®tres par d√©faut
                "Currency": "EUR",
                "Valid": "tYES",
                "Frozen": "tNO"
            }
            
            logger.info(f"Cr√©ation client SAP avec donn√©es: {json.dumps(sap_client_data, indent=2)}")
            
            # Utiliser la nouvelle m√©thode MCP pour cr√©er le client
            create_result = await MCPConnector.call_sap_mcp("sap_create_customer_complete", {
                "customer_data": sap_client_data
            })
            
            if not create_result.get("success", False):
                logger.error(f"Erreur cr√©ation client SAP: {create_result.get('error', 'Erreur inconnue')}")
                return {"created": False, "error": create_result.get('error', 'Erreur inconnue')}
            
            logger.info(f"‚úÖ Client SAP cr√©√© avec succ√®s: {card_code}")
            return {"created": True, "data": create_result.get("data", {"CardCode": card_code, "CardName": client_name})}
            
        except Exception as e:
            logger.exception(f"Erreur cr√©ation client SAP: {str(e)}")
            return {"created": False, "error": str(e)}
    
    async def _create_quote_in_salesforce(self) -> Dict[str, Any]:
        """Cr√©e le devis dans SAP ET Salesforce - VERSION COMPL√àTEMENT R√â√âCRITE"""
        logger.info("=== D√âBUT CR√âATION DEVIS SAP ET SALESFORCE ===")
        
        # R√©cup√©ration des donn√©es du contexte
        client_info = self.context.get("client_info", {})
        products_info = self.context.get("products_info", [])
        sap_client = self.context.get("sap_client", {})
        
        # Log du contexte disponible
        logger.info(f"Client info disponible: {bool(client_info.get('found'))}")
        logger.info(f"Produits disponibles: {len(products_info)}")
        logger.info(f"Client SAP disponible: {bool(sap_client.get('data'))}")
        
        try:
            # ========== √âTAPE 1: PR√âPARATION DES DONN√âES DE BASE ==========
            
            # R√©cup√©rer les donn√©es client Salesforce
            sf_client_data = client_info.get("data", {})
            client_name = sf_client_data.get("Name", "Client Unknown")
            client_id = sf_client_data.get("Id", "")
            
            logger.info(f"Client Salesforce: {client_name} (ID: {client_id})")
            
            # Cr√©er le client SAP si n√©cessaire
            logger.info("=== CR√âATION/V√âRIFICATION CLIENT SAP ===")
            if not sap_client.get("data"):
                logger.info("Client SAP non trouv√©, cr√©ation n√©cessaire...")
            sap_client_result = await self._create_sap_client_if_needed(client_info)
            
            # CORRECTION : Traiter le r√©sultat correctement
            if sap_client_result.get("success") and sap_client_result.get("client"):
                # Mettre √† jour le contexte avec le client SAP trouv√©/cr√©√©
                self.context["sap_client"] = {
                    "data": sap_client_result["client"],
                    "created": True  # ou False si trouv√©
                }
                sap_client = self.context["sap_client"]
                logger.info(f"‚úÖ Client SAP disponible: {sap_client_result['client'].get('CardCode')}")
            else:
                logger.error("‚ùå AUCUN CLIENT SAP DISPONIBLE")
                return {
                    "success": False,
                    "error": "Client SAP non disponible pour cr√©er le devis"
                }
            
            # V√©rifier que nous avons un client SAP
            sap_card_code = None
            if sap_client.get("data") and sap_client["data"].get("CardCode"):
                sap_card_code = sap_client["data"]["CardCode"]
                logger.info(f"Client SAP confirm√©: {sap_card_code}")
            else:
                logger.error("‚ùå AUCUN CLIENT SAP DISPONIBLE")
                return {
                    "success": False,
                    "error": "Client SAP non disponible pour cr√©er le devis"
                }
            
            # ========== √âTAPE 2: PR√âPARATION DES PRODUITS ==========
            
            logger.info("=== PR√âPARATION DES LIGNES PRODUITS ===")
            valid_products = [p for p in products_info if isinstance(p, dict) and "error" not in p]
            
            if not valid_products:
                logger.error("‚ùå AUCUN PRODUIT VALIDE POUR LE DEVIS")
                return {
                    "success": False,
                    "error": "Aucun produit valide trouv√© pour cr√©er le devis"
                }
            
            logger.info(f"Produits valides: {len(valid_products)}")
            
            # Pr√©parer les lignes pour SAP
            document_lines = []
            total_amount = 0.0
            
            for idx, product in enumerate(valid_products):
                quantity = float(product.get("quantity", 1))
                unit_price = float(product.get("unit_price", 0))
                line_total = quantity * unit_price
                total_amount += line_total
                
                line = {
                    "ItemCode": product.get("code"),
                    "Quantity": quantity,
                    "Price": unit_price,
                    "DiscountPercent": 0.0,
                    "TaxCode": "S1",
                    "LineNum": idx
                }
                document_lines.append(line)
                
                logger.info(f"Ligne {idx}: {product.get('code')} x{quantity} = {line_total}‚Ç¨")
            
            logger.info(f"Total calcul√©: {total_amount}‚Ç¨")
            
            # ========== √âTAPE 3: PR√âPARATION DES DONN√âES DEVIS SAP ==========
            
            logger.info("=== PR√âPARATION DONN√âES DEVIS SAP ===")
            
            # Pr√©parer les dates
            today = datetime.now()
            doc_date = today.strftime("%Y-%m-%d")
            due_date = (today + timedelta(days=30)).strftime("%Y-%m-%d")
            
            # Pr√©parer les donn√©es compl√®tes du devis SAP
            quotation_data = {
                "CardCode": sap_card_code,
                "DocDate": doc_date,
                "DocDueDate": due_date,
                "DocCurrency": "EUR",
                "Comments": f"Devis cr√©√© automatiquement via NOVA le {today.strftime('%d/%m/%Y %H:%M')} - Mode: {'DRAFT' if self.draft_mode else 'NORMAL'}",
                "SalesPersonCode": -1,
                "DocumentLines": document_lines,
                "DocTotal": total_amount,
                "VatSum": 0.0,
                "DiscountPercent": 0.0
            }
            
            # Ajouter des champs sp√©cifiques au mode Draft si n√©cessaire
            if self.draft_mode:
                quotation_data["Comments"] = f"[BROUILLON] {quotation_data['Comments']}"
                quotation_data["Remarks"] = "Devis en mode brouillon - Non valid√©"
            
            logger.info("Donn√©es devis SAP pr√©par√©es:")
            logger.info(f"  - Client: {sap_card_code}")
            logger.info(f"  - Lignes: {len(document_lines)}")
            logger.info(f"  - Total: {total_amount}‚Ç¨")
            logger.info(f"  - Mode: {'DRAFT' if self.draft_mode else 'NORMAL'}")
            
            # ========== √âTAPE 4: APPEL SAP ==========
            
            logger.info("=== APPEL SAP POUR CR√âATION DEVIS ===")
            logger.info("Donn√©es compl√®tes envoy√©es √† SAP:")
            logger.info(json.dumps(quotation_data, indent=2, ensure_ascii=False))
            
            sap_quote = None
            
            try:
                # Choisir la m√©thode SAP selon le mode
                if self.draft_mode:
                    logger.info("Appel SAP en mode DRAFT...")
                    sap_quote = await MCPConnector.call_sap_mcp("sap_create_quotation_draft", {
                        "quotation_data": quotation_data
                    })
                else:
                    logger.info("Appel SAP en mode NORMAL...")
                    sap_quote = await MCPConnector.call_sap_mcp("sap_create_quotation_complete", {
                        "quotation_data": quotation_data
                    })
                
                logger.info("=== R√âSULTAT APPEL SAP ===")
                logger.info(f"Type retourn√©: {type(sap_quote)}")
                logger.info(f"Contenu: {sap_quote}")
                
                # V√©rifier le r√©sultat SAP
                if sap_quote is None:
                    logger.error("‚ùå SAP a retourn√© None!")
                    sap_quote = {"success": False, "error": "SAP a retourn√© None - probl√®me de communication"}
                elif not isinstance(sap_quote, dict):
                    logger.error(f"‚ùå SAP a retourn√© un type inattendu: {type(sap_quote)}")
                    sap_quote = {"success": False, "error": f"Type de retour SAP inattendu: {type(sap_quote)}"}
                elif not sap_quote.get("success", False):
                    logger.error(f"‚ùå SAP a signal√© un √©chec: {sap_quote.get('error', 'Erreur non sp√©cifi√©e')}")
                else:
                    logger.info(f"‚úÖ Devis SAP cr√©√© avec succ√®s: DocNum {sap_quote.get('doc_num')}")
                    
            except Exception as e:
                logger.exception(f"‚ùå EXCEPTION lors de l'appel SAP: {str(e)}")
                sap_quote = {"success": False, "error": f"Exception lors de l'appel SAP: {str(e)}"}
            
            # ========== √âTAPE 5: CR√âATION SALESFORCE ==========
            
            logger.info("=== CR√âATION OPPORTUNIT√â SALESFORCE ===")
            
            # Pr√©parer les donn√©es Salesforce avec r√©f√©rence SAP
            sap_ref = ""
            if sap_quote and sap_quote.get("success") and sap_quote.get("doc_num"):
                sap_ref = f" (SAP DocNum: {sap_quote['doc_num']})"
            
            opportunity_data = {
                'Name': f'NOVA-{today.strftime("%Y%m%d-%H%M%S")}',
                'AccountId': client_id,
                'StageName': 'Proposal/Price Quote',
                'CloseDate': due_date,
                'Amount': total_amount,
                'Description': f'Devis g√©n√©r√© automatiquement via NOVA{sap_ref} - Mode: {"Brouillon" if self.draft_mode else "D√©finitif"}',
                'LeadSource': 'NOVA Middleware',
                'Type': 'New Customer',
                'Probability': 50 if not self.draft_mode else 25
            }
            
            logger.info("Cr√©ation opportunit√© Salesforce...")
            logger.info(f"Donn√©es: {json.dumps(opportunity_data, indent=2, ensure_ascii=False)}")
            
            salesforce_quote = None
            
            try:
                opportunity_result = await MCPConnector.call_salesforce_mcp("salesforce_create_record", {
                    "sobject": "Opportunity",
                    "data": opportunity_data
                })
                
                if opportunity_result and opportunity_result.get("success"):
                    opportunity_id = opportunity_result.get("id")
                    logger.info(f"‚úÖ Opportunit√© Salesforce cr√©√©e: {opportunity_id}")
                    
                    salesforce_quote = {
                        "success": True,
                        "id": opportunity_id,
                        "opportunity_id": opportunity_id,
                        "lines_created": len(document_lines),
                        "total_amount": total_amount,
                        "message": f"Opportunit√© Salesforce cr√©√©e avec succ√®s: {opportunity_id}"
                    }
                else:
                    logger.error(f"‚ùå Erreur cr√©ation opportunit√© Salesforce: {opportunity_result}")
                    salesforce_quote = {
                        "success": False,
                        "error": opportunity_result.get("error", "Erreur Salesforce non sp√©cifi√©e")
                    }
                    
            except Exception as e:
                logger.exception(f"‚ùå EXCEPTION lors de la cr√©ation Salesforce: {str(e)}")
                salesforce_quote = {
                    "success": False,
                    "error": f"Exception Salesforce: {str(e)}"
                }
            
            # ========== √âTAPE 6: CONSTRUCTION DE LA R√âPONSE ==========
            
            logger.info("=== CONSTRUCTION R√âPONSE FINALE ===")
            
            # D√©terminer le succ√®s global
            sap_success = sap_quote and sap_quote.get("success", False)
            sf_success = salesforce_quote and salesforce_quote.get("success", False)
            
            # Pour le POC, on consid√®re que le succ√®s = au moins SAP OU Salesforce
            overall_success = sap_success or sf_success
            
            # Construire la r√©ponse finale
            result = {
                "success": overall_success,
                "quote_id": f"SAP-{sap_quote.get('doc_num', 'FAILED')}" if sap_success else f"SF-{salesforce_quote.get('id', 'FAILED')}" if sf_success else f"FAILED-{today.strftime('%Y%m%d-%H%M%S')}",
                "sap_doc_entry": sap_quote.get("doc_entry") if sap_success else None,
                "sap_doc_num": sap_quote.get("doc_num") if sap_success else None,
                "salesforce_quote_id": salesforce_quote.get("id") if sf_success else None,
                "opportunity_id": salesforce_quote.get("id") if sf_success else None,
                "status": "Created" if overall_success else "Failed",
                "total_amount": total_amount,
                "currency": "EUR",
                "draft_mode": self.draft_mode,
                "sap_result": sap_quote,
                "salesforce_result": salesforce_quote,
                "creation_details": {
                    "sap_success": sap_success,
                    "salesforce_success": sf_success,
                    "client_code": sap_card_code,
                    "lines_count": len(document_lines),
                    "creation_timestamp": today.isoformat()
                }
            }
            
            # Message de statut
            if overall_success:
                messages = []
                if sap_success:
                    messages.append(f"SAP DocNum: {sap_quote.get('doc_num')}")
                if sf_success:
                    messages.append(f"Salesforce ID: {salesforce_quote.get('id')}")
                result["message"] = f"Devis cr√©√© avec succ√®s - {', '.join(messages)}"
            else:
                errors = []
                if not sap_success:
                    errors.append(f"SAP: {sap_quote.get('error', 'Erreur inconnue') if sap_quote else 'Aucune r√©ponse'}")
                if not sf_success:
                    errors.append(f"Salesforce: {salesforce_quote.get('error', 'Erreur inconnue') if salesforce_quote else 'Aucune r√©ponse'}")
                result["message"] = f"√âchec cr√©ation devis - {'; '.join(errors)}"
                result["error"] = result["message"]
            
            logger.info("=== CR√âATION DEVIS TERMIN√âE ===")
            logger.info(f"Succ√®s global: {overall_success}")
            logger.info(f"SAP: {'‚úÖ' if sap_success else '‚ùå'}")
            logger.info(f"Salesforce: {'‚úÖ' if sf_success else '‚ùå'}")
            logger.info(f"Quote ID: {result['quote_id']}")
            
            return result
            
        except Exception as e:
            logger.exception(f"‚ùå ERREUR CRITIQUE dans _create_quote_in_salesforce: {str(e)}")
            return {
                "success": False,
                "error": f"Erreur critique lors de la cr√©ation du devis: {str(e)}",
                "quote_id": f"ERROR-{datetime.now().strftime('%Y%m%d-%H%M%S')}",
                "status": "Failed",
                "draft_mode": self.draft_mode,
                "creation_details": {
                    "error_type": "critical_exception",
                    "error_timestamp": datetime.now().isoformat()
                }
            }
    async def _create_sap_client_if_needed(self, client_info: Dict) -> Dict:
        """Cr√©e un client SAP si n√©cessaire - STRUCTURE DE RETOUR CORRIG√âE"""
        import logging
        logger = logging.getLogger(__name__)
        
        try:
            client_name = client_info.get("data", {}).get("Name", "Client NOVA")
            
            # 1. Chercher si le client existe avec sap_search
            search_result = await self.mcp_connector.call_sap_mcp(
                "sap_search", {
                    "query": client_name,
                    "entity_type": "BusinessPartners",
                    "limit": 5
                }
            )
            
            # CORRECTION: V√©rifier la vraie structure de retour SAP
            if "error" not in search_result:
                # Si des r√©sultats existent dans la r√©ponse
                if search_result.get("value") and len(search_result["value"]) > 0:
                    found_client = search_result["value"][0]
                    logger.info(f"‚úÖ Client SAP trouv√©: {found_client.get('CardCode')} - {found_client.get('CardName')}")
                    return {"success": True, "client": found_client}
                elif search_result.get("results") and len(search_result["results"]) > 0:
                    found_client = search_result["results"][0]
                    logger.info(f"‚úÖ Client SAP trouv√©: {found_client.get('CardCode')} - {found_client.get('CardName')}")
                    return {"success": True, "client": found_client}
            
            # 2. Si pas trouv√©, cr√©er le client
            card_code = f"C{datetime.now().strftime('%Y%m%d%H%M%S')}"
            
            customer_data = {
                "CardCode": card_code,
                "CardName": client_name,
                "CardType": "cCustomer",
                "Currency": "EUR",
                "Valid": "tYES",
                "Frozen": "tNO"
            }
            
            create_result = await self.mcp_connector.call_sap_mcp(
                "sap_create_customer_complete", 
                {"customer_data": customer_data}
            )
            
            if create_result.get("success"):
                logger.info(f"‚úÖ Client SAP cr√©√©: {card_code}")
                return {"success": True, "client": {"CardCode": card_code, "CardName": client_name}}
            else:
                logger.error(f"‚ùå √âchec cr√©ation client SAP: {create_result.get('error')}")
                return {"success": False, "error": create_result.get("error", "Erreur inconnue")}
                
        except Exception as e:
            logger.error(f"‚ùå Exception cr√©ation client SAP: {str(e)}")
            return {"success": False, "error": str(e)}
    
    async def _create_salesforce_quote(self, quote_data: Dict[str, Any], sap_quote: Optional[Dict[str, Any]]) -> Dict[str, Any]:
        """Cr√©e R√âELLEMENT le devis dans Salesforce avec tous les d√©tails"""
        try:
            logger.info("=== CR√âATION R√âELLE DU DEVIS DANS SALESFORCE ===")
            
            # R√©f√©rence SAP si disponible
            sap_ref = f" (SAP DocNum: {sap_quote.get('doc_num')})" if sap_quote and sap_quote.get('doc_num') else ""
            
            # 1. Pr√©parer les donn√©es de l'opportunit√© (devis)
            opportunity_data = {
                'Name': f'NOVA-{datetime.now().strftime("%Y%m%d-%H%M%S")}',
                'AccountId': quote_data.get("client", {}).get("id", ""),
                'StageName': 'Proposal/Price Quote',
                'CloseDate': (datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d'),
                'Amount': quote_data.get("total_amount", 0),
                'Description': f'Devis g√©n√©r√© automatiquement via NOVA Middleware{sap_ref}',
                'LeadSource': 'NOVA Middleware',
                'Type': 'New Customer',
                'Probability': 50
            }
            
            logger.info(f"Donn√©es opportunit√© pr√©par√©es: {json.dumps(opportunity_data, indent=2)}")
            
            # 2. Cr√©er l'opportunit√©
            opportunity_result = await MCPConnector.call_salesforce_mcp("salesforce_create_record", {
                "sobject": "Opportunity",
                "data": opportunity_data
            })
            
            if "error" in opportunity_result or not opportunity_result.get("success"):
                logger.error(f"‚ùå Erreur cr√©ation opportunit√©: {opportunity_result.get('error', 'Erreur inconnue')}")
                return {"success": False, "error": opportunity_result.get("error", "√âchec cr√©ation opportunit√©")}
            
            opportunity_id = opportunity_result.get("id")
            logger.info(f"‚úÖ Opportunit√© cr√©√©e dans Salesforce: {opportunity_id}")
            
            # Retourner un r√©sultat simplifi√© pour le POC
            result = {
                "success": True,
                "id": opportunity_id,
                "opportunity_id": opportunity_id,
                "lines_created": len(quote_data.get("quote_lines", [])),
                "total_amount": quote_data.get("total_amount", 0),
                "message": f"Opportunit√© Salesforce cr√©√©e avec succ√®s: {opportunity_id}"
            }
            
            logger.info("=== DEVIS SALESFORCE CR√â√â AVEC SUCC√àS ===")
            return result
            
        except Exception as e:
            logger.exception(f"‚ùå Erreur critique lors de la cr√©ation du devis Salesforce: {str(e)}")
            return {
                "success": False, 
                "error": str(e),
                "message": "Erreur lors de la cr√©ation du devis dans Salesforce"
            }
    
    def _get_stock_value(self, product: Dict[str, Any]) -> float:  # ‚Üê BON
        """Extrait la valeur du stock, qu'il soit un float ou un dict"""
        stock = product.get("stock", 0)
        
        # Si c'est d√©j√† un float/int, le retourner directement
        if isinstance(stock, (int, float)):
            return float(stock)
        
        # Si c'est un dictionnaire, chercher 'total'
        if isinstance(stock, dict):
            return float(stock.get("total", 0))
        
        # Fallback
        return 0.0
    
    def _get_stock_safely(self, product: Dict[str, Any]) -> float:
        """
        Extrait la valeur du stock de mani√®re robuste
        G√®re les cas o√π stock est un float OU un dictionnaire
        """
        stock = product.get("stock", 0)
        
        # Cas 1: stock est d√©j√† un nombre (float/int)
        if isinstance(stock, (int, float)):
            return float(stock)
        
        # Cas 2: stock est un dictionnaire avec 'total'
        if isinstance(stock, dict):
            return float(stock.get("total", 0))
            
        # Cas 3: fallback
        return 0.0
        
    def _build_response(self) -> Dict[str, Any]:
        """üîß CORRECTION : Construit la r√©ponse finale avec nom client correct"""
        logger.info("Construction de la r√©ponse finale enrichie")
        
        client_info = self.context.get("client_info", {})
        quote_result = self.context.get("quote_result", {})
        sap_client = self.context.get("sap_client", {})
        client_validation = self.context.get("client_validation", {})
        products_info = self.context.get("products_info", [])
        extracted_info = self.context.get("extracted_info", {})
        
        if not client_info.get("found", False):
            return {
                "status": "error",
                "message": f"Client non trouv√©: {client_info.get('error', 'Erreur inconnue')}",
                "next_steps": "Veuillez v√©rifier le nom du client et r√©essayer."
            }
        
        if not quote_result.get("success", False):
            return {
                "status": "error",
                "message": f"√âchec de la cr√©ation du devis: {quote_result.get('error', 'Erreur inconnue')}",
                "next_steps": "Veuillez contacter le support technique."
            }
        
        # üéØ CORRECTION CRITIQUE : Extraction intelligente du nom client
        client_name = "Client non identifi√©"
        
        # 1. Essayer le nom enrichi (m√©thode _enrich_client_data)
        if hasattr(self, 'enriched_client_name') and self.enriched_client_name:
            client_name = self.enriched_client_name
            logger.info(f"‚úÖ Nom client depuis enrichissement: {client_name}")
        
        # 2. Essayer les donn√©es Salesforce
        elif client_info.get("data", {}).get("Name"):
            client_name = client_info["data"]["Name"]
            logger.info(f"‚úÖ Nom client depuis Salesforce: {client_name}")
        
        # 3. Essayer les donn√©es SAP (nettoyer le format "CODE - NOM")
        elif sap_client and sap_client.get("data", {}).get("CardName"):
            sap_name = sap_client["data"]["CardName"]
            # Nettoyer le format "CSAFRAN8267 - SAFRAN" -> "SAFRAN"
            if " - " in sap_name:
                client_name = sap_name.split(" - ", 1)[1].strip()
            else:
                client_name = sap_name
            logger.info(f"‚úÖ Nom client depuis SAP (nettoy√©): {client_name}")
        
        # 4. En dernier recours, utiliser l'extraction LLM
        elif extracted_info.get("client"):
            client_name = extracted_info["client"]
            logger.info(f"‚úÖ Nom client depuis extraction LLM: {client_name}")
        
        # 5. NOUVEAU: Utiliser les donn√©es SAP brutes depuis le r√©sultat du devis
        elif quote_result.get("sap_result", {}).get("raw_result", {}).get("CardName"):
            sap_card_name = quote_result["sap_result"]["raw_result"]["CardName"]
            client_name = sap_card_name
            logger.info(f"‚úÖ Nom client depuis SAP raw result: {client_name}")
        
        # Construction des donn√©es client pour l'interface
        client_data = client_info.get("data", {})
        client_response = {
            "name": client_name,  # ‚Üê UTILISER LE NOM CORRECTEMENT EXTRAIT
            "account_number": client_data.get("AccountNumber") or sap_client.get("data", {}).get("CardCode") or "",
            "salesforce_id": client_data.get("Id", ""),
            "phone": client_data.get("Phone", ""),
            "email": client_data.get("Email", ""),
            "city": client_data.get("BillingCity", ""),
            "country": client_data.get("BillingCountry", "")
        }
        
        # Construction des donn√©es produits (garder la logique existante)
        products_response = []
        for product in products_info:
            if isinstance(product, dict) and "error" not in product:
                # üîß EXTRACTION CORRIG√âE DES DONN√âES PRODUIT
                product_code = (product.get("code") or 
                            product.get("item_code") or 
                            product.get("ItemCode", ""))
                
                product_name = (product.get("name") or 
                            product.get("item_name") or 
                            product.get("ItemName", "Sans nom"))
                
                quantity = float(product.get("quantity", 1))
                unit_price = float(product.get("unit_price", 0))
                line_total = quantity * unit_price
                
                product_data = {
                    "code": product_code,                    # ‚úÖ CORRIG√â
                    "name": product_name,                    # ‚úÖ CORRIG√â  
                    "quantity": quantity,                    # ‚úÖ CORRIG√â
                    "unit_price": unit_price,               # ‚úÖ CORRIG√â
                    "line_total": line_total,               # ‚úÖ CORRIG√â
                    "stock_available": self._get_stock_value(product),
                    "available": self._get_stock_safely(product) >= quantity
                }
                products_response.append(product_data)
                
                logger.info(f"‚úÖ Produit format√© dans r√©ponse: {product_code} x{quantity} = {line_total}‚Ç¨")
        
        # üîß CONSTRUCTION R√âPONSE FINALE CORRIG√âE
        response = {
            "success": True,
            "status": "success",
            "quote_id": quote_result.get("opportunity_id", f"NOVA-{datetime.now().strftime('%Y%m%d-%H%M%S')}"),
            
            # üéØ DONN√âES CLIENT CORRIG√âES AVEC BON NOM
            "client": client_response,
            
            # üéØ DONN√âES PRODUITS
            "products": products_response,
            
            # Calculs financiers
            "total_amount": sum(float(p.get("line_total", 0)) for p in products_response),
            "currency": "EUR",
            "date": datetime.now().strftime("%Y-%m-%d"),
            "quote_status": "Created",
            
            # Disponibilit√©
            "all_products_available": all(p.get("available", False) for p in products_response),
            
            # Informations syst√®me
            "sap_doc_num": quote_result.get("sap_doc_num"),
            "salesforce_quote_id": quote_result.get("opportunity_id"),
            "message": f"Devis g√©n√©r√© avec succ√®s pour {client_name}",  # ‚Üê INCLURE LE NOM
            
            # Mode draft
            "draft_mode": self.draft_mode
        }
        
        # Ajouter les informations de validation client si disponibles
        if client_validation:
            response["client_validation"] = {
                "validation_used": True,
                "country": client_validation.get("country", "Unknown"),
                "validation_level": client_validation.get("validation_level", "basic"),
                "warnings": client_validation.get("warnings", []),
                "suggestions": client_validation.get("suggestions", []),
                "enriched_data": client_validation.get("enriched_data", {}),
                "duplicate_check": client_validation.get("duplicate_check", {})
            }
        else:
            response["client_validation"] = {
                "validation_used": False,
                "reason": "Client existant trouv√© dans Salesforce"
            }
        # Informations de v√©rification doublons DEVIS (nouveau)
        duplicate_check = self.context.get("duplicate_check", {})
        if duplicate_check:
            response["duplicate_check"] = {
                "duplicates_found": duplicate_check.get("duplicates_found", False),
                "warnings_count": len(duplicate_check.get("warnings", [])),
                "suggestions_count": len(duplicate_check.get("suggestions", [])),
                "recent_quotes": len(duplicate_check.get("recent_quotes", [])),
                "draft_quotes": len(duplicate_check.get("draft_quotes", [])),
                "similar_quotes": len(duplicate_check.get("similar_quotes", [])),
                "details": duplicate_check
            }
        # Ajouter les r√©f√©rences syst√®me pour tra√ßabilit√©
        response["system_references"] = {
            "sap_client_created": sap_client.get("created", False) if sap_client else False,
            "sap_client_card_code": sap_client.get("data", {}).get("CardCode") if sap_client and sap_client.get("data") else None,
            "quote_creation_timestamp": datetime.now().isoformat(),
            "validation_enabled": self.validation_enabled
        }
        
        logger.info(f"‚úÖ R√©ponse finale enrichie construite avec nom client: {client_name}")
        response["workflow_steps"] = self.workflow_steps
        return response
    
    # ‚úÖ M√âTHODE D'AIDE - Ajouter aussi cette m√©thode pour enrichir les donn√©es client
    def _enrich_client_data(self, client_name: str, salesforce_data: Dict[str, Any]) -> None:
        """Enrichit les donn√©es client dans le contexte"""
        self.enriched_client_name = client_name
        
        # Enrichir le contexte avec le nom correct
        if "client_info" not in self.context:
            self.context["client_info"] = {}
        
        if "data" not in self.context["client_info"]:
            self.context["client_info"]["data"] = {}
        
        # S'assurer que le nom est bien pr√©sent
        self.context["client_info"]["data"]["Name"] = client_name
        self.context["client_info"]["data"].update(salesforce_data)
        
        logger.info(f"‚úÖ Client enrichi dans le contexte: {client_name}")    
    def _build_error_response(self, error_title: str, error_message: str) -> Dict[str, Any]:
        """Construit une r√©ponse d'erreur standardis√©e"""
        logger.error(f"Erreur workflow: {error_title} - {error_message}")
        
        return {
            "status": "error",
            "success": False,
            "task_id": self.task_id,
            "error_title": error_title,
            "error_message": error_message,
            "timestamp": datetime.now().isoformat(),
            "workflow_steps": getattr(self, 'workflow_steps', []),
            "context_available": bool(self.context),
            "draft_mode": self.draft_mode
        }    
    
    async def _validate_client(self, client_name: str) -> Dict[str, Any]:
        """
        Valide le client avec suggestions intelligentes
        """
        logger.info(f"üîç Validation client avec suggestions: {client_name}")
        
        try:
            # === RECHERCHE CLASSIQUE (code existant) ===
            query = f"SELECT Id, Name, AccountNumber, AnnualRevenue, LastActivityDate FROM Account WHERE Name LIKE '%{client_name}%' LIMIT 10"
            sf_result = await self.mcp_connector.call_salesforce_mcp("query", {"query": query})
            
            # Client trouv√© directement
            if sf_result.get("totalSize", 0) > 0 and sf_result.get("records"):
                client_record = sf_result["records"][0]
                self._enrich_client_data(client_record.get("Name", client_name), client_record)
                logger.info(f"‚úÖ Client trouv√© directement: {client_record.get('Name')}")
                return {"found": True, "data": client_record}
            
            # === NOUVEAU : RECHERCHE INTELLIGENTE ===
            logger.info("üß† Client non trouv√©, activation du moteur de suggestions...")
            
            # R√©cup√©rer tous les clients pour la recherche floue
            all_clients_query = "SELECT Id, Name, AccountNumber, AnnualRevenue, LastActivityDate FROM Account LIMIT 1000"
            all_clients_result = await self.mcp_connector.call_salesforce_mcp("query", {"query": all_clients_query})
            
            available_clients = all_clients_result.get("records", []) if all_clients_result.get("totalSize", 0) > 0 else []
            
            # G√©n√©rer les suggestions
            self.client_suggestions = await self.suggestion_engine.suggest_client(client_name, available_clients)
            
            if self.client_suggestions.has_suggestions:
                primary_suggestion = self.client_suggestions.primary_suggestion
                
                # Si confiance √©lev√©e, proposer auto-correction
                if primary_suggestion.confidence.value == "high":
                    logger.info(f"üéØ Suggestion haute confiance: {primary_suggestion.suggested_value} (score: {primary_suggestion.score})")
                    
                    # Retourner avec suggestion pour que l'utilisateur puisse choisir
                    return {
                        "found": False, 
                        "suggestions": self.client_suggestions.to_dict(),
                        "auto_suggest": True,
                        "message": f"Client '{client_name}' non trouv√©. Je sugg√®re '{primary_suggestion.suggested_value}' (similarit√©: {primary_suggestion.score}%)"
                    }
                else:
                    # Confiance moyenne/faible, pr√©senter les options
                    logger.info(f"ü§î Multiple suggestions trouv√©es pour: {client_name}")
                    return {
                        "found": False,
                        "suggestions": self.client_suggestions.to_dict(),
                        "auto_suggest": False,
                        "message": self.client_suggestions.conversation_prompt
                    }
            else:
                # Aucune suggestion, proposer cr√©ation
                logger.info(f"‚ùå Aucune suggestion trouv√©e pour: {client_name}")
                return {
                    "found": False,
                    "suggestions": None,
                    "message": f"Client '{client_name}' non trouv√©. Voulez-vous cr√©er un nouveau client ?"
                }
                
        except Exception as e:
            logger.exception(f"Erreur validation client avec suggestions: {str(e)}")
            return {"found": False, "error": str(e)}
    
    async def _check_duplicate_quotes(self, client_info: Dict[str, Any], products: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        V√©rifie s'il existe d√©j√† des devis similaires pour √©viter les doublons
        
        Args:
            client_info: Informations du client valid√©
            products: Liste des produits demand√©s
            
        Returns:
            Dict avec statut de v√©rification et actions sugg√©r√©es
        """
        logger.info("üîç V√©rification des doublons de devis...")
        
        duplicate_check = {
            "duplicates_found": False,
            "recent_quotes": [],
            "similar_quotes": [],
            "draft_quotes": [],
            "action_required": False,
            "suggestions": [],
            "warnings": []
        }
        
        try:
            # R√©cup√©rer les identifiants client
            client_name = client_info.get("data", {}).get("Name", "")
            
            if not client_name:
                logger.warning("Aucun nom client pour v√©rification doublons")
                return duplicate_check
            
            # 1. V√©rifier les devis SAP r√©cents (derni√®res 48h)
            recent_quotes = await self._get_recent_sap_quotes(client_name, hours=48)
            
            # 2. V√©rifier les devis brouillons existants
            draft_quotes = await self._get_client_draft_quotes(client_name)
            
            # 3. Analyser la similarit√© des produits
            similar_quotes = await self._find_similar_product_quotes(client_name, products)
            
            # Populate results
            duplicate_check["recent_quotes"] = recent_quotes
            duplicate_check["draft_quotes"] = draft_quotes  
            duplicate_check["similar_quotes"] = similar_quotes
            
            # Analyser les r√©sultats
            total_findings = len(recent_quotes) + len(draft_quotes) + len(similar_quotes)
            
            if total_findings > 0:
                duplicate_check["duplicates_found"] = True
                duplicate_check["action_required"] = True
                
                # Messages d'alerte
                if recent_quotes:
                    duplicate_check["warnings"].append(f"‚ö†Ô∏è {len(recent_quotes)} devis r√©cent(s) trouv√©(s) pour {client_name}")
                    
                if draft_quotes:
                    duplicate_check["warnings"].append(f"üìù {len(draft_quotes)} devis en brouillon pour {client_name}")
                    duplicate_check["suggestions"].append("üí° Consid√©rez consolider avec les brouillons existants")
                    
                if similar_quotes:
                    duplicate_check["warnings"].append(f"üîÑ {len(similar_quotes)} devis avec produits similaires")
                    duplicate_check["suggestions"].append("üí° V√©rifiez s'il s'agit d'une mise √† jour ou d'un nouveau besoin")
            
            else:
                duplicate_check["suggestions"].append("‚úÖ Aucun doublon d√©tect√© - Cr√©ation s√©curis√©e")
                
            logger.info(f"V√©rification doublons termin√©e: {total_findings} potentiel(s) doublon(s)")
            return duplicate_check
            
        except Exception as e:
            logger.exception(f"Erreur v√©rification doublons devis: {str(e)}")
            duplicate_check["warnings"].append(f"‚ùå Erreur v√©rification doublons: {str(e)}")
            return duplicate_check

    async def _get_recent_sap_quotes(self, client_name: str, hours: int = 48) -> List[Dict[str, Any]]:
        """R√©cup√®re les devis SAP r√©cents pour un client"""
        try:
            from datetime import datetime, timedelta
            
            # Calculer la date limite
            cutoff_date = datetime.now() - timedelta(hours=hours)
            cutoff_str = cutoff_date.strftime("%Y-%m-%d")
            
            # Rechercher dans SAP avec filtre date et client
            from services.mcp_connector import MCPConnector
            
            result = await MCPConnector.call_sap_mcp("sap_search_quotes", {
                "client_name": client_name,
                "date_from": cutoff_str,
                "limit": 10
            })
            
            if result.get("success") and result.get("quotes"):
                return result["quotes"]
            
            return []
            
        except Exception as e:
            logger.warning(f"Erreur recherche devis r√©cents: {str(e)}")
            return []

    async def _get_client_draft_quotes(self, client_name: str) -> List[Dict[str, Any]]:
        """R√©cup√®re les devis en brouillon pour un client"""
        try:
            from sap_mcp import sap_list_draft_quotes
            
            # R√©cup√©rer tous les brouillons
            draft_result = await sap_list_draft_quotes()
            
            if not draft_result.get("success"):
                return []
            
            # Filtrer par nom client
            client_drafts = [
                quote for quote in draft_result.get("draft_quotes", [])
                if quote.get("card_name", "").lower() == client_name.lower()
            ]
            
            return client_drafts
            
        except Exception as e:
            logger.warning(f"Erreur recherche brouillons client: {str(e)}")
            return []

    async def _find_similar_product_quotes(self, client_name: str, requested_products: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Trouve les devis avec des produits similaires"""
        try:
            # Pour l'instant, impl√©mentation simplifi√©e
            # TODO: Logique avanc√©e de comparaison produits
            
            # Extraire les codes produits demand√©s
            requested_codes = set(product.get("code", "").upper() for product in requested_products)
            
            logger.info(f"Recherche produits similaires pour {client_name}: {requested_codes}")
            
            # Retourner vide pour l'instant - √† impl√©menter selon les besoins
            return []
            
        except Exception as e:
            logger.warning(f"Erreur recherche produits similaires: {str(e)}")
            return []
    async def _get_products_info(self, products: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """R√©cup√®re les informations produits depuis SAP - VERSION CORRIG√âE POUR LES PRIX"""
        if not products:
            logger.warning("Aucun produit sp√©cifi√©")
            return []
        
        logger.info(f"R√©cup√©ration des informations pour {len(products)} produits")
        
        enriched_products = []
        
        for product in products:
            try:
                # Appel MCP pour r√©cup√©rer les d√©tails du produit
                product_details = await MCPConnector.call_sap_mcp("sap_get_product_details", {
                    "item_code": product["code"]
                })
                
                if "error" in product_details:
                    logger.error(f"Erreur produit {product['code']}: {product_details['error']}")
                    # V√©rifier si malgr√© l'erreur, nous avons des informations utiles
                    if product_details.get("ItemName") is not None:
                        enriched_product = {
                            "code": product["code"],
                            "quantity": product["quantity"],
                            "name": product_details.get("ItemName", "Unknown"),
                            "unit_price": float(product_details.get("Price", 0.0)),
                            "stock": product_details.get("stock", {}).get("total", 0),
                            "details": product_details,
                            "salesforce_id": await self._find_product_in_salesforce(product["code"])
                        }
                        enriched_products.append(enriched_product)
                    else:
                        enriched_products.append({
                            "code": product["code"],
                            "quantity": product["quantity"],
                            "error": product_details["error"]
                        })
                    continue
                
                # CORRECTION PRINCIPALE: R√©cup√©rer le prix depuis la structure retourn√©e par sap_mcp.py
                unit_price = 0.0
                
                # 1. Le prix est maintenant dans la cl√© "Price" directement (enrichi par sap_mcp.py)
                if "Price" in product_details:
                    unit_price = float(product_details.get("Price", 0.0))
                    logger.info(f"Prix trouv√© via 'Price': {unit_price}")
                
                # 2. Si pas de prix direct, essayer dans price_details (nouveau format)
                elif "price_details" in product_details and product_details["price_details"].get("price"):
                    unit_price = float(product_details["price_details"]["price"])
                    logger.info(f"Prix trouv√© via 'price_details': {unit_price}")
                
                # 3. Fallback sur ItemPrices[0].Price (format SAP natif)
                elif "ItemPrices" in product_details and len(product_details["ItemPrices"]) > 0:
                    unit_price = float(product_details["ItemPrices"][0].get("Price", 0.0))
                    logger.info(f"Prix trouv√© via 'ItemPrices[0]': {unit_price}")
                
                # 4. Autres fallbacks
                elif "LastPurchasePrice" in product_details:
                    unit_price = float(product_details.get("LastPurchasePrice", 0.0))
                    logger.info(f"Prix trouv√© via 'LastPurchasePrice': {unit_price}")
                
                # Si toujours aucun prix trouv√©, utiliser une valeur par d√©faut
                if unit_price == 0.0:
                    logger.warning(f"‚ö†Ô∏è Aucun prix trouv√© pour {product['code']}, utilisation d'un prix par d√©faut")
                    unit_price = 100.0  # Prix par d√©faut de 100‚Ç¨
                    
                # Enrichir le produit avec ID Salesforce
                salesforce_id = await self._find_product_in_salesforce(product["code"])
                
                # Calculer le stock total depuis la nouvelle structure sap_mcp.py
                total_stock = 0
                if "stock" in product_details and isinstance(product_details["stock"], dict):
                    # Nouvelle structure avec stock.total
                    total_stock = float(product_details["stock"].get("total", 0))
                    logger.info(f"Stock trouv√© via 'stock.total': {total_stock}")
                elif "QuantityOnStock" in product_details:
                    # Structure SAP native
                    total_stock = float(product_details.get("QuantityOnStock", 0))
                    logger.info(f"Stock trouv√© via 'QuantityOnStock': {total_stock}")
                elif "OnHand" in product_details:
                    # Fallback sur OnHand
                    total_stock = float(product_details.get("OnHand", 0))
                    logger.info(f"Stock trouv√© via 'OnHand': {total_stock}")
                
                enriched_product = {
                    "code": product["code"],
                    "quantity": product["quantity"],
                    "name": product_details.get("ItemName", "Unknown"),
                    "unit_price": unit_price,
                    "stock": total_stock,
                    "line_total": product["quantity"] * unit_price,  # CORRECTION: Calculer le total de ligne
                    "details": product_details,
                    "salesforce_id": salesforce_id
                }
                
                enriched_products.append(enriched_product)
                logger.info(f"Produit enrichi: {product['code']} - Prix: {unit_price}‚Ç¨ - Stock: {total_stock}")
                
            except Exception as e:
                logger.error(f"Erreur r√©cup√©ration produit {product['code']}: {str(e)}")
                enriched_products.append({
                    "code": product["code"],
                    "quantity": product["quantity"],
                    "error": str(e)
                })
        
        return enriched_products    
        
    async def _get_products_info(self, products: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """R√©cup√®re les informations produits depuis SAP - VERSION CORRIG√âE POUR LES PRIX"""
        if not products:
            logger.warning("Aucun produit sp√©cifi√©")
            return []
        
        logger.info(f"R√©cup√©ration des informations pour {len(products)} produits")
        
        enriched_products = []
        
        for product in products:
            try:
                # Appel MCP pour r√©cup√©rer les d√©tails du produit
                product_details = await MCPConnector.call_sap_mcp("sap_get_product_details", {
                    "item_code": product["code"]
                })
                
                if "error" in product_details:
                    logger.error(f"Erreur produit {product['code']}: {product_details['error']}")
                    # V√©rifier si malgr√© l'erreur, nous avons des informations utiles
                    if product_details.get("ItemName") is not None:
                        enriched_product = {
                            "code": product["code"],
                            "quantity": product["quantity"],
                            "name": product_details.get("ItemName", "Unknown"),
                            "unit_price": float(product_details.get("Price", 0.0)),
                            "stock": product_details.get("stock", {}).get("total", 0),
                            "details": product_details,
                            "salesforce_id": await self._find_product_in_salesforce(product["code"])
                        }
                        enriched_products.append(enriched_product)
                    else:
                        enriched_products.append({
                            "code": product["code"],
                            "quantity": product["quantity"],
                            "error": product_details["error"]
                        })
                    continue
                
                # CORRECTION PRINCIPALE: R√©cup√©rer le prix depuis la structure retourn√©e par sap_mcp.py
                unit_price = 0.0
                
                # 1. Le prix est maintenant dans la cl√© "Price" directement (enrichi par sap_mcp.py)
                if "Price" in product_details:
                    unit_price = float(product_details.get("Price", 0.0))
                    logger.info(f"Prix trouv√© via 'Price': {unit_price}")
                
                # 2. Si pas de prix direct, essayer dans price_details (nouveau format)
                elif "price_details" in product_details and product_details["price_details"].get("price"):
                    unit_price = float(product_details["price_details"]["price"])
                    logger.info(f"Prix trouv√© via 'price_details': {unit_price}")
                
                # 3. Fallback sur ItemPrices[0].Price (format SAP natif)
                elif "ItemPrices" in product_details and len(product_details["ItemPrices"]) > 0:
                    unit_price = float(product_details["ItemPrices"][0].get("Price", 0.0))
                    logger.info(f"Prix trouv√© via 'ItemPrices[0]': {unit_price}")
                
                # 4. Autres fallbacks
                elif "LastPurchasePrice" in product_details:
                    unit_price = float(product_details.get("LastPurchasePrice", 0.0))
                    logger.info(f"Prix trouv√© via 'LastPurchasePrice': {unit_price}")
                
                # Si toujours aucun prix trouv√©, utiliser une valeur par d√©faut
                if unit_price == 0.0:
                    logger.warning(f"‚ö†Ô∏è Aucun prix trouv√© pour {product['code']}, utilisation d'un prix par d√©faut")
                    unit_price = 100.0  # Prix par d√©faut de 100‚Ç¨
                    
                # Enrichir le produit avec ID Salesforce
                salesforce_id = await self._find_product_in_salesforce(product["code"])
                
                # Calculer le stock total depuis la nouvelle structure sap_mcp.py
                total_stock = 0
                if "stock" in product_details and isinstance(product_details["stock"], dict):
                    # Nouvelle structure avec stock.total
                    total_stock = float(product_details["stock"].get("total", 0))
                    logger.info(f"Stock trouv√© via 'stock.total': {total_stock}")
                elif "QuantityOnStock" in product_details:
                    # Structure SAP native
                    total_stock = float(product_details.get("QuantityOnStock", 0))
                    logger.info(f"Stock trouv√© via 'QuantityOnStock': {total_stock}")
                elif "OnHand" in product_details:
                    # Fallback sur OnHand
                    total_stock = float(product_details.get("OnHand", 0))
                    logger.info(f"Stock trouv√© via 'OnHand': {total_stock}")
                
                enriched_product = {
                    "code": product["code"],
                    "quantity": product["quantity"],
                    "name": product_details.get("ItemName", "Unknown"),
                    "unit_price": unit_price,
                    "stock": total_stock,
                    "line_total": product["quantity"] * unit_price,  # CORRECTION: Calculer le total de ligne
                    "details": product_details,
                    "salesforce_id": salesforce_id
                }
                
                enriched_products.append(enriched_product)
                logger.info(f"Produit enrichi: {product['code']} - Prix: {unit_price}‚Ç¨ - Stock: {total_stock}")
                
            except Exception as e:
                logger.error(f"Erreur r√©cup√©ration produit {product['code']}: {str(e)}")
                enriched_products.append({
                    "code": product["code"],
                    "quantity": product["quantity"],
                    "error": str(e)
                })
        
        return enriched_products
    def _build_error_response(self, error_title: str, error_message: str) -> Dict[str, Any]:
        """Construit une r√©ponse d'erreur standardis√©e"""
        logger.error(f"Erreur workflow: {error_title} - {error_message}")
        
        return {
            "status": "error",
            "success": False,
            "task_id": self.task_id,
            "error_title": error_title,
            "error_message": error_message,
            "timestamp": datetime.now().isoformat(),
            "workflow_steps": getattr(self, 'workflow_steps', []),
            "context_available": bool(self.context),
            "draft_mode": self.draft_mode
        }

    async def _extract_info_from_prompt(self, prompt: str) -> Dict[str, Any]:
        """Extraction des informations avec fallback robuste - VERSION ORIGINALE RESTAUR√âE"""
        try:
            # Tenter extraction via LLM (m√©thode statique correcte)
            extracted_info = await LLMExtractor.extract_quote_info(prompt)
            if "error" not in extracted_info:
                logger.info("Extraction LLM r√©ussie")
                return extracted_info
        except Exception as e:
            logger.warning(f"√âchec extraction LLM: {str(e)}")
        
        # Fallback vers extraction manuelle SIMPLE
        return await self._extract_info_basic_simple(prompt)

    async def _extract_info_basic(self, prompt: str) -> Dict[str, Any]:
        """M√©thode d'extraction basique SIMPLE - comme dans l'original"""
        logger.info("Extraction basique des informations du prompt")
        
        extracted = {"client": None, "products": []}
        prompt_lower = prompt.lower()
        words = prompt.split()
        
        # Extraction simple du client
        client_patterns = ["pour le client ", "pour ", "devis pour ", "for "]
        for pattern in client_patterns:
            if pattern in prompt_lower:
                idx = prompt_lower.find(pattern)
                remaining = prompt[idx + len(pattern):].strip()
                # Prendre les 1-3 premiers mots comme nom de client
                client_words = remaining.split()[:3]
                stop_words = ["avec", "and", "de", "du"]
                
                clean_words = []
                for word in client_words:
                    if word.lower() in stop_words:
                        break
                    clean_words.append(word)
                
                if clean_words:
                    extracted["client"] = " ".join(clean_words).strip(",.;")
                    logger.info(f"Client extrait: '{extracted['client']}'")
                    break
        
        # Extraction simple des produits (pattern qui marchait avant)
        import re
        
        # Pattern simple : nombre + mot commen√ßant par lettre et contenant chiffres
        matches = re.findall(r'(\d+)\s+(?:ref\s+|r√©f√©rence\s+|unit√©s?\s+)?([A-Z]\w*\d+)', prompt, re.IGNORECASE)
        for quantity, code in matches:
            extracted["products"].append({
                "code": code.upper(),
                "quantity": int(quantity)
            })
            logger.info(f"Produit extrait: {quantity}x {code}")
        
        # Si pas de produit trouv√© avec regex, m√©thode manuelle simple
        if not extracted["products"]:
            for i, word in enumerate(words):
                if word.isdigit() and i + 1 < len(words):
                    quantity = int(word)
                    next_word = words[i + 1]
                    # Si le mot suivant ressemble √† un code produit
                    if re.match(r'^[A-Z]\w*\d+', next_word, re.IGNORECASE):
                        extracted["products"].append({
                            "code": next_word.upper(),
                            "quantity": quantity
                        })
                        logger.info(f"Produit extrait (manuel): {quantity}x {next_word}")
                        break
        
        logger.info(f"Extraction finale: {extracted}")
        return extracted

    async def _check_availability(self, products: List[Dict[str, Any]]) -> Dict[str, Any]:
        """V√©rifie la disponibilit√© des produits"""
        logger.info("V√©rification de la disponibilit√© des produits")
        
        availability_status = {
            "all_available": True,
            "unavailable_products": [],
            "alternatives": {}
        }
        
        for product in products:
            if "error" in product:
                availability_status["all_available"] = False
                availability_status["unavailable_products"].append({
                    "code": product["code"],
                    "reason": "Produit non trouv√©",
                    "details": product["error"]
                })
                continue
            
            if product.get("stock", 0) < product.get("quantity", 0):
                logger.warning(f"Produit {product['code']} insuffisant en stock: {product['stock']} < {product['quantity']}")
                availability_status["all_available"] = False
                
                unavailable_item = {
                    "code": product["code"],
                    "name": product.get("name", ""),
                    "quantity_requested": product.get("quantity", 0),
                    "quantity_available": product.get("stock", 0),
                    "reason": "Stock insuffisant"
                }
                availability_status["unavailable_products"].append(unavailable_item)
        
        return availability_status    