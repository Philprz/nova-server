# workflow/devis_workflow.py - VERSION COMPL√àTE AVEC VALIDATEUR CLIENT

import re
import sys
import io
import os
import json
import logging
import asyncio
from fastapi import APIRouter, HTTPException

from datetime import datetime, timedelta, timezone
from typing import Dict, List, Any, Optional
from difflib import SequenceMatcher
from services.llm_extractor import LLMExtractor
from services.mcp_connector import MCPConnector, call_mcp_with_progress, test_mcp_connections_with_progress
from services.progress_tracker import progress_tracker, QuoteTask, TaskStatus
from services.suggestion_engine import SuggestionEngine
from services.websocket_manager import websocket_manager
from services.company_search_service import company_search_service
from utils.client_lister import find_client_everywhere
from services.product_search_engine import ProductSearchEngine
from workflow.client_creation_workflow import client_creation_workflow
from services.price_engine import PriceEngineService
from services.cache_manager import referential_cache
from workflow.validation_workflow import SequentialValidator
from services.local_product_search import LocalProductSearchService
# Configuration s√©curis√©e pour Windows
if sys.platform == "win32":
    os.environ["PYTHONIOENCODING"] = "utf-8"

# Configuration des logs avec gestion d'erreur
os.makedirs('logs', exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/workflow_devis.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ],
    force=True
)
logger = logging.getLogger('workflow_devis')

# Import conditionnel du validateur client
try:
    from services.client_validator import ClientValidator
    VALIDATOR_AVAILABLE = True
    logger.info("‚úÖ Validateur client disponible")
except ImportError as e:
    VALIDATOR_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è Validateur client non disponible: {str(e)}")

class DevisWorkflow:
    """Coordinateur du workflow de devis entre Claude, Salesforce et SAP - VERSION AVEC VALIDATEUR CLIENT"""
    
    def __init__(self, validation_enabled: bool = True, draft_mode: bool = False, force_production: bool = True, task_id: str = None):
        """
        Args:
            validation_enabled: Active la validation des donn√©es
            draft_mode: Mode brouillon (True) ou normal (False)
            force_production: Force le mode production m√™me si connexions √©chouent
            task_id: ID de t√¢che existant pour r√©cup√©rer une t√¢che en cours
        """
        # Initialisation des composants principaux
        self.mcp_connector = MCPConnector()
        self.llm_extractor = LLMExtractor()
        self.client_validator = ClientValidator() if validation_enabled else None
        self.validation_enabled = validation_enabled
        self.draft_mode = draft_mode
        self.force_production = force_production
        self.task_id = task_id
        self.current_task = None
        self.context = {}
        self.workflow_steps = []

        # Configuration mode production/d√©mo
        self.demo_mode = not force_production
        if force_production:
            logger.info("üî• MODE PRODUCTION FORC√â - Pas de fallback d√©mo")

        # Gestion de la t√¢che
        if task_id:
            try:
                self.current_task = progress_tracker.get_task(task_id)
                if self.current_task:
                    logger.info(f"‚úÖ T√¢che r√©cup√©r√©e: {task_id}")
                    # Synchroniser le contexte existant si disponible
                    if hasattr(self.current_task, 'context') and self.current_task.context:
                        self.context.update(self.current_task.context)
                        logger.info(f"‚úÖ Contexte restaur√© depuis la t√¢che: {list(self.context.keys())}")
                    else:
                        logger.info("üìù T√¢che existante - contexte vide")
                else:
                    # Cr√©ation explicite avec l'ID fourni
                    logger.warning(f"‚ö†Ô∏è T√¢che {task_id} introuvable - cr√©ation explicite avec l'ID existant")
                    self.current_task = progress_tracker.create_task(
                        user_prompt="G√©n√©ration de devis (cr√©√©e via fallback)",
                        draft_mode=self.draft_mode,
                        task_id=task_id
                    )
            except Exception as e:
                logger.error(f"Erreur lors de la gestion de la t√¢che {task_id}: {str(e)}")
                self.current_task = None
                self.task_id = None

        # Initialisation des moteurs
        self.suggestion_engine = SuggestionEngine()
        # Service recherche locale produits
        self.local_product_service = LocalProductSearchService()
        self.client_suggestions = None
        self.product_suggestions = []

        # Initialisation des validateurs et cache
        self.cache_manager = referential_cache
        self.sequential_validator = SequentialValidator(self.mcp_connector, self.llm_extractor)

        # Pr√©-chargement asynchrone du cache
        try:
            asyncio.create_task(self._initialize_cache())
        except RuntimeError:
            logger.info("‚è≥ Initialisation du cache diff√©r√©e (pas d'event loop actif)")
        # Initialiser WebSocket manager
        self.websocket_manager = websocket_manager
        logger.info("‚úÖ Workflow initialis√© avec cache et validation s√©quentielle")

    async def _initialize_cache(self):
        """Initialisation asynchrone du cache"""
        try:
            await self.cache_manager.preload_common_data(self.mcp_connector)
            logger.info("üöÄ Cache pr√©-charg√© avec succ√®s")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur pr√©-chargement cache: {str(e)}")
        
    
    def _track_step_start(self, step_id: str, message: str = ""):
        """D√©marre le tracking d'une √©tape"""
        if self.current_task:
            self.current_task.start_step(step_id, message)
    
    def _track_step_progress(self, step_id: str, progress: int, message: str = ""):
        """Track et notifie la progression avec WebSocket"""
        if self.current_task:
            if progress == 0:
                self.current_task.start_step(step_id, message)
            elif progress == 100:
                self.current_task.complete_step(step_id, message)
            else:
                self.current_task.update_step_progress(step_id, progress, message)
            
            # Notification WebSocket si disponible
            try:
                asyncio.create_task(websocket_manager.broadcast_to_task(
                    self.task_id,  # CORRECTION: Ajouter task_id explicite
                    {
                        "type": "progress_update",
                        "task_id": self.task_id,  # CORRECTION: Inclure task_id dans le message
                        "step_id": step_id,
                        "progress": progress,
                        "message": message
                    }
                ))
            except Exception:
                pass  # WebSocket optionnel
    
    def _track_step_complete(self, step_id: str, message: str = ""):
        """Termine une √©tape avec succ√®s"""
        if self.current_task:
            self.current_task.complete_step(step_id, message)
    
    def _track_step_fail(self, step_id: str, error: str, message: str = ""):
        """Termine une √©tape en erreur"""
        if self.current_task:
            self.current_task.fail_step(step_id, error, message)

    def _build_error_response(self, error_title: str, error_message: str,
                        context: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        Construit une r√©ponse d'erreur standardis√©e

        Args:
            error_title: Titre de l'erreur
            error_message: Message d√©taill√©
            context: Contexte additionnel optionnel

        Returns:
            Dict avec structure d'erreur standardis√©e
        """

        response = {
            "success": False,
            "status": "error",
            "error": error_message,
            "message": error_message,
            "timestamp": datetime.now().isoformat(),
            "error_type": error_title.lower().replace(" ", "_")
        }

        if self.task_id:
            response["task_id"] = self.task_id

        if context:
            response["context"] = context

        return response

    def _save_context_to_task(self):
        """Sauvegarde le contexte actuel dans la t√¢che"""
        if self.current_task:
            if not hasattr(self.current_task, 'context'):
                self.current_task.context = {}
            self.current_task.context.update(self.context)
            logger.info(f"üíæ Contexte sauvegard√©: {list(self.context.keys())}")
        else:
            logger.warning("‚ö†Ô∏è Impossible de sauvegarder le contexte - pas de t√¢che courante")

    def _normalize_client_info(self, client_info: Any) -> Dict[str, Any]:
        """Normalise la structure client_info pour √©viter les erreurs de type None"""
        if not client_info:
            return {"data": {}, "found": False}

        if not isinstance(client_info, dict):
            return {"data": {}, "found": False}

        # S'assurer que data est toujours un dictionnaire
        if "data" not in client_info:
            client_info["data"] = {}
        elif client_info["data"] is None:
            client_info["data"] = {}
        elif not isinstance(client_info["data"], dict):
            client_info["data"] = {}

        return client_info

    async def _send_final_quote_result(self, result_data: dict):
        """Envoie le r√©sultat final du devis via WebSocket"""
        try:
            if hasattr(self, 'task_id') and self.task_id:

                message = {
                    "type": "quote_generation_completed",
                    "task_id": self.task_id,
                    "timestamp": datetime.now(timezone.utc).isoformat(),
                    "result": result_data,
                    "status": "completed"
                }
                
                await websocket_manager.broadcast_to_task(self.task_id, message)
                logger.info(f"‚úÖ R√©sultat final envoy√© pour {self.task_id}")
                
                # Attendre pour s'assurer que le message est re√ßu
                await asyncio.sleep(0.5)
            else:
                logger.warning("‚ö†Ô∏è Impossible d'envoyer le r√©sultat - task_id manquant")
        except Exception as e:
            logger.error(f"‚ùå Erreur envoi r√©sultat final: {e}")
    # üîß NOUVELLE M√âTHODE PRINCIPALE AVEC VALIDATION S√âQUENTIELLE
    async def process_quote_request(self, user_prompt: str, draft_mode: bool = False) -> Dict[str, Any]:
        """
        üîß M√âTHODE PRINCIPALE REFACTORIS√âE : extraction, validation, g√©n√©ration du devis
        """
        try:
            # Mode brouillon
            self.draft_mode = draft_mode

            # Nettoyage pr√©ventif du cache
            await self.cache_manager.cleanup_expired()

            # PHASE 1: Analyse du prompt
            self._track_step_start("parse_prompt", "üîç Analyse de votre demande")
            extracted_info = await self._extract_info_from_prompt(user_prompt)
            if not extracted_info:
                return self._build_error_response(
                    "Extraction √©chou√©e", "Impossible d'analyser votre demande"
                )
            self._track_step_complete("parse_prompt", "‚úÖ Demande analys√©e")

            # IMPORTANT: Sauvegarder extracted_info dans le contexte
            self.context["extracted_info"] = extracted_info
            logger.info(f"‚úÖ Contexte initialis√© dans process_quote_request - client: {extracted_info.get('client', '')}, produits: {len(extracted_info.get('products', []))}")

            # Enregistrer les informations extraites dans le contexte
            self.context["extracted_info"] = extracted_info
            # NOUVEAU: Sauvegarder le contexte dans la t√¢che
            self._save_context_to_task()

            # PHASE 2: Ex√©cution du workflow de devis
            self._track_step_start("quote_workflow", "üöÄ D√©marrage du workflow de devis")
            workflow_result = await self._process_quote_workflow(extracted_info)

            # Cas : interaction utilisateur n√©cessaire - ARR√äT COMPLET DU WORKFLOW
            if workflow_result.get("status") == "user_interaction_required":
                # Suivi d'√©tape
                step = workflow_result.get("step")
                if step:
                    self._track_step_progress(
                        "quote_workflow", 50, f"‚ùó En attente: {step}"
                    )
                # Ajout du contexte pour reprise
                workflow_result.setdefault("workflow_context", {}).update({
                    "task_id": self.task_id,
                    "extracted_info": extracted_info,
                    "user_prompt": user_prompt,
                    "draft_mode": draft_mode
                })
                # ARR√äT IMM√âDIAT - Ne pas continuer le workflow
                logger.info(f"‚è∏Ô∏è Workflow suspendu en attente d'interaction utilisateur")
                return workflow_result

            # Cas : workflow termin√© normalement
            self._track_step_complete("quote_workflow", "‚úÖ Workflow de devis termin√©")
            return workflow_result

        except Exception as e:
            logger.exception(f"Erreur workflow principal: {e}")
            # Suivi d'erreur global
            self._track_step_fail(
                "quote_workflow", "‚ùå Erreur syst√®me", str(e)
            )
            return self._build_error_response(
                "Erreur syst√®me", f"Erreur interne: {str(e)}"
            )


    # üÜï NOUVELLE M√âTHODE POUR CONTINUER APR√àS INTERACTION
    async def continue_after_user_input(self, user_input: Dict, context: Dict) -> Dict[str, Any]:
        """
        Continue le workflow apr√®s une interaction utilisateur
        """

        try:
            interaction_type = context.get("interaction_type")

            if interaction_type == "client_selection":
                return await self._handle_client_selection(user_input, context)

            elif interaction_type == "client_creation":
                return await self._handle_client_creation(user_input, context)

            elif interaction_type == "product_selection":
                return await self._handle_product_selection(user_input, context)

            elif interaction_type == "quantity_adjustment":
                return await self._handle_quantity_adjustment(user_input, context)

            elif interaction_type == "duplicate_resolution":
                return await self._handle_duplicate_resolution(user_input, context)

            else:
                return self._build_error_response("Type d'interaction non reconnu", f"Type: {interaction_type}")

        except Exception as e:
            logger.exception(f"Erreur continuation workflow: {str(e)}")
            return self._build_error_response("Erreur continuation", str(e))

    # üîß HANDLERS POUR CHAQUE TYPE D'INTERACTION

    async def _search_company_enrichment(self, company_name: str) -> Dict[str, Any]:
        """Enrichissement des donn√©es client via INSEE/PAPPERS"""
        try:
           
            # Recherche via agent d'enrichissement
            search_result = await company_search_service.search_company(company_name, max_results=5)

            
            if search_result.get("success") and search_result.get("companies"):
                company = search_result["companies"][0]  # Premier r√©sultat
                
                return {
                    "success": True,
                    "company_data": {
                        "official_name": company.get("denomination", company_name),
                        "siren": company.get("siren", ""),
                        "siret": company.get("siret", ""),
                        "address": {
                            "street": company.get("adresse", ""),
                            "postal_code": company.get("code_postal", ""),
                            "city": company.get("ville", ""),
                            "country": "France"
                        },
                        "activity": {
                            "code": company.get("activite_principale", ""),
                            "label": company.get("libelle_activite", "")
                        },
                        "legal_form": company.get("forme_juridique", ""),
                        "status": company.get("etat", ""),
                        "creation_date": company.get("date_creation", ""),
                        "source": "INSEE/PAPPERS"
                    }
                }
            else:
                # Pas de donn√©es enrichies disponibles
                return {
                    "success": False,
                    "message": "Aucune donn√©e d'enrichissement trouv√©e",
                    "company_data": {
                        "official_name": company_name,
                        "source": "manual"
                    }
                }
                
        except Exception as e:
            logger.error(f"Erreur enrichissement: {e}")
            return {
                "success": False,
                "error": str(e),
                "company_data": {"official_name": company_name, "source": "manual"}
            }

    ## 4. PR√âVENTION DOUBLONS

    async def _check_duplicates_enhanced(self, client_name: str, enrichment_data: Dict) -> Dict[str, Any]:
        """üîé D√©tection avanc√©e des doublons (SIREN + similarit√© de nom)"""
        try:
            potential_duplicates = []

            # 1Ô∏è‚É£ Recherche par SIREN
            potential_duplicates += await self._search_duplicates_by_siren(enrichment_data)

            # 2Ô∏è‚É£ Recherche par mots du nom
            potential_duplicates += await self._search_duplicates_by_name(client_name)

            # 3Ô∏è‚É£ Nettoyage et scoring
            scored_duplicates = self._deduplicate_and_score(client_name, potential_duplicates)

            # 4Ô∏è‚É£ Filtrage final
            probable_duplicates = [dup for dup in scored_duplicates if dup["similarity_score"] > 0.7]

            if probable_duplicates:
                return {
                    "has_duplicates": True,
                    "duplicates": probable_duplicates,
                    "duplicate_count": len(probable_duplicates),
                    "requires_user_choice": True,
                    "message": f"‚ö†Ô∏è {len(probable_duplicates)} client(s) similaire(s) d√©tect√©(s)",
                    "actions": [
                        {"action": "use_existing", "label": "üìã Utiliser client existant"},
                        {"action": "create_anyway", "label": "‚ûï Cr√©er quand m√™me"},
                        {"action": "cancel", "label": "‚ùå Annuler"}
                    ]
                }
            else:
                return {"has_duplicates": False, "message": "‚úÖ Aucun doublon d√©tect√©"}

        except Exception as e:
            logger.error(f"‚ùå Erreur v√©rification doublons: {e}")
            return {"has_duplicates": False, "error": str(e)}


    async def _search_duplicates_by_siren(self, enrichment_data: Dict) -> list:
        """üîç Recherche des doublons via le SIREN"""
        siren = enrichment_data.get("company_data", {}).get("siren", "")
        if not siren:
            return []
        
        query = f"""
            SELECT Id, Name, AccountNumber, FederalTaxID 
            FROM Account 
            WHERE FederalTaxID LIKE '%{siren}%'
        """
        result = await self.mcp_connector.call_mcp("salesforce_mcp", "salesforce_query", {"query": query})
        return result.get("data", []) if result.get("success") else []


    async def _search_duplicates_by_name(self, client_name: str) -> list:
        """üîç Recherche des doublons par mots significatifs dans le nom"""
        words = {word for word in client_name.split() if len(word) > 3}
        if not words:
            return []
        
        conditions = " OR ".join([f"Name LIKE '%{word}%'" for word in words])
        query = f"""
            SELECT Id, Name, AccountNumber 
            FROM Account 
            WHERE {conditions}
        """
        result = await self.mcp_connector.call_mcp("salesforce_mcp", "salesforce_query", {"query": query})
        return result.get("data", []) if result.get("success") else []


    def _deduplicate_and_score(self, client_name: str, duplicates: list) -> list:
        """üß† D√©duplique et ajoute un score de similarit√©"""
        seen_ids = set()
        unique = []

        for dup in duplicates:
            account_id = dup.get("Id")
            if account_id and account_id not in seen_ids:
                seen_ids.add(account_id)
                dup["similarity_score"] = self._calculate_similarity(
                    client_name.upper().strip(),
                    dup.get("Name", "").upper().strip()
                )
                unique.append(dup)
        return unique

    def _calculate_similarity(self, name1: str, name2: str) -> float:
        """Calcul simple de similarit√© entre deux noms"""
        try:
            
            return SequenceMatcher(None, name1.lower(), name2.lower()).ratio()
        except:
            return 0.0
    def _format_client_details(self, client: Dict[str, Any], source: str) -> Dict[str, Any]:
        """Formate les d√©tails client selon la source"""
        details = {
            "sf_id": "",
            "sap_code": "",
            "phone": None,
            "address": "N/A",
            "city": None,
            "postal_code": None,
            "country": None,
            "siret": None,
            "industry": "N/A"
        }
        
        if not client:
            return details
            
        source_lower = source.lower() if source else ""
        
        if "salesforce" in source_lower or "sf" in source_lower:
            # Formatage client Salesforce
            details.update({
                "sf_id": client.get("Id", ""),
                "sap_code": "",
                "phone": client.get("Phone"),
                "address": f"{client.get('BillingStreet', '')}, {client.get('BillingCity', '')}".strip(", "),
                "city": client.get("BillingCity"),
                "postal_code": client.get("BillingPostalCode"),
                "country": client.get("BillingCountry"),
                "siret": client.get("Sic"),
                "industry": client.get("Industry", "N/A")
            })
        elif "sap" in source_lower:
            # Formatage client SAP
            details.update({
                "sf_id": "",
                "sap_code": client.get("CardCode", ""),
                "phone": client.get("Phone1"),
                "address": client.get("BillToStreet", "N/A"),
                "city": client.get("City"),
                "postal_code": client.get("ZipCode"),
                "country": client.get("Country"),
                "siret": client.get("FederalTaxID"),
                "industry": "N/A"
            })
        
        return details
    async def _handle_client_creation(self, user_input: Dict, context: Dict) -> Dict[str, Any]:
        """G√®re la cr√©ation d'un nouveau client"""

        if user_input.get("action") == "create_client":
            # Lancer le processus de cr√©ation avec validation SIRET
            client_name = user_input.get("client_name") or context.get("client_name")

            return {
                "status": "client_creation_required",
                "message": f"Cr√©ation du client '{client_name}' en cours...",
                "next_step": "gather_client_info",
                "client_name": client_name
            }

        elif user_input.get("action") == "retry_client":
            # Demander un nouveau nom de client
            return {
                "status": "user_interaction_required",
                "interaction_type": "client_retry",
                "message": "Veuillez saisir le nom correct du client :",
                "input_type": "text",
                "placeholder": "Nom de l'entreprise"
            }

    async def _handle_product_selection(self, user_input: Dict, context: Dict) -> Dict[str, Any]:
        """G√®re la s√©lection de produit par l'utilisateur"""

        # NOUVEAU: Log de debug pour comprendre l'input utilisateur
        logger.info(f"üì¶ Input utilisateur dans _handle_product_selection:")
        logger.info(f"   - user_input: {user_input}")
        logger.info(f"   - context keys: {list(context.keys())}")

        # R√©cup√©rer les donn√©es du produit s√©lectionn√©
        # L'interface envoie 'selected_product', pas 'selected_data'
        selected_product_data = user_input.get("selected_product") or user_input.get("selected_data")
        product_code = user_input.get("product_code")
        # R√©cup√©rer la quantit√© ORIGINALE depuis extracted_info (en respectant la priorit√© √† user_input)
        extracted_info = self.context.get("extracted_info", {}) or {}
        original_products = extracted_info.get("products") or []

        # Rechercher la quantit√© originale en faisant correspondre le nom du produit
        original_quantity = 1  # valeur par d√©faut
        if selected_product_data and original_products:
            selected_name = (selected_product_data.get("ItemName") or "").lower()
            for orig_product in original_products:
                orig_name = (orig_product.get("name") or "").strip().lower()
                if orig_name and orig_name in selected_name:
                    original_quantity = int(orig_product.get("quantity", 1))
                    logger.info(f"üì¶ Quantit√© trouv√©e pour {orig_name}: {original_quantity}")
                    break

        # Quantit√©: priorit√© √† user_input s'il est fourni et valide
        quantity = user_input.get("quantity")
        try:
            quantity = int(quantity) if quantity is not None else None
        except (TypeError, ValueError):
            quantity = None

        # Utiliser la quantit√© originale si user_input ne fournit pas de quantit√© valide
        if quantity is None or quantity <= 0:
            quantity = original_quantity
            logger.info(f"üì¶ Utilisation de la quantit√© originale: {quantity}")

        # Garde-fou final
        if quantity is None or quantity <= 0:
            quantity = 1
            logger.info(f"‚ö†Ô∏è Quantit√© finale par d√©faut: {quantity}")

        logger.info(f"üì¶ Quantit√© finale utilis√©e: {quantity}")

        def _norm(s):
            return (s or "").strip().lower()

        selected_name = _norm(selected_product_data.get("ItemName"))
        selected_code = selected_product_data.get("ItemCode")

        current_context = context.get("validation_context", {})

        # Logs d√©taill√©s pour debug
        logger.info(f"üì¶ _handle_product_selection - user_input complet: {user_input}")
        logger.info(f"üì¶ _handle_product_selection - selected_product_data: {selected_product_data}")

        if selected_product_data:
            # CORRECTION: R√©cup√©rer le client depuis le contexte avec validation robuste
            # DIAGNOSTIC: V√©rifier l'√©tat du contexte
            logger.info(f"üîç √âtat du contexte lors s√©lection produit:")
            logger.info(f"   - client_info pr√©sent: {bool(self.context.get('client_info'))}")
            logger.info(f"   - client_info.data pr√©sent: {bool(self.context.get('client_info', {}).get('data'))}")
            logger.info(f"   - cl√©s contexte: {list(self.context.keys())}")
            # CORRECTION CRITIQUE: S'assurer que les donn√©es client sont bien pr√©sentes avant la cr√©ation du devis
            client_info = context.get("client_info")
            if not client_info or not client_info.get("data"):
                # Tenter de r√©cup√©rer depuis validated_client ou selected_client
                if self.context.get("validated_client"):
                    client_info = {"data": self.context["validated_client"], "found": True}
                    self.context["client_info"] = client_info
                    logger.info("‚úÖ Client restaur√© depuis validated_client")
                elif self.context.get("selected_client"):
                    client_info = {"data": self.context["selected_client"], "found": True}
                    self.context["client_info"] = client_info
                    logger.info("‚úÖ Client restaur√© depuis selected_client")
            client_info = self.context.get("client_info", {})

            # Valider que client_info contient bien les donn√©es
            if not client_info or not client_info.get("data"):
                logger.error("‚ùå Donn√©es client manquantes dans le contexte lors de la s√©lection produit")
                return {
                    "success": False,
                    "error": "Donn√©es client perdues - impossible de g√©n√©rer le devis"
                }

            # Calcul du prix unitaire avec fallback (Price -> AvgPrice -> unit_price -> estimation)
            unit_price = float(
            (selected_product_data.get("Price")
                or selected_product_data.get("AvgPrice")
                or selected_product_data.get("unit_price")
                or 0)
            )
            if not unit_price:
                unit_price = float(self._estimate_product_price(selected_product_data.get("ItemName", "")) or 0)
            formatted_product = {
                "code": selected_product_data.get("ItemCode"),
                "name": selected_product_data.get("ItemName"),
                "quantity": quantity,  # Utiliser la quantit√© r√©cup√©r√©e
                # Utiliser Price d'abord, puis AvgPrice, puis estimation
                "unit_price": unit_price,
                "total_price": 0, # Sera calcul√© apr√®s
                "found": True,  # Marquer comme produit trouv√©
                "OnHand": selected_product_data.get("OnHand", 0),
                # Garder aussi les champs SAP originaux pour compatibilit√©
                "ItemCode": selected_product_data.get("ItemCode"),
                "ItemName": selected_product_data.get("ItemName"),
                "UnitPrice": unit_price,
            }

            # Calculer le prix total
            formatted_product["total_price"] = unit_price * quantity            
            logger.info(f"‚úÖ Produit format√©: {formatted_product['name']} - Code: {formatted_product['code']} - Prix: {formatted_product['unit_price']}‚Ç¨ - Quantit√©: {quantity}")
            # CORRECTION: S'assurer que les donn√©es client sont bien pr√©sentes
            validated_data = {
                "client": client_info.get("data"),
                "products": [formatted_product]
            }

            # NOUVELLE VALIDATION: V√©rifier que client_data n'est pas None
            if not validated_data.get("client"):
                logger.error("‚ùå validated_data.client est None - tentative de r√©cup√©ration alternative")
                # Essayer de r√©cup√©rer depuis d'autres sources du contexte
                alternative_client = (
                    self.context.get("selected_client") or
                    self.context.get("validated_client") or
                    self.context.get("client_data")
                )
                if alternative_client:
                    validated_data["client"] = alternative_client
                    logger.info("‚úÖ Client r√©cup√©r√© depuis source alternative")
                else:
                    return {
                        "success": False,
                        "error": "Impossible de r√©cup√©rer les donn√©es client pour la g√©n√©ration du devis"
                    }

            logger.info(f"üì¶ validated_data pour g√©n√©ration: {validated_data}")

            # Continuer directement vers la g√©n√©ration du devis
            logger.info(f"‚úÖ Produit s√©lectionn√© avec prix {formatted_product['unit_price']}‚Ç¨, g√©n√©ration du devis.")
            # Pr√©parer quote_data pour la cr√©ation SAP
            quote_data = {
                "client": validated_data["client"],
                "products": validated_data["products"],
                "total_amount": formatted_product["total_price"],
                "DocumentLines": [{
                    "ItemCode": formatted_product["code"],
                    "ItemName": formatted_product["name"],
                    "ItemDescription": formatted_product["name"],
                    "Quantity": formatted_product["quantity"],
                    "Price": formatted_product["unit_price"],
                    "LineNum": 0
                }]
            }
            # G√©n√©rer le devis en utilisant les donn√©es valid√©es
            return await self._continue_quote_generation(validated_data, quote_data)

    async def _handle_quantity_adjustment(self, user_input: Dict, context: Dict) -> Dict[str, Any]:
        """G√®re l'ajustement des quantit√©s"""

        action = user_input.get("action")

        if action == "proceed":
            # Continuer avec les quantit√©s disponibles
            final_products = context.get("final_products", [])
            return await self._continue_quote_generation({"products": final_products})

        elif action == "modify":
            # Permettre la modification des quantit√©s
            return {
                "status": "user_interaction_required",
                "interaction_type": "quantity_modification",
                "message": "Modification des quantit√©s :",
                "products": context.get("final_products", []),
                "input_type": "quantity_form"
            }

        elif action == "cancel":
            return {
                "status": "cancelled",
                "message": "Demande de devis annul√©e par l'utilisateur"
            }

    # üÜï M√âTHODE DE G√âN√âRATION FINALE OPTIMIS√âE
    async def _continue_quote_generation(self, validated_data: Dict, quote_data: Dict = None) -> Dict[str, Any]:
        """Continue la g√©n√©ration du devis avec les donn√©es valid√©es"""
        # Robustesse: garantir un dict pour quote_data
        quote_data = quote_data or {}
        try:
            # S'assurer que les donn√©es produits sont compl√®tes avant g√©n√©ration
            if not validated_data.get("products"):
                logger.error("‚ùå Aucun produit valid√© pour la g√©n√©ration")
                return self._build_error_response("Donn√©es manquantes", "Aucun produit valid√©")
            
            # Compl√©ter les informations produits si quote_data est fourni
            if quote_data and quote_data.get("DocumentLines"):
                for product in validated_data["products"]:
                    if not product.get("name") and quote_data["DocumentLines"]:
                        doc_line = quote_data["DocumentLines"][0]
                        product.update({
                            "name": doc_line.get("ItemName", product.get("code", "Produit")),
                            "description": doc_line.get("ItemDescription", ""),
                            "ItemName": doc_line.get("ItemName", product.get("code", "Produit")),
                            "ItemCode": product.get("code", doc_line.get("ItemCode", "")),
                            "unit_price": product.get("unit_price", doc_line.get("Price", 0)),
                            "UnitPrice": product.get("unit_price", doc_line.get("Price", 0)),
                            "Price": product.get("unit_price", doc_line.get("Price", 0))
                        })
            # PHASE 3: G√©n√©ration du devis avec donn√©es valid√©es
            # G√©rer le cas o√π validated_data peut √™tre une liste ou un dict
            if isinstance(validated_data, list):
                # Si c'est une liste, la transformer en dict avec cl√© "products"
                validated_data = {"products": [p.get("data", p) for p in validated_data]}

            # CORRECTION: R√©cup√©ration robuste des donn√©es client
            client_data = validated_data.get("client")
            if not client_data:
                # Fallback vers le contexte
                client_info = self.context.get("client_info", {})
                client_data = client_info.get("data")
                
                # Si toujours pas de donn√©es, essayer d'autres sources
                if not client_data:
                    client_data = (
                        self.context.get("selected_client") or
                        self.context.get("validated_client") or
                        self.context.get("client_data")
                    )
                    
                    if client_data:
                        logger.info("‚úÖ Donn√©es client r√©cup√©r√©es depuis source alternative dans _continue_quote_generation")
                    else:
                        logger.error("‚ùå Aucune donn√©e client disponible pour la g√©n√©ration")
                        return self._build_error_response(
                            "Donn√©es client manquantes", 
                            "Impossible de g√©n√©rer le devis sans informations client"
                        )
            products_data = validated_data.get("products", self.context.get("products_info", []))

            # Calculs finaux
            # Validation des donn√©es avant calculs
            if not isinstance(products_data, list):
                logger.warning("‚ö†Ô∏è products_data n'est pas une liste, correction...")
                products_data = []

            # Initialiser la liste des produits valid√©s
            validated_products_data = []

            # Normaliser et valider chaque produit
            for product in products_data:
                logger.info(f"üîç Traitement du produit: {product}")

                # Normaliser les champs de prix pour tous types de produits
                normalized_product = dict(product)

                # G√©rer les diff√©rents formats de prix
                # D'abord essayer UnitPrice (depuis la s√©lection)
                price = product.get("UnitPrice", 0) or product.get("unit_price", 0)

                # Si pas de UnitPrice/unit_price, essayer AvgPrice
                if not price and product.get("AvgPrice") is not None:
                    price = product.get("AvgPrice")

                # Puis essayer Price
                if not price and product.get("Price") is not None:
                    price = product.get("Price")

                # Convertir en float et s'assurer que c'est un nombre valide
                try:
                    price = float(price) if price else 0
                except:
                    price = 0

                # D√©finir le prix normalis√©
                normalized_product["Price"] = price
                normalized_product["UnitPrice"] = price
                normalized_product["unit_price"] = price  # Pour compatibilit√© avec _create_quote_in_salesforce

                # Si toujours pas de prix, essayer une estimation
                if price == 0:
                    # Estimation en dernier recours
                    estimated = self._estimate_product_price(product.get("ItemName", product.get("name", "")))
                    normalized_product["Price"] = estimated
                    normalized_product["UnitPrice"] = estimated
                    normalized_product["unit_price"] = estimated
                    logger.info(f"Prix estim√© appliqu√©: {estimated}‚Ç¨ pour {product.get('ItemName', product.get('name', 'produit'))}")

                # Calculer le LineTotal
                quantity = float(product.get("Quantity", product.get("quantity", 1)))
                normalized_product["LineTotal"] = normalized_product["Price"] * quantity
                normalized_product["total_price"] = normalized_product["Price"] * quantity  # Pour compatibilit√©

                # V√©rifier les champs requis apr√®s normalisation
                if isinstance(normalized_product, dict) and normalized_product.get("Price", 0) > 0:
                    validated_products_data.append(normalized_product)
                    logger.info(f"‚úÖ Produit valid√©: {normalized_product.get('ItemName', normalized_product.get('name'))} - Prix: {normalized_product.get('Price')}‚Ç¨")
                else:
                    logger.warning(f"‚ö†Ô∏è Produit sans prix valide ignor√©: {product}")

            # V√©rifier qu'au moins un produit est valide
            if not validated_products_data:
                logger.error("‚ùå Aucun produit valide apr√®s normalisation des prix")
                return {
                    "success": False,
                    "error": "Aucun produit valide trouv√©. V√©rifiez que tous les produits ont un prix."
                }

            # Utiliser les produits valid√©s pour la suite
            products_data = validated_products_data
            total_amount = sum(p.get("LineTotal", 0) for p in products_data)

            # G√©n√©ration SAP (passer quote_data si disponible)
            sap_quote = await self._create_sap_quote(client_data, products_data, quote_data)

            # G√©n√©ration Salesforce (si SAP r√©ussi)
            if sap_quote.get("success"):
                sf_opportunity = await self._create_salesforce_opportunity(client_data, products_data, sap_quote)

                self._track_step_complete("generate_quote", f"‚úÖ Devis g√©n√©r√© - Total: {total_amount:.2f}‚Ç¨")
                # Normaliser les identifiants avant retour
                sap_doc_num = (
                sap_quote.get("quote_number")
                    or quote_data.get("DocNum")
                    or validated_data.get("quote_number")
                    or "UNKNOWN"
                )
                sf_id = None
                if isinstance(sf_opportunity, dict):
                    sf_id = sf_opportunity.get("opportunity_id") or sf_opportunity.get("Id")
                # R√©cup√©rer les r√©sultats des syst√®mes

                # Si pas de doc_num dans sap, essayer d'autres sources
                if not sap_doc_num:
                    sap_doc_num = quote_data.get("sap_doc_num") or quote_data.get("quote_number") or "UNKNOWN"

                return {
                    "success": True,
                    "status": "success",
                    "quote_id": f"SAP-{sap_doc_num}",
                    "client": validated_data.get("client", {}),
                    "products": validated_data.get("products", []),
                    "quote_data": {
                        "products": validated_data.get("products", []),
                        "client": validated_data.get("client", {}),
                        "total_amount": validated_data.get("total_amount", total_amount)
                    },
                    "validated_data": {
                        "products": validated_data.get("products", []),
                        "client": validated_data.get("client", {}),
                        "total_amount": validated_data.get("total_amount", total_amount)
                    },
                    "total_amount": validated_data.get("total_amount", total_amount),
                    "currency": "EUR",
                    "sap_doc_num": sap_doc_num,
                    "salesforce_opportunity_id": sf_id,
                    "opportunity_id": sf_id,
                    "salesforce_quote_id": sf_id,
                    "date": datetime.now().strftime('%Y-%m-%d'),
                    "quote_status": "Cr√©√©",
                    "message": f"Devis cr√©√© avec succ√®s pour {validated_data.get('client', {}).get('name', 'le client')}"
                }
            else:
                self._track_step_fail("generate_quote", "Erreur SAP", sap_quote.get("error"))
                return self._build_error_response("Erreur g√©n√©ration", sap_quote.get("error"))

        except Exception as e:
            logger.exception(f"Erreur g√©n√©ration finale: {str(e)}")
            return self._build_error_response("Erreur g√©n√©ration", str(e))

    # M√©thodes auxiliaires pour la g√©n√©ration
    async def _create_sap_quote(self, client_data: Dict, products_data: List[Dict], quote_data: Dict = None) -> Dict[str, Any]:
        """Cr√©e le devis dans SAP"""
        try:
            # Utiliser la m√©thode existante _create_quote_in_salesforce qui g√®re SAP et Salesforce
            self.context["client_info"] = {"data": client_data, "found": True}
            self.context["products_info"] = products_data

            result = await self._create_quote_in_salesforce(client_data, products_data, quote_data)
            return {
                "success": result.get("success", False),
                "quote_number": result.get("sap_quote_number"),
                "error": result.get("error")
            }
        except Exception as e:
            logger.exception(f"Erreur cr√©ation devis SAP: {str(e)}")
            return {"success": False, "error": str(e)}

    async def _handle_duplicate_resolution(self, user_input: Dict, context: Dict) -> Dict[str, Any]:
        """G√®re la r√©solution des doublons de devis"""

        action = user_input.get("action")
        client_name = context.get("extracted_info", {}).get("client", "")

        logger.info(f"R√©solution doublons: action={action}, client={client_name}")

        if action == "proceed":
            # Forcer la cr√©ation malgr√© les doublons
            logger.info("‚úÖ Utilisateur d√©cide de cr√©er un nouveau devis malgr√© les doublons")
            self.context["skip_duplicate_check"] = True
            extracted_info = context.get("extracted_info", {})
            return await self._process_quote_workflow(extracted_info)

        elif action == "consolidate":
            # Permettre de choisir un devis √† consolider
            selected_quote_id = user_input.get("selected_quote_id")
            if selected_quote_id:
                # TODO: Impl√©menter la logique de consolidation
                return {
                    "status": "consolidation_in_progress",
                    "message": f"Consolidation avec devis {selected_quote_id} en cours...",
                    "selected_quote": selected_quote_id
                }
            else:
                return {
                    "status": "user_interaction_required",
                    "interaction_type": "quote_selection",
                    "message": "S√©lectionnez le devis √† consolider",
                    "available_quotes": context.get("recent_quotes", []) + context.get("draft_quotes", [])
                }

        elif action == "review":
            # Rediriger vers l'interface de gestion des devis
            return {
                "status": "redirect_to_management",
                "message": "Redirection vers la gestion des devis existants",
                "redirect_url": "/quote-management",
                "client_filter": client_name
            }

        elif action == "cancel":
            return {
                "status": "cancelled",
                "message": "Demande de devis annul√©e par l'utilisateur"
            }

        return {"status": "error", "message": "Action non reconnue"}

    async def _create_salesforce_opportunity(self, client_data: Dict, products_data: List[Dict], sap_quote: Dict) -> Dict[str, Any]:
        """Cr√©e l'opportunit√© dans Salesforce"""
        try:
            # Cette m√©thode est d√©j√† g√©r√©e dans _create_quote_in_salesforce
            return {
                "success": True,
                "opportunity_id": sap_quote.get("salesforce_opportunity_id")
            }
        except Exception as e:
            logger.exception(f"Erreur cr√©ation opportunit√© Salesforce: {str(e)}")
            return {"success": False, "error": str(e)}

    async def process_prompt(self, user_prompt: str, task_id: str = None) -> Dict[str, Any]:
        """IMPORTANT: Utiliser le task_id fourni, ne jamais le r√©g√©n√©rer"""
        """
        Traite un prompt avec tracking de progression
        """
        extracted_info: Optional[Dict[str, Any]] = None
        """Process le prompt utilisateur via LLM et workflow"""
        try:
            # üîß MODIFICATION : Utiliser le task_id fourni si disponible
            if task_id:
                self.task_id = task_id
                logger.info(f"‚úÖ Utilisation du task_id fourni: {task_id}")
                # R√©cup√©rer la t√¢che existante cr√©√©e par start_quote_workflow
                self.current_task = progress_tracker.get_task(task_id)
                if not self.current_task:
                # Si pas trouv√©e (ne devrait pas arriver), la cr√©er
                    self.current_task = progress_tracker.create_task(
                    user_prompt=user_prompt,
                    draft_mode=self.draft_mode,
                    task_id=task_id
                    )
            # Si pas de task existante, en cr√©er une nouvelle
            if not self.current_task:
                self.task_id = self._initialize_task_tracking(user_prompt)

            logger.info(f"=== D√âMARRAGE WORKFLOW - T√¢che {self.task_id} ===")

            # üîß MODIFICATION : D√©marrer le tracking de progression
            self._track_step_start("parse_prompt", "üîç Analyse de votre demande")

            # Extraction des informations (code existant adapt√©)
            extracted_info = await self.llm_extractor.extract_quote_info(user_prompt)
            if not extracted_info:
                raise ValueError("Extraction des informations √©chou√©e")
            self._track_step_progress("parse_prompt", 100, "‚úÖ Demande analys√©e")
            self._track_step_complete("parse_prompt")

            # üîß MODIFICATION : V√©rification du mode production
            mode = "PRODUCTION" if not self.draft_mode else "DRAFT"
            logger.info(f"üîß MODE {mode} ACTIV√â")

            # V√©rifier les connexions
            self._track_step_start("validate_input", "üîß V√©rification des connexions")
            connections_ok = await self._check_connections()
            if not connections_ok:
                raise Exception("Connexions SAP/Salesforce indisponibles")
            self._track_step_complete("validate_input", "‚úÖ Connexions valid√©es")

            # Router selon le type d'action
            action_type = extracted_info.get("action_type", "DEVIS")

            if action_type == "DEVIS":
                try:
                    result = await self._process_quote_workflow(extracted_info)
                    if result.get("status") == "client_validation_required":
                        return result
                except Exception as e:
                    logger.error(f"‚ùå Erreur process_prompt: {str(e)}")
                    return {"success": False, "error": str(e)}
            else:
                result = await self._process_other_action(extracted_info)


            # üîß CORRECTION : Ne marquer comme termin√©e QUE si workflow r√©ellement termin√©
            if self.current_task:
                if result.get("status") == "user_interaction_required":
                    # Laisser la t√¢che en attente d'interaction - ne pas la terminer
                    logger.info(f"‚è∏Ô∏è T√¢che {self.task_id} en attente d'interaction utilisateur")
                    # ARR√äT COMPLET - Pas d'appel √† complete_task ni de broadcast
                    return result
        
            # Assurer que le r√©sultat final est envoy√© via WebSocket SEULEMENT si termin√©
            if result.get("status") != "user_interaction_required":
                try:
                    # Envoyer le r√©sultat via WebSocket
                    await websocket_manager.broadcast_to_task(
                        self.task_id,
                        {
                            "type": "quote_generation_completed",
                            "task_id": self.task_id,
                            "result": result,
                            "status": "completed",
                            "timestamp": datetime.now().isoformat(),
                        }
                    )
                    logger.info(f"üîî R√©sultat final envoy√© via WebSocket pour la t√¢che {self.task_id}")

                    # Attendre bri√®vement pour s'assurer que le client a re√ßu le message
                    await asyncio.sleep(1.0)

                except Exception as ws_error:
                    logger.error(f"‚ùå Erreur lors de l'envoi du r√©sultat via WebSocket pour {self.task_id}: {ws_error}")
                    raise  # Relever l'erreur pour √©viter de marquer la t√¢che comme termin√©e si l'envoi √©choue

                # Marquer la t√¢che comme termin√©e uniquement si l'envoi WebSocket a r√©ussi
                if self.current_task:
                    try:
                        progress_tracker.complete_task(self.task_id, result)
                        logger.info(f"‚úÖ T√¢che {self.task_id} marqu√©e comme termin√©e avec succ√®s.")
                    except Exception as complete_error:
                        logger.error(f"‚ùå Erreur lors de la finalisation de la t√¢che {self.task_id}: {complete_error}")
                        raise  # Relever l'erreur pour √©viter de laisser la t√¢che dans un √©tat incoh√©rent

            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erreur process_prompt: {str(e)}", exc_info=True)
            if self.current_task:
                progress_tracker.fail_task(self.task_id, str(e))
            raise
    
    async def _execute_full_workflow(self, prompt: str) -> Dict[str, Any]:
        """
        üîß M√âTHODE AJOUT√âE : Wrapper pour ex√©cution compl√®te du workflow
        
        ‚ö†Ô∏è NOTE : Cette m√©thode est appel√©e dans process_prompt mais semble redondante
        car le workflow principal est d√©j√† trait√© par _process_quote_workflow
        
        Args:
            prompt: Demande utilisateur originale
            
        Returns:
            Dict avec le r√©sultat complet du workflow
        """
        try:
            logger.info("üîÑ Ex√©cution du workflow complet")
            
            # üîß ATTENTION : Cette m√©thode ne devrait pas √™tre n√©cessaire
            # Le workflow est d√©j√† trait√© dans process_prompt par :
            # - _process_quote_workflow pour les devis
            # - _process_other_action pour les autres actions
            
            # Si cette m√©thode est appel√©e, retourner le r√©sultat d√©j√† calcul√©
            if hasattr(self, '_current_workflow_result'):
                logger.info("‚úÖ Retour du r√©sultat d√©j√† calcul√©")
                return self._current_workflow_result
            
            # Sinon, re-ex√©cuter l'extraction et le workflow de base
            logger.warning("‚ö†Ô∏è R√©-ex√©cution du workflow - ceci indique un probl√®me de logique")
            
            # Extraction de base
            extracted_info = await self.llm_extractor.extract_quote_info(prompt)
            
            # Router selon le type d'action
            action_type = extracted_info.get("action_type", "DEVIS")
            
            # Ex√©cuter le workflow appropri√© et sauvegarder le r√©sultat
            if action_type == "DEVIS":
                self._current_workflow_result = await self._process_quote_workflow(extracted_info)
            else:
                self._current_workflow_result = await self._process_other_action(extracted_info)

            # Utiliser le r√©sultat sauvegard√© (pas de re-calcul)
            result = self._current_workflow_result
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erreur _execute_full_workflow: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "message": "Erreur lors de l'ex√©cution du workflow complet"
            }
    
    async def process_prompt_original(self, prompt: str, task_id: str = None, draft_mode: bool = False) -> Dict[str, Any]:
        """
        Traite une demande de devis en langage naturel avec tracking d√©taill√©

        Args:
            prompt: Demande en langage naturel
            task_id: ID de t√¢che existant (pour r√©cup√©rer une t√¢che) ou None pour en cr√©er une
            draft_mode: Mode brouillon si True, mode normal si False
        """
        try:
            # Stocker le mode draft si fourni
            if draft_mode:
                self.draft_mode = draft_mode
                logger.info("Mode DRAFT activ√© pour cette g√©n√©ration")

            # Test des connexions si mode production forc√©
            if self.force_production:
                logger.info("üîç V√©rification connexions pour mode production...")

                try:
                    connections = await MCPConnector.test_connections()
                    sf_connected = connections.get('salesforce', {}).get('connected', False)
                    sap_connected = connections.get('sap', {}).get('connected', False)

                    if not sf_connected and not sap_connected:
                        raise ConnectionError("Aucune connexion syst√®me disponible")

                    logger.info(f"‚úÖ Connexions OK - SF: {sf_connected}, SAP: {sap_connected}")

                except Exception as e:
                    if self.force_production:
                        # En mode production forc√©, √©chouer plut√¥t que de basculer en d√©mo
                        return {
                            "success": False,
                            "error": f"Connexions syst√®me indisponibles: {e}",
                            "message": "Impossible de traiter la demande - Syst√®mes non disponibles"
                        }

            # Initialiser ou r√©cup√©rer le tracking
            if task_id:
                self.current_task = progress_tracker.get_task(task_id)
                self.task_id = task_id
                if not self.current_task:
                    raise ValueError(f"T√¢che {task_id} introuvable")
            else:
                self.task_id = self._initialize_task_tracking(prompt)
            
            logger.info(f"=== D√âMARRAGE WORKFLOW - T√¢che {self.task_id} ===")
            logger.info(f"Mode: {'DRAFT' if self.draft_mode else 'NORMAL'}")
            
            # ========== PHASE 1: ANALYSE DE LA DEMANDE ==========
            
            # √âtape 1.1: Analyse initiale
            self._track_step_start("parse_prompt", "Analyse de votre demande...")
            await asyncio.sleep(0.5)  # Simulation temps de traitement
            self._track_step_progress("parse_prompt", 50, "D√©composition de la demande")
            
            # √âtape 1.2: Extraction des entit√©s
            self._track_step_complete("parse_prompt", "Demande analys√©e")
            self._track_step_start("extract_entities", "Identification des besoins...")
            
            extracted_info = await self._extract_info_unified(prompt, "standard")
            self.context["extracted_info"] = extracted_info

            # üîç DEBUG : Log du type d'action
            logger.info(f"üéØ TYPE D'ACTION RE√áU: {extracted_info.get('action_type', 'AUCUN')}")
            logger.info(f"üìã DONN√âES EXTRAITES: {extracted_info}")

            # üÜï NOUVEAU : Router selon le type d'action d√©tect√©
            action_type = extracted_info.get("action_type", "DEVIS")
            logger.info(f"üöÄ ROUTAGE VERS: {action_type}")

            if action_type == "RECHERCHE_PRODUIT":
                return await self._handle_product_search(extracted_info)
            elif action_type == "INFO_CLIENT":
                return await self._handle_client_info(extracted_info)
            elif action_type == "CONSULTATION_STOCK":
                return await self._handle_stock_consultation(extracted_info)
            elif action_type == "DEVIS":
                # Continuer avec le workflow de devis existant
                pass
            else:
                return await self._handle_other_request(extracted_info)
            # V√©rifier les √©l√©ments manquants et demander les informations
            missing_elements = []
            if not extracted_info.get("client"):
                missing_elements.append("client")
            if not extracted_info.get("products") or len(extracted_info.get("products", [])) == 0:
                missing_elements.append("produits")
            
            if missing_elements:
                self._track_step_complete("extract_entities", "Informations partielles extraites")
                return await self._build_missing_info_response(extracted_info, missing_elements)
            
            self._track_step_progress("extract_entities", 80, "Informations extraites")
            
            # √âtape 1.3: Validation input
            self._track_step_complete("extract_entities", "Besoins identifi√©s")
            self._track_step_start("validate_input", "V√©rification de la coh√©rence...")
            
            # Validation de coh√©rence (client + produits pr√©sents)
            if not extracted_info.get("client") or not extracted_info.get("products"):
                self._track_step_fail("validate_input", "Informations manquantes",
                                    "Client ou produits non sp√©cifi√©s")
                return self._build_error_response("Informations incompl√®tes", 
                                                "Veuillez sp√©cifier le client et les produits")
            
            self._track_step_complete("validate_input", "Demande valid√©e")
            
            # ========== PHASE 2: VALIDATION CLIENT ==========
            
            # √âtape 2.1: Recherche client
            self._track_step_start("search_client", "Recherche du client...")
            
            client_info = await self.client_validator.validate_client_complete(extracted_info.get("client"))
            # CORRECTION : G√©rer les suggestions client M√äME si trouv√© (choix multiple)
            if client_info.get("suggestions") and len(client_info["suggestions"]) > 1:
                self._track_step_progress("verify_client_info", 50, "Plusieurs clients trouv√©s - s√©lection requise")
                return {
                    "status": "suggestions_required",
                    "type": "client_suggestions", 
                    "message": f"{len(client_info['suggestions'])} clients trouv√©s pour '{client_name}'",
                    "suggestions": client_info["suggestions"],
                    "workflow_context": {
                        "extracted_info": extracted_info,
                        "task_id": self.task_id,
                        "step": "client_validation"
                    }
                }
            # G√©rer les suggestions client
            if not client_info.get("found"):
            
                if client_info.get("suggestions"):
                    # Il y a des suggestions, retourner pour interaction utilisateur
                    self._track_step_progress("verify_client_info", 50, "Suggestions client disponibles")
                    return {
                        "status": "suggestions_required",
                        "type": "client_suggestions",
                        "message": client_info.get("message", "Suggestions disponibles"),
                        "suggestions": client_info["suggestions"],
                        "auto_suggest": client_info.get("auto_suggest", False),
                        "workflow_context": {
                            "extracted_info": extracted_info,
                            "task_id": self.task_id,
                            "step": "client_validation"
                        }
                    }
                else:
                    # Aucune suggestion, erreur classique
                    return self._build_error_response("Client non trouv√©", 
                                                    client_info.get("message", "Client introuvable"))
            
            self.context["client_info"] = client_info
            
            self._track_step_progress("search_client", 70, "Consultation des bases de donn√©es")
            
            # √âtape 2.2: V√©rification des informations
            self._track_step_complete("search_client", "Recherche termin√©e")
            self._track_step_start("verify_client_info", "V√©rification des informations...")
            
            # Gestion client non trouv√© avec validation
            if not client_info.get("found") and self.validation_enabled:
                self._track_step_progress("verify_client_info", 50, "Client non trouv√©, cr√©ation en cours...")
                validation_result = await self._handle_client_not_found_with_validation(
                    extracted_info.get("client"),
                    extracted_info  # ‚úÖ Passer le contexte complet pour continuation
                )

                # Ajout de log d√©taill√© avant envoi √† websocket (dans _handle_client_not_found_with_validation)
                # Cette fonction doit inclure le logging demand√©, ex:
                # logger.info(f"‚ñ∂Ô∏è [WORKFLOW] Demande de validation utilisateur pour le client '{client_name}'")
                # logger.debug(f"üîç [WORKFLOW] Donn√©es d'interaction pr√©par√©es: {json.dumps(interaction_data, indent=2, ensure_ascii=False)}")
                # ...

                if validation_result.get("client_created"):
                    client_info = validation_result["client_info"]
                    self.context["client_info"] = client_info
                    self.context["client_validation"] = validation_result["validation_details"]
                    self._track_step_progress("verify_client_info", 90, "Nouveau client cr√©√©")
                else:
                    self._track_step_fail("verify_client_info", validation_result.get("error", "Erreur de cr√©ation"),
                                        "Impossible de cr√©er le client")
                    return self._build_error_response("Impossible de cr√©er le client", validation_result.get("error"))
            elif not client_info.get("found"):
                self._track_step_fail("verify_client_info", "Client introuvable", client_info.get("error"))
                return self._build_error_response("Client non trouv√©", client_info.get("error"))
            
            # √âtape 2.3: Client pr√™t
            self._track_step_complete("verify_client_info", "Informations v√©rifi√©es")
            self._track_step_complete("client_ready", f"Client {client_info.get('name', 'N/A')} valid√©")
            # √âtape 2.4: V√©rification doublons
            self._track_step_start("check_duplicates", "V√©rification des doublons...")

            duplicate_check = await self._check_duplicate_quotes(
                client_info,
                extracted_info.get("products", [])
            )
            self.context["duplicate_check"] = duplicate_check
            # Extraire le nom du client pour l'utiliser dans les messages
            client_name = client_info.get("data", {}).get("Name", client_info.get("name", "Client"))

            # G√©rer l'affichage des alertes de doublon
            if duplicate_check.get("requires_user_decision"):
                self._track_step_progress(
                    "check_duplicates",
                    90,
                    duplicate_check.get("alert_message", "Doublons d√©tect√©s")
                )

                # Pr√©parer les donn√©es pour l'interaction utilisateur
                duplicate_interaction_data = {
                    "type": "duplicate_resolution",
                    "interaction_type": "duplicate_resolution",
                    "client_name": client_name,
                    "alert_message": duplicate_check.get("alert_message"),
                    "recent_quotes": duplicate_check.get("recent_quotes", []),
                    "draft_quotes": duplicate_check.get("draft_quotes", []),
                    "similar_quotes": duplicate_check.get("similar_quotes", []),
                    "extracted_info": extracted_info,
                    "options": [
                        {"value": "proceed", "label": "Cr√©er un nouveau devis malgr√© les doublons"},
                        {"value": "consolidate", "label": "Consolider avec un devis existant"},
                        {"value": "review", "label": "Examiner les devis existants d'abord"},
                        {"value": "cancel", "label": "Annuler la demande"}
                    ],
                    "input_type": "choice"
                }

                # Marquer la t√¢che en attente d'interaction
                if self.current_task:
                    self.current_task.status = TaskStatus.PENDING
                    self.current_task.require_user_validation(
                        "duplicate_resolution",
                        "duplicate_resolution",
                        duplicate_interaction_data
                    )

                # Envoyer via WebSocket
                try:
                    await websocket_manager.send_user_interaction_required(
                        self.task_id,
                        duplicate_interaction_data
                    )
                except Exception as ws_error:
                    logger.warning(f"‚ö†Ô∏è Erreur envoi WebSocket: {ws_error}")

                return {
                    "success": True,
                    "status": "user_interaction_required",
                    "type": "duplicate_resolution",
                    "message": duplicate_check.get("alert_message"),
                    "task_id": self.task_id,
                    "interaction_data": duplicate_interaction_data
                }

            if duplicate_check.get("duplicates_found"):
                self._track_step_progress("check_duplicates", 80, f"‚ö†Ô∏è {len(duplicate_check.get('warnings', []))} alerte(s) d√©tect√©e(s)")

                logger.warning(f"‚ö†Ô∏è {len(duplicate_check.get('warnings', []))} doublons d√©tect√©s - R√©cup√©ration des informations produits quand m√™me")

                # üîß MODIFICATION : R√©cup√©rer les informations produits M√äME avec des doublons
                self._track_step_start("get_products_info", "R√©cup√©ration des informations produits...")
                self._track_step_progress("check_duplicates", 80, f"‚ö†Ô∏è {len(duplicate_check.get('warnings', []))} alerte(s) d√©tect√©e(s)")
                
                logger.warning(f"‚ö†Ô∏è {len(duplicate_check.get('warnings', []))} doublons d√©tect√©s - R√©cup√©ration des informations produits quand m√™me")
                
                # üîß MODIFICATION : R√©cup√©rer les informations produits M√äME avec des doublons
                self._track_step_start("get_products_info", "R√©cup√©ration des informations produits...")
                
                validated_products = await self._validate_products_with_suggestions(extracted_info.get("products", []))
                product_info = []
                # V√©rifier s'il y a des produits n√©cessitant des suggestions
                products_with_suggestions = [p for p in validated_products if not p.get("found") and p.get("suggestions")]
                    
                if products_with_suggestions:
                    # Il y a des suggestions produits, retourner pour interaction utilisateur
                    self._track_step_progress("get_products_info", 50, "Suggestions produits disponibles")
                    return {
                        "status": "suggestions_required",
                        "type": "product_suggestions",
                        "message": f"{len(products_with_suggestions)} produit(s) n√©cessitent votre attention",
                        "products": validated_products,
                        "workflow_context": {
                            "extracted_info": extracted_info,
                            "client_info": client_info,
                            "task_id": self.task_id,
                            "step": "product_validation"
                        }
                    }
                else:
                    # Tous les produits sont OK, continuer avec la g√©n√©ration classique
                    products_info = [p["data"] for p in validated_products if p.get("found")]
                self.context["products_info"] = products_info
                
                self._track_step_complete("get_products_info", f"{len(products_info)} produit(s) analys√©(s)")
                
                # üì¢ AVERTISSEMENT NON BLOQUANT - L'utilisateur d√©cide AVEC les informations
                self._track_step_complete("check_duplicates", "Doublons d√©tect√©s - Suite du traitement")
                
                # R√©cup√©rer le nom du client depuis le contexte
                client_name = client_info.get("data", {}).get("Name", "Client")
                
                # En mode brouillon, m√™me avec des doublons, on continue le processus
                if self.draft_mode:
                    logger.info(f"‚ö†Ô∏è Doublons d√©tect√©s en mode brouillon - Continuation du processus malgr√© tout")
                    # Ne pas retourner ici, continuer √† la section suivante
                else:
                    # En mode normal (non brouillon), on demande confirmation avant de continuer
                    # üîß CONSTRUIRE MANUELLEMENT LA PR√âVISUALISATION DU DEVIS
                    quote_preview = {
                        "client": {
                            "name": client_name,
                            "account_number": client_info.get("data", {}).get("AccountNumber", ""),
                            "salesforce_id": client_info.get("data", {}).get("Id", ""),
                            "phone": client_info.get("data", {}).get("Phone", ""),
                            "email": client_info.get("data", {}).get("Email", ""),
                            "city": client_info.get("data", {}).get("BillingCity", ""),
                            "country": client_info.get("data", {}).get("BillingCountry", "")
                        },
                        "products": [],
                        "total_amount": 0.0,
                        "currency": "EUR"
                    }

                    # Traiter les produits pour la pr√©visualisation
                    total_amount = 0.0
                    for product in products_info:
                        if isinstance(product, dict) and "error" not in product:
                            # üîß EXTRACTION CORRIG√âE DES DONN√âES PRODUIT
                            product_code = (product.get("code") or 
                                        product.get("item_code") or 
                                        product.get("ItemCode", ""))
                            
                            product_name = (product.get("name") or 
                                        product.get("item_name") or 
                                        product.get("ItemName", "Sans nom"))
                            quantity = float(product.get("quantity", 1))
                            unit_price = float(product.get("unit_price", 0))
                            line_total = quantity * unit_price
                            total_amount += line_total
                            
                            quote_preview["products"].append({
                                "code": product.get("code", ""),
                                "name": product.get("name", "Sans nom"),
                                "quantity": quantity,
                                "unit_price": unit_price,
                                "line_total": line_total,
                                "stock": product.get("stock", 0)
                            })

                    quote_preview["total_amount"] = total_amount

                    # Retourner une r√©ponse WARNING avec tous les d√©tails n√©cessaires
                    warning_response = {
                        "success": False,  # False pour arr√™ter le polling
                        "status": "warning",  
                        "task_id": self.task_id,
                        "message": f"Devis existants d√©tect√©s pour {client_name}", 
                        "error_type": "duplicates_detected",
                        "error_details": {
                            "duplicate_check": duplicate_check,
                            "client_name": client_name,
                            "client_id": client_info.get("data", {}).get("Id"),
                            "action_required": "Des devis existants ont √©t√© trouv√©s. Que souhaitez-vous faire ?",
                            "quote_preview": quote_preview
                        }
                    }

                    # üîß CRITIQUE : Marquer la t√¢che comme termin√©e AVANT de retourner
                    if self.current_task and self.task_id:
                        progress_tracker.complete_task(self.task_id, warning_response)

                    logger.info(f"üîß RETOUR WARNING RESPONSE pour t√¢che {self.task_id}")
                    return warning_response
            else:
                # Pas de doublons, continuer normalement
                self._track_step_complete("check_duplicates", "Aucun doublon d√©tect√©")
    
            # ========== PHASE 3: TRAITEMENT DES PRODUITS ==========
            
            # √âtape 3.1: Connexion catalogue
            self._track_step_start("connect_catalog", "Connexion au catalogue...")
            await asyncio.sleep(0.3)  # Simulation connexion
            self._track_step_complete("connect_catalog", "Catalogue accessible")
            
            # √âtape 3.2: Recherche produits
            self._track_step_start("lookup_products", "V√©rification des produits...")
            
            # ‚úÖ NOUVEAU CODE AVEC PRICE ENGINE
            # √âtape 1: R√©cup√©rer les donn√©es techniques
            self._track_step_start("get_products_info", "R√©cup√©ration des informations produits...")
            products_info = await self._get_products_info(extracted_info.get("products", []))
            products_info_result = await self._get_products_info_with_auto_selection(extracted_info.get("products", []))
            if isinstance(products_info_result, dict) and products_info_result.get("status") in ["product_selection_required", "user_interaction_required"]:
                logger.info("‚è∏Ô∏è Workflow interrompu - S√©lection/interaction produits requise")
                return products_info_result
            products_info = products_info_result.get("products", []) if isinstance(products_info_result, dict) else products_info_result
            if not products_info:
                self._track_step_fail("get_products_info", "Aucun produit valide", "S√©lection requise")
                return {"status": "product_selection_required", "message": "Aucun produit valide trouv√©. Veuillez s√©lectionner une alternative.", "products": []}
            
            self._track_step_complete("get_products_info", f"{len(products_info)} produit(s) trouv√©(s)")

            # √âtape 3: Calculer le total
            total_amount = sum(p.get("line_total", 0) for p in products_info if not p.get("error"))
            self.context["products_info"] = products_info
            
            self._track_step_progress("lookup_products", 60, f"{len(products_info)} produits analys√©s")
            
            # √âtape 3.3: V√©rification stock
            self._track_step_complete("lookup_products", "Produits trouv√©s")
            self._track_step_start("check_stock", "V√©rification du stock...")
            
            availability = await self._check_availability(products_info)
            self.context["availability"] = availability
            
            self._track_step_progress("check_stock", 80, "Stock v√©rifi√©")
            
            # √âtape 3.4: Calcul des prix
            self._track_step_complete("check_stock", "Stock disponible")
            # ‚úÖ NOUVEAU CODE AVEC PRICE ENGINE

            self._track_step_start("calculate_prices", "Calcul des prix avec Price Engine...")
            price_engine = PriceEngineService()

            # Calculer les prix avec le nouveau moteur
            pricing_result = await price_engine.calculate_quote_pricing({
            "client_data": client_info.get("data", {}),
            "products": products_info,
            "special_conditions": extracted_info.get("conditions", {})
            })

            # Mettre √† jour les produits avec les nouveaux prix
            products_info = pricing_result.get("updated_products", products_info)
            total_amount = pricing_result.get("total_amount", total_amount)

            self._track_step_progress("calculate_prices", 90, "Prix calcul√©s avec Price Engine")
            
            # √âtape 3.5: Produits pr√™ts
            self._track_step_complete("calculate_prices", "Prix finalis√©s")
            self._track_step_complete("product_ready", f"{len([p for p in products_info if 'error' not in p])} produits confirm√©s")
            
            # ========== PHASE 4: CR√âATION DU DEVIS ==========
            
            # √âtape 4.1: Pr√©paration
            self._track_step_start("prepare_quote", "Pr√©paration du devis...")
            
            # Logique de pr√©paration (regroupement des donn√©es)
            await asyncio.sleep(0.2)
            self._track_step_progress("prepare_quote", 70, "Donn√©es consolid√©es")
            
            # √âtape 4.2: Enregistrement SAP
            self._track_step_complete("prepare_quote", "Devis pr√©par√©")
            self._track_step_start("save_to_sap", "Enregistrement dans SAP...")
            
            quote_result = await self._create_quote_in_salesforce(client_info.get("data", {}), products_info)
            self.context["quote_result"] = quote_result
            
            if not quote_result.get("success"):
                self._track_step_fail("save_to_sap", quote_result.get("error", "Erreur SAP"),
                                    "Impossible d'enregistrer dans SAP")
                return self._build_error_response("Erreur de cr√©ation", quote_result.get("error"))
            
            self._track_step_progress("save_to_sap", 85, "Enregistr√© dans SAP")
            
            # √âtape 4.3: Synchronisation Salesforce
            self._track_step_complete("save_to_sap", "SAP mis √† jour")
            self._track_step_start("sync_salesforce", "Synchronisation Salesforce...")
            
            # La sync est d√©j√† dans _create_quote_in_salesforce
            await asyncio.sleep(0.3)
            self._track_step_progress("sync_salesforce", 95, "Salesforce synchronis√©")
            
            # √âtape 4.4: Finalisation
            self._track_step_complete("sync_salesforce", "‚òÅÔ∏è Synchronisation termin√©e")
            self._track_step_start("create_quote", "üéØ Cr√©ation du devis")
            
            # Construire la r√©ponse finale
            response = self._build_response()
            response["task_id"] = self.task_id  # Ajouter l'ID de t√¢che
            
            self._track_step_complete("create_quote", "‚úÖ Devis cr√©√© avec succ√®s")
            
            # Terminer la t√¢che
            if self.current_task:
                progress_tracker.complete_task(self.task_id, response)
            
            logger.info(f"=== WORKFLOW TERMIN√â - T√¢che {self.task_id} ===")
            return response
            
        except Exception as e:
            logger.exception(f"Erreur critique dans le workflow: {str(e)}")
            
            # Marquer la t√¢che comme √©chou√©e
            if self.current_task and self.task_id:
                progress_tracker.fail_task(self.task_id, str(e))
            
            return self._build_error_response("Erreur syst√®me", str(e))
    
    def get_task_status(self, task_id: str = None) -> Optional[Dict[str, Any]]:
        """R√©cup√®re le statut d√©taill√© d'une t√¢che"""
        target_id = task_id or self.task_id
        if not target_id:
            return None
            
        task = progress_tracker.get_task(target_id)
        if not task:
            return None
            
        return task.get_detailed_progress()
    
    async def _handle_client_not_found_with_validation(self, client_name: str, extracted_info: Dict = None) -> Dict[str, Any]:
        """
        G√®re le cas o√π un client n'est pas trouv√© - VERSION COMPL√àTE CORRIG√âE
        
        CONSERVE :
        - Logique de validation et enrichissement
        - Cr√©ation SAP/Salesforce automatique en mode POC
        - Workflow complet avec continuation
        
        AJOUTE :
        - Validation utilisateur optionnelle
        - Gestion robuste des erreurs
        - Continuation automatique du workflow
        """
        logger.info(f"üîç Traitement client non trouv√© avec validation compl√®te: {client_name}")
        
        # CORRECTION 1: V√©rifier si client_name est valide
        if not client_name or client_name.strip() == "":
            logger.warning("‚ùå Nom de client vide ou None")
            return {
                "client_created": False,
                "error": "Nom de client manquant",
                "suggestion": "V√©rifiez que le prompt contient un nom de client valide",
                "workflow_context": {
                    "task_id": self.task_id,
                    "extracted_info": extracted_info,
                    "step": "client_validation_failed"
                }
            }
        
        try:
            # === √âTAPE 1: ENRICHISSEMENT ET VALIDATION DONN√âES ===
            logger.info(f"üîç √âtape 1: Enrichissement donn√©es pour {client_name}")
            
            # D√©tecter le pays probable
            country = self._detect_country_from_name(client_name)
            logger.info(f"Pays d√©tect√©: {country}")
            
            # CONSERV√â: Validation avec le validateur client
            validation_result = None
            if self.client_validator:
                try:
                    logger.info("üîç Validation via ClientValidator...")
                    validation_result = await self.client_validator.validate_and_enrich_client(client_name)
                    logger.info(f"‚úÖ Validation termin√©e: {validation_result.get('can_create', False)}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur validation client: {str(e)}")
                    validation_result = {"can_create": True, "warnings": [str(e)]}
            
            # CONSERV√â: Enrichissement externe via company_search_service
            enrichment_data = {}
            try:
                logger.info("üîç Enrichissement externe...")
                enrichment_result = await self._search_company_enrichment(client_name)
                if enrichment_result.get("success"):
                    enrichment_data = enrichment_result.get("company_data", {})
                    logger.info(f"‚úÖ Donn√©es enrichies r√©cup√©r√©es pour {client_name}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur enrichissement: {str(e)}")
            
            # === √âTAPE 2: V√âRIFICATION DOUBLONS ===
            logger.info("üîç √âtape 2: V√©rification doublons avanc√©e")
            
            duplicate_check = {}
            try:
                duplicate_check = await self._check_duplicates_enhanced(client_name, enrichment_data)
                if duplicate_check.get("has_duplicates"):
                    logger.warning(f"‚ö†Ô∏è Doublons d√©tect√©s: {duplicate_check.get('duplicate_count', 0)}")
                    
                    # NOUVEAU: Gestion des doublons avec choix utilisateur
                    return {
                        "client_created": False,
                        "status": "duplicates_found",
                        "duplicate_check": duplicate_check,
                        "enrichment_data": enrichment_data,
                        "validation_result": validation_result,
                        "workflow_context": {
                            "task_id": self.task_id,
                            "extracted_info": extracted_info,
                            "step": "duplicate_resolution_required"
                        },
                        "user_action_required": True,
                        "message": f"Doublons potentiels trouv√©s pour '{client_name}'"
                    }
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur v√©rification doublons: {str(e)}")
            
            # === √âTAPE 3: VALIDATION UTILISATEUR (MODE POC = AUTO-APPROBATION) ===
            logger.info("üîç √âtape 3: Validation utilisateur")
            
            # NOUVEAU: Demande validation utilisateur
            try:
                validation_request = await self._request_user_validation_for_client_creation(
                    client_name, 
                    {
                        "enrichment_data": enrichment_data,
                        "validation_result": validation_result,
                        "duplicate_check": duplicate_check
                    }
                )
                
                # En mode POC, auto-approuver
                if validation_request.get("status") != "approved":
                    logger.warning("‚ö†Ô∏è ATTENTION: Client non trouv√© avec find_client_everywhere - Cr√©ation bloqu√©e")
                    validation_request["status"] = "requires_user_confirmation"
                    validation_request["requires_explicit_approval"] = True
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur validation utilisateur: {str(e)}")
                # Fallback: approuver automatiquement
                validation_request = {"status": "approved", "auto_approved": True, "fallback": True}
            
            # === √âTAPE 4: CR√âATION CLIENT COMPL√àTE ===
            if validation_request.get("status") == "approved":
                logger.info("üöÄ √âtape 4: Cr√©ation client approuv√©e")
                
                # Pr√©parer les donn√©es client enrichies
                client_data = {
                    "company_name": client_name.strip(),
                    "billing_country": country,
                    "email": f"contact@{client_name.replace(' ', '').lower()}.com",
                    "phone": "+33 1 00 00 00 00" if country == "FR" else "+1 555 000 0000"
                }
                
                # Fusionner avec les donn√©es enrichies
                if enrichment_data:
                    client_data.update({
                        "official_name": enrichment_data.get("official_name", client_name),
                        "siren": enrichment_data.get("siren", ""),
                        "siret": enrichment_data.get("siret", ""),
                        "address": enrichment_data.get("address", {}),
                        "activity": enrichment_data.get("activity", {}),
                        "enriched": True
                    })
                
                # CONSERV√â: Cr√©ation dans Salesforce d'abord
                logger.info("üíæ Cr√©ation Salesforce...")
                sf_client = await self._create_salesforce_client_from_validation(client_data, validation_result or {})
                
                if sf_client.get("success"):
                    logger.info(f"‚úÖ Client Salesforce cr√©√©: {sf_client.get('id')}")
                    
                    # CONSERV√â: Cr√©ation dans SAP ensuite
                    logger.info("üíæ Cr√©ation SAP...")
                    sap_client = await self._create_sap_client_from_validation(client_data, sf_client)
                    
                    if sap_client.get("success"):
                        logger.info(f"‚úÖ Client SAP cr√©√©: {sap_client.get('data', {}).get('CardCode')}")
                    
                    # === √âTAPE 5: CONTINUATION WORKFLOW AUTOMATIQUE ===
                    logger.info("üîÑ √âtape 5: Continuation automatique du workflow")
                    
                    # Mettre √† jour le contexte avec le client cr√©√©
                    client_final_data = sf_client.get("data", {})
                    self.context.update({
                        "client_info": {"data": client_final_data, "found": True, "created": True},
                        "client_validation": validation_result,
                        "sap_client": sap_client
                    })
                    
                    # NOUVEAU: Continuation automatique avec les produits si disponibles
                    if extracted_info and extracted_info.get("products"):
                        logger.info("üîÑ Continuation avec r√©cup√©ration produits...")
                        try:
                            products_result = await self._process_products_retrieval(extracted_info["products"])
                            self.context["products_info"] = products_result.get("products", [])
                            logger.info(f"‚úÖ Workflow continu√© - {len(products_result.get('products', []))} produit(s) trait√©s")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Erreur continuation produits: {str(e)}")
                    
                    return {
                        "client_created": True,
                        "client_info": {"data": client_final_data, "found": True, "created": True},
                        "validation_details": validation_result,
                        "sap_client": sap_client,
                        "enrichment_data": enrichment_data,
                        "duplicate_check": duplicate_check,
                        "workflow_continued": bool(extracted_info and extracted_info.get("products")),
                        "message": f"Client '{client_name}' cr√©√© avec succ√®s et workflow continu√©"
                    }
                else:
                    logger.error(f"‚ùå Erreur cr√©ation Salesforce: {sf_client.get('error')}")
                    return {
                        "client_created": False,
                        "error": f"Erreur cr√©ation Salesforce: {sf_client.get('error')}",
                        "validation_details": validation_result,
                        "enrichment_data": enrichment_data
                    }
            else:
                # === √âTAPE 5 ALTERNATIVE: VALIDATION UTILISATEUR REQUISE ===
                logger.info("‚è∏Ô∏è Validation utilisateur requise")
                return {
                    "client_created": False,
                    "status": "user_validation_required",
                    "validation_request": validation_request,
                    "enrichment_data": enrichment_data,
                    "validation_details": validation_result,
                    "duplicate_check": duplicate_check,
                    "workflow_context": {
                        "task_id": self.task_id,
                        "extracted_info": extracted_info,
                        "step": "awaiting_user_validation"
                    },
                    "message": f"Validation utilisateur requise pour cr√©er '{client_name}'"
                }
                    
        except Exception as e:
            logger.exception(f"‚ùå Erreur lors de la gestion client non trouv√©: {str(e)}")
            return {
                "client_created": False,
                "error": f"Erreur syst√®me: {str(e)}",
                "workflow_context": {
                    "task_id": self.task_id,
                    "extracted_info": extracted_info,
                    "step": "error_handling"
                }
            }

    # === M√âTHODES D'APPUI REQUISES ===

    async def _request_user_validation_for_client_creation(self, client_name: str, context_data: Dict) -> Dict[str, Any]:
        """Demande validation utilisateur pour cr√©ation client - M√âTHODE MANQUANTE AJOUT√âE"""
        try:
            logger.info(f"üì© Demande validation cr√©ation client: {client_name}")
            
            enrichment_data = context_data.get("enrichment_data", {})
            validation_result = context_data.get("validation_result", {})
            duplicate_check = context_data.get("duplicate_check", {})
            
            # MODE POC: Auto-approuver si donn√©es suffisantes
            if enrichment_data.get("siren") or validation_result.get("can_create"):
                logger.info("‚úÖ Auto-approbation avec donn√©es suffisantes")
                return {
                    "status": "approved",
                    "method": "auto_approved_with_data",
                    "confidence": "high",
                    "reason": "Donn√©es enrichies disponibles"
                }
            
            # Auto-approuver en mode fallback (POC)
            logger.info("‚ö†Ô∏è Auto-approbation mode POC")
            return {
                "status": "approved", 
                "method": "auto_approved_poc",
                "confidence": "medium",
                "reason": "Mode POC activ√©"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur validation utilisateur: {str(e)}")
            return {
                "status": "error",
                "error": str(e)
            }
    async def _continue_workflow_after_client_selection(self, client_data, original_context):
        # CORRECTION: Utiliser _process_products_retrieval qui g√®re les s√©lections
        products_result = await self._process_products_retrieval(products)
        if products_result.get("status") == "product_selection_required":
             # Envoyer l'interaction WebSocket avant de s'arr√™ter
            try:
                await self._send_product_selection_interaction(products_result.get("products", []))
            except Exception as ws_error:
                logger.warning(f"‚ö†Ô∏è Erreur envoi WebSocket interaction produits: {ws_error}")
            # Pr√©parer l'interaction WebSocket pour s√©lection produits
            try:
                await websocket_manager.send_user_interaction_required(self.task_id, {
                    "type": "product_selection",
                    "products": products_result.get("products", []),
                    "message": "S√©lection de produits requise"
                })
            except Exception as ws_error:
                logger.warning(f"‚ö†Ô∏è Erreur envoi WebSocket (non bloquant): {ws_error}")
            return products_result
        return products_result
        return products_result


    async def _validate_products_with_suggestions(self, products: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Valide les produits avec suggestions intelligentes
        """
        logger.info(f"üîç Validation de {len(products)} produit(s) avec suggestions")
        
        validated_products = []
        self.product_suggestions = []
        
        for i, product in enumerate(products):
            
            logger.info(f"üîç Validation produit {i+1}: {product_code}")
            
            try:
                # === RECHERCHE CLASSIQUE (code existant) ===
                sap_results = await self.mcp_connector.call_sap_mcp("sap_get_product_details", {"item_code": product_code})
                
                if "error" not in sap_results and sap_results.get("ItemCode"):
                    # Produit trouv√© directement - CORRECTION: sap_results contient directement les donn√©es, pas de cl√© "data"
                    product_data = sap_results
                    validated_products.append({
                        "found": True,
                        "data": product_data,
                        "quantity": quantity,
                        "suggestions": None
                    })
                    self.product_suggestions.append(None)
                    logger.info(f"‚úÖ Produit trouv√© directement: {product_code}")
                    continue
                
                # === NOUVEAU : RECHERCHE INTELLIGENTE ===
                logger.info(f"üß† Produit '{product_code}' non trouv√©, activation des suggestions...")
                
                # R√©cup√©rer tous les produits pour la recherche floue
                all_products_result = await self.mcp_connector.call_sap_mcp("get_all_items", {"limit": 1000})
                available_products = all_products_result.get("data", []) if all_products_result.get("success") else []
                
                # G√©n√©rer les suggestions
                product_suggestion = await self.suggestion_engine.suggest_product(product_code, available_products)
                self.product_suggestions.append(product_suggestion)
                
                if product_suggestion.has_suggestions:
                    primary_suggestion = product_suggestion.primary_suggestion
                    logger.info(f"üéØ Suggestion produit: {primary_suggestion.suggested_value} (score: {primary_suggestion.score})")
                    
                    # üÜï AUTO-S√âLECTION SI CONFIANCE √âLEV√âE ET UNE SEULE SUGGESTION
                    if (primary_suggestion.confidence.value == "high" and 
                        len(product_suggestion.all_suggestions) == 1):
                        # Auto-s√©lectionner avec confiance √©lev√©e
                        suggestion_data = primary_suggestion.metadata
                        validated_products.append({
                            "found": True,
                            "data": suggestion_data,
                            "quantity": quantity,
                            "auto_selected": True,
                            "confidence": "high"
                        })
                        self.product_suggestions.append(None)
                        logger.info(f"‚úÖ Produit auto-s√©lectionn√© (confiance √©lev√©e): {suggestion_data.get('item_code')}")
                        continue
                    
                    validated_products.append({
                        "found": False,
                        "original_code": product_code,
                        "quantity": quantity,
                        "suggestions": product_suggestion.to_dict(),
                        "auto_suggest": (primary_suggestion.confidence.value == "high"),
                        "message": product_suggestion.conversation_prompt
                    })
                else:
                    # Aucune suggestion
                    validated_products.append({
                        "found": False,
                        "original_code": product_code,
                        "quantity": quantity,
                        "suggestions": None,
                        "message": f"Produit '{product_code}' non trouv√© dans le catalogue"
                    })
                    
            except Exception as e:
                logger.exception(f"Erreur validation produit {product_code}: {str(e)}")
                validated_products.append({
                    "found": False,
                    "original_code": product_code,
                    "quantity": quantity,
                    "error": str(e)
                })
                self.product_suggestions.append(None)
        
        return validated_products
    
    def _detect_country_from_name(self, client_name: str) -> str:
        """D√©tecte le pays probable √† partir du nom du client"""
        # CORRECTION 4: Gestion robuste des valeurs None
        if not client_name:
            return "FR"  # Par d√©faut
            
        client_name_lower = client_name.lower()
        
        # CORRECTION 5: Am√©liorer la d√©tection USA
        us_indicators = ["inc", "llc", "corp", "corporation", "ltd", "usa", "america", "-usa-"]
        if any(indicator in client_name_lower for indicator in us_indicators):
            return "US"
        
        # Indicateurs fran√ßais
        french_indicators = ["sarl", "sas", "sa", "eurl", "sasu", "sci", "france", "paris", "lyon", "marseille", "-france-"]
        if any(indicator in client_name_lower for indicator in french_indicators):
            return "FR"
        
        # Indicateurs britanniques
        uk_indicators = ["limited", "plc", "uk", "britain", "london"]
        if any(indicator in client_name_lower for indicator in uk_indicators):
            return "UK"
        
        # Par d√©faut, France (march√© principal)
        return "FR"
    
    async def _create_salesforce_client_from_validation(self, client_data: Dict[str, Any], validation_result: Dict[str, Any]) -> Dict[str, Any]:
        """Cr√©e un client dans Salesforce avec les donn√©es valid√©es"""
        try:
            logger.info("Cr√©ation client Salesforce avec donn√©es valid√©es")
            
            # Pr√©parer les donn√©es Salesforce
            sf_data = {
                "Name": validation_result.get("enriched_data", {}).get("normalized_company_name", client_data["company_name"]),
                "Type": "Customer",
                "Description": f"Client cr√©√© automatiquement via NOVA avec validation {validation_result['country']}",
            }
            
            # Ajouter les donn√©es enrichies si disponibles
            enriched = validation_result.get("enriched_data", {})
            if enriched.get("normalized_email"):
                # Note: Salesforce Account n'a pas de champ Email standard, on l'ajoute en description
                sf_data["Description"] += f" - Email: {enriched['normalized_email']}"
            
            if enriched.get("normalized_website"):
                sf_data["Website"] = enriched["normalized_website"]
            
            # Utiliser les donn√©es SIRET si disponibles (France)
            siret_data = enriched.get("siret_data", {})
            if siret_data:
                sf_data["Description"] += f" - SIRET: {siret_data.get('siret', '')}"
                if siret_data.get("activity_label"):
                    sf_data["Industry"] = siret_data["activity_label"][:40]  # Limiter la taille
            
            # Cr√©er dans Salesforce
            result = await MCPConnector.call_salesforce_mcp("salesforce_create_record", {
                "sobject": "Account",
                "data": sf_data
            })
            
            if result.get("success"):
                # R√©cup√©rer les donn√©es compl√®tes du client cr√©√©
                client_id = result["id"]
                detailed_query = f"""
                SELECT Id, Name, AccountNumber, 
                    BillingStreet, BillingCity, BillingState, BillingPostalCode, BillingCountry,
                    ShippingStreet, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry,
                    Phone, Fax, Website, Industry, AnnualRevenue, NumberOfEmployees,
                    Description, Type, OwnerId, CreatedDate, LastModifiedDate
                FROM Account 
                WHERE Id = '{client_id}'
                """
                
                detailed_result = await MCPConnector.call_salesforce_mcp("salesforce_query", {"query": detailed_query})
                
                if "error" not in detailed_result and detailed_result.get("totalSize", 0) > 0:
                    client_data_complete = detailed_result["records"][0]
                    return {
                        "success": True,
                        "id": client_id,
                        "data": client_data_complete
                    }
                else:
                    return {
                        "success": True,
                        "id": client_id,
                        "data": {"Id": client_id, "Name": sf_data["Name"]}
                    }
            else:
                return {
                    "success": False,
                    "error": result.get("error", "Erreur cr√©ation Salesforce")
                }
                
        except Exception as e:
            logger.exception(f"Erreur cr√©ation client Salesforce valid√©: {str(e)}")
            return {
                "success": False,
                "error": str(e)
            }
    async def apply_client_suggestion(self, suggestion_choice: Dict[str, Any], 
                                    workflow_context: Dict[str, Any]) -> Dict[str, Any]:
        """
        Applique le choix de l'utilisateur pour une suggestion client
        """
        logger.info(f"üéØ Application suggestion client: {suggestion_choice}")
        
        choice_type = suggestion_choice.get("type")  # "use_suggestion", "create_new", "manual_entry"
        
        if choice_type == "use_suggestion":
            # Utiliser la suggestion propos√©e
            suggested_client = suggestion_choice.get("selected_client")
            
            # Reprendre le workflow avec le client sugg√©r√©
            workflow_context["extracted_info"]["client"] = suggested_client["name"]
            return await self.process_prompt(  # ‚úÖ CORRECT
                workflow_context["extracted_info"]["original_prompt"],
                task_id=workflow_context["task_id"]
            )
        
        elif choice_type == "create_new":
            # D√©clencher le processus de cr√©ation client
            return {
                "status": "client_creation_required",
                "message": "Processus de cr√©ation client √† impl√©menter",
                "workflow_context": workflow_context
            }
        
        else:
            return self._build_error_response("Choix non support√©", f"Type de choix '{choice_type}' non reconnu")

    async def apply_product_suggestions(self, product_choices: List[Dict[str, Any]], 
                                    workflow_context: Dict[str, Any]) -> Dict[str, Any]:
        """
        Applique les choix de l'utilisateur pour les suggestions produits
        """
        logger.info(f"üéØ Application suggestions produits: {len(product_choices)} choix")
        
        # Reconstituer la liste des produits avec les choix utilisateur
        final_products = []
        for choice in product_choices:
            if choice.get("type") == "use_suggestion":
                suggested_product = choice.get("selected_product")
                final_products.append({
                    "code": suggested_product["code"],
                    "quantity": choice.get("quantity", 1)
                })
            # Ajouter d'autres types de choix selon les besoins
        
        # Reprendre le workflow avec les produits corrig√©s
        workflow_context["extracted_info"]["products"] = final_products
        return await self.process_prompt(
            workflow_context["extracted_info"]["original_prompt"],
            task_id=workflow_context["task_id"]
        )
 
    async def _create_sap_client_from_validation(self, client_data: Dict[str, Any], salesforce_client: Dict[str, Any]) -> Dict[str, Any]:
        """Cr√©e un client dans SAP avec les donn√©es valid√©es"""
        try:
            logger.info("Cr√©ation client SAP avec donn√©es valid√©es")
            
            # Utiliser le code client sugg√©r√© par le validateur ou g√©n√©rer un nouveau
            enriched = client_data.get("enriched_data", {})
            card_code = enriched.get("suggested_client_code")
            
            if not card_code:
                # G√©n√©rer un CardCode de secours
                import re
                import time
                clean_name = re.sub(r'[^a-zA-Z0-9]', '', client_data["company_name"])[:8]
                timestamp = str(int(time.time()))[-4:]
                card_code = f"C{clean_name}{timestamp}".upper()[:15]
            
            # Pr√©parer les donn√©es SAP
            sap_data = {
                "CardCode": card_code,
                "CardName": client_data["company_name"],
                "CardType": "cCustomer",
                "GroupCode": 100,
                "Currency": "EUR",
                "Valid": "tYES",
                "Frozen": "tNO",
                "Notes": "Client cr√©√© automatiquement via NOVA avec validation",
                "FederalTaxID": salesforce_client.get("id", "")[:32]  # R√©f√©rence crois√©e
            }
            
            # Ajouter les donn√©es SIRET si disponibles
            siret_data = enriched.get("siret_data", {})
            if siret_data:
                sap_data["Notes"] += f" - SIRET: {siret_data.get('siret', '')}"
            
            # Cr√©er dans SAP
            result = await MCPConnector.call_sap_mcp("sap_create_customer_complete", {
                "customer_data": sap_data
            })
            
            if result.get("success"):
                logger.info(f"‚úÖ Client SAP cr√©√© avec validation: {card_code}")
                return {
                    "success": True,
                    "created": True,
                    "data": {"CardCode": card_code, "CardName": client_data["company_name"]},
                    "validation_used": True
                }
            else:
                logger.warning(f"‚ùå Erreur cr√©ation client SAP valid√©: {result.get('error')}")
                return {
                    "success": False,
                    "error": result.get("error", "Erreur cr√©ation SAP"),
                    "validation_used": True
                }
                
        except Exception as e:
            logger.exception(f"Erreur cr√©ation client SAP valid√©: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "validation_used": True
            }
        
    async def _find_product_in_salesforce(self, product_code: str) -> Optional[str]:
        """Trouve l'ID Salesforce correspondant au code produit SAP - RESTAUR√âE"""
        try:
            query = f"SELECT Id, Name, ProductCode FROM Product2 WHERE ProductCode = '{product_code}' LIMIT 1"
            result = await MCPConnector.call_salesforce_mcp("salesforce_query", {"query": query})
            
            if "error" not in result and result.get("totalSize", 0) > 0:
                return result["records"][0]["Id"]
            
            logger.info(f"Produit {product_code} non trouv√© dans Salesforce")
            return None
            
        except Exception as e:
            logger.warning(f"Erreur recherche produit Salesforce {product_code}: {str(e)}")
            return None
        
    async def _prepare_quote_data(self) -> Dict[str, Any]:
        """Pr√©pare les donn√©es du devis"""
        # Pr√©parer les donn√©es pour la cr√©ation du devis
        client_info = self.context.get("client_info", {})
        products_info = self.context.get("products_info", [])
        
        # R√©cup√©rer les d√©tails du client
        client_data = client_info.get("data", {})
        
        # Pr√©parer les lignes de devis
        quote_lines = []
        
        for product in products_info:
            if isinstance(product, dict) and "error" not in product:
                quote_lines.append({
                    "product_id": product.get("id"),
                    "quantity": product.get("quantity", 1),
                    "unit_price": product.get("unit_price", 0)
                })
        
        return {
            "client": {
                "id": client_data.get("Id"),
                "name": client_data.get("Name"),
                "account_number": client_data.get("AccountNumber")
            },
            "quote_lines": quote_lines,
            "total_amount": sum(line["quantity"] * line["unit_price"] for line in quote_lines),
            "draft_mode": self.draft_mode
        }

    async def create_quote_with_confirmation(self, confirmed: bool = False) -> Dict[str, Any]:
        """
        Cr√©e le devis apr√®s confirmation de l'utilisateur

        Args:
            confirmed: True si l'utilisateur a confirm√© la cr√©ation du devis

        Returns:
            R√©ponse format√©e avec les d√©tails du devis cr√©√©
        """
        logger.info(f"Traitement de la confirmation utilisateur, confirm√©={confirmed}")

        if not confirmed:
            return {
                "status": "cancelled",
                "message": "Cr√©ation du devis annul√©e"
            }

        # R√©cup√©rer le contexte pour poursuivre le workflow
        client_info = self.context.get("client_info", {})
        products_info = self.context.get("products_info", [])

        if not client_info or not products_info:
            logger.error("Contexte incomplet pour finaliser le devis")
            return {
                "status": "error",
                "message": "Donn√©es insuffisantes pour cr√©er le devis"
            }

        # üÜï ENRICHISSEMENT CLIENT
        client_name = client_info.get("data", {}).get("Name", "")
        if client_name and not client_info.get("enriched"):
            logger.info("üîç Enrichissement informations client avant cr√©ation devis")
            try:
                company_info = await self._search_company_info(client_name)
                if company_info.get("found"):
                    client_info["enriched_data"] = company_info
                    client_info["enriched"] = True
                    self.context["client_info"] = client_info
                    logger.info(f"‚úÖ Client enrichi avec SIREN: {company_info.get('siren', 'N/A')}")
            except Exception as e:
                logger.warning(f"Enrichissement client √©chou√©: {str(e)}")

        # üÜï RECHERCHE ALTERNATIVES PRODUITS
        enhanced_products = []
        for i, product in enumerate(products_info):
            if product.get("error") or not product.get("found"):
                product_name = product.get("original_name", product.get("name", ""))
                if product_name:
                    logger.info(f"üîç Recherche alternatives pour produit: {product_name}")
                    try:
                        alternatives = await self._find_similar_products(product_name)
                        if alternatives:
                            return {
                                "status": "user_interaction_required",
                                "interaction_type": "product_selection",
                                "message": f"Alternatives trouv√©es pour '{product_name}'",
                                "product_index": i,
                                "alternatives": alternatives,
                                "context": {
                                    "client_info": client_info,
                                    "products_info": products_info,
                                    "confirmed": confirmed
                                }
                            }
                    except Exception as e:
                        logger.warning(f"Recherche alternatives √©chou√©e: {str(e)}")
            enhanced_products.append(product)

        self.context["products_info"] = enhanced_products

        # ===== Poursuivre avec la cr√©ation du devis =====
        logger.info("Confirmation approuv√©e, poursuite de la cr√©ation du devis")
        self._track_step_start("prepare_quote", "Cr√©ation du devis apr√®s confirmation...")

        # Cr√©er le devis dans Salesforce et SAP
        quote_result = await self._create_quote_in_salesforce()
        self.context["quote_result"] = quote_result

        if not quote_result.get("success"):
            self._track_step_fail("create_quote", quote_result.get("error", "Erreur inconnue"),
                                "Impossible de cr√©er le devis confirm√©")
            return {
                "status": "error",
                "message": f"Erreur lors de la cr√©ation du devis: {quote_result.get('error', 'Erreur inconnue')}"
            }

        self._track_step_complete("prepare_quote", "Devis cr√©√© avec succ√®s")

        # üßæ R√©ponse enrichie
        response = {
            "status": "success",
            "message": "Devis cr√©√© avec succ√®s",
            "quote_data": quote_result.get("quote_data", {}),
            "client_enrichment": client_info.get("enriched_data"),
            "alternatives_used": any(p.get("alternative_selected") for p in enhanced_products)
        }

        # üîÅ Finalisation (restaur√©e)
        if self.current_task and self.task_id:
            progress_tracker.complete_task(self.task_id, response)

        return response

        
    async def _check_sap_client_by_name(self, client_name: str, salesforce_client: Dict[str, Any] = None) -> Dict[str, Any]:
        """V√©rifie si le client existe dans SAP par son nom
        
        Args:
            client_name: Nom du client √† rechercher
            salesforce_client: Donn√©es du client Salesforce pour cr√©ation SAP si n√©cessaire
        """
        try:
            # V√©rifier si le client existe dans SAP par nom
            client_search = await MCPConnector.call_sap_mcp("sap_search", {
                "query": client_name,
                "entity_type": "BusinessPartners",
                "limit": 1
            })
            
            if "error" not in client_search and client_search.get("count", 0) > 0:
                # Client trouv√©
                sap_client = client_search.get("results", [])[0]
                logger.info(f"Client SAP existant trouv√©: {sap_client.get('CardCode')} - {sap_client.get('CardName')}")
                return {"created": False, "data": sap_client}
            
            # Client non trouv√©, le cr√©er avec TOUTES les donn√©es Salesforce si disponibles
            logger.info("Client non trouv√© dans SAP, cr√©ation avec donn√©es compl√®tes...")
            
            # V√©rifier que nous avons les donn√©es Salesforce
            sf_client = salesforce_client or {}
            client_id = sf_client.get("Id", "")
            
            # G√©n√©rer un CardCode unique
            import re
            import time
            
            # Nettoyer le nom pour le CardCode
            clean_name = re.sub(r'[^a-zA-Z0-9]', '', client_name)[:8]
            timestamp = str(int(time.time()))[-4:]
            card_code = f"C{clean_name}{timestamp}".upper()[:15]
            
            # Pr√©parer les donn√©es compl√®tes pour SAP
            sap_client_data = {
                "CardCode": card_code,
                "CardName": client_name,
                "CardType": "cCustomer",
                "GroupCode": 100,
                
                # Adresse de facturation
                "BillToStreet": sf_client.get("BillingStreet", "")[:254] if sf_client.get("BillingStreet") else "",
                "BillToCity": sf_client.get("BillingCity", "")[:100] if sf_client.get("BillingCity") else "",
                "BillToState": sf_client.get("BillingState", "")[:100] if sf_client.get("BillingState") else "",
                "BillToZipCode": sf_client.get("BillingPostalCode", "")[:20] if sf_client.get("BillingPostalCode") else "",
                "BillToCountry": sf_client.get("BillingCountry", "")[:3] if sf_client.get("BillingCountry") else "",
                
                # Adresse de livraison
                "ShipToStreet": sf_client.get("ShippingStreet") or sf_client.get("BillingStreet", ""),
                "ShipToCity": sf_client.get("ShippingCity") or sf_client.get("BillingCity", ""),
                "ShipToState": sf_client.get("ShippingState") or sf_client.get("BillingState", ""),
                "ShipToZipCode": sf_client.get("ShippingPostalCode") or sf_client.get("BillingPostalCode", ""),
                "ShipToCountry": sf_client.get("ShippingCountry") or sf_client.get("BillingCountry", ""),
                
                # Informations de contact
                "Phone1": sf_client.get("Phone", "")[:20] if sf_client.get("Phone") else "",
                "Fax": sf_client.get("Fax", "")[:20] if sf_client.get("Fax") else "",
                "Website": sf_client.get("Website", "")[:100] if sf_client.get("Website") else "",
                
                # Informations m√©tier
                "Industry": sf_client.get("Industry", "")[:30] if sf_client.get("Industry") else "",
                "Notes": sf_client.get("Description", "")[:254] if sf_client.get("Description") else "",
                
                # R√©f√©rence crois√©e Salesforce
                "FederalTaxID": client_id[:32] if client_id else "",
                
                # Param√®tres par d√©faut
                "Currency": "EUR",
                "Valid": "tYES",
                "Frozen": "tNO"
            }
            
            logger.info(f"Cr√©ation client SAP avec donn√©es: {json.dumps(sap_client_data, indent=2)}")
            
            # Utiliser la nouvelle m√©thode MCP pour cr√©er le client
            create_result = await MCPConnector.call_sap_mcp("sap_create_customer_complete", {
                "customer_data": sap_client_data
            })
            
            if not create_result.get("success", False):
                logger.error(f"Erreur cr√©ation client SAP: {create_result.get('error', 'Erreur inconnue')}")
                return {"created": False, "error": create_result.get('error', 'Erreur inconnue')}
            
            logger.info(f"‚úÖ Client SAP cr√©√© avec succ√®s: {card_code}")
            return {"created": True, "data": create_result.get("data", {"CardCode": card_code, "CardName": client_name})}
            
        except Exception as e:
            logger.exception(f"Erreur cr√©ation client SAP: {str(e)}")
            return {"created": False, "error": str(e)}
    
    async def _create_quote_in_salesforce(self, client_info: Dict = None, products_info: List[Dict] = None,
                                     quote_data: Optional[Dict] = None) -> Dict[str, Any]:
        """Cr√©e un devis dans Salesforce"""
        # CORRECTION: D√©finir valid_products au d√©but
        valid_products = []
        salesforce_quote = None
        try:
            """Cr√©e un devis dans Salesforce"""
            # CORRECTION: Utiliser les param√®tres fournis si disponibles, sinon r√©cup√©rer du contexte
            if not client_info:
                client_info = self.context.get("client_info", {})
            if not products_info:
                products_info = self.context.get("products_info", [])
            # NOUVELLE V√âRIFICATION : S'assurer que client_info n'est pas None
            if client_info is None:
                logger.error("‚ùå client_info est None, impossible de cr√©er le devis")
                return {
                    "success": False,
                    "error": "Informations client manquantes pour cr√©er le devis"
                }

            logger.info("=== D√âBUT CR√âATION DEVIS SAP ET SALESFORCE ===")

            # R√©cup√©ration des donn√©es du contexte
            # Utiliser client_info d√©j√† d√©fini au lieu de le red√©finir
            sap_client = self.context.get("sap_client", {})

            # Log du contexte disponible
            logger.info(f"Client info disponible: {bool(client_info.get('found'))}")
            logger.info(f"Produits disponibles: {len(products_info)}")
            logger.info(f"Client SAP disponible: {bool(sap_client.get('data'))}")

            try:
                # ========== √âTAPE 1: PR√âPARATION DES DONN√âES DE BASE ==========

                # R√©cup√©rer les donn√©es client Salesforce - maintenant garanti d'√™tre un dictionnaire
                sf_client_data = client_info.get("data") if client_info else None
                # CORRECTION: V√©rifier aussi dans validated_client et selected_client
                if sf_client_data is None and not self.context.get("validated_client") and not self.context.get("selected_client"):
                    # Tenter de reconstituer depuis le contexte du workflow
                    if hasattr(self, 'current_task') and self.current_task:
                        if hasattr(self.current_task, 'context'):
                            task_context = self.current_task.context
                            if task_context.get("client_info", {}).get("data"):
                                sf_client_data = task_context["client_info"]["data"]
                                client_info = task_context["client_info"]
                                self.context["client_info"] = client_info
                                logger.info("‚úÖ Client r√©cup√©r√© depuis le contexte de la t√¢che")
                # NOUVELLE V√âRIFICATION : Si sf_client_data est toujours None, essayer de le r√©cup√©rer autrement
                if sf_client_data is None:
                    logger.warning("‚ö†Ô∏è sf_client_data est None, tentative de r√©cup√©ration depuis le contexte")
                    # Essayer diff√©rentes sources possibles
                    if self.context.get("validated_client"):
                        sf_client_data = self.context["validated_client"]
                        logger.info("‚úÖ Client r√©cup√©r√© depuis validated_client")
                    elif self.context.get("selected_client"):
                        sf_client_data = self.context["selected_client"]
                        logger.info("‚úÖ Client r√©cup√©r√© depuis selected_client")
                    else:
                        # En dernier recours, chercher dans les t√¢ches
                        from services.progress_tracker import progress_tracker
                        task = progress_tracker.get_task(self.task_id) if self.task_id else None
                        if task and hasattr(task, 'context') and task.context.get("client_data"):
                            sf_client_data = task.context["client_data"]
                            logger.info("‚úÖ Client r√©cup√©r√© depuis la t√¢che")
                        else:
                            logger.error("‚ùå Impossible de r√©cup√©rer les donn√©es client depuis aucune source")
                            return {
                                "success": False,
                                "error": "Donn√©es client introuvables dans le contexte - veuillez relancer le processus"
                            }

                client_name = sf_client_data.get("Name", "Client Unknown") if sf_client_data else "Client Unknown"
                client_id = sf_client_data.get("Id", "") if sf_client_data else ""

                logger.info(f"Client Salesforce: {client_name} (ID: {client_id})")
                # V√©rifier si le client a un code SAP dans ses donn√©es
                # CORRECTION: V√©rifier dans plusieurs emplacements possibles

                client_sap_code = (
                    client_info.get("data", {}).get("sap_code")
                    or client_info.get("sap_code")
                    or self.context.get("client_sap_code")
                    or (client_info.get("data", {}).get("details", {}) or {}).get("sap_code")
                )
                if client_sap_code:
                    logger.info(f"Client SAP trouv√© dans les donn√©es: {client_sap_code}")
                else:
                    logger.info("Client SAP non trouv√©, cr√©ation n√©cessaire...")
                # Cr√©er le client SAP si n√©cessaire
                logger.info("=== CR√âATION/V√âRIFICATION CLIENT SAP ===")
                sap_card_code = client_sap_code  # Initialisation explicite

                if not sap_client or not sap_client.get("data"):
                    if sap_card_code:
                        logger.info(f"‚úÖ [SAP] Client existant utilis√©: {sap_card_code}")
                        self.context["sap_client"] = {
                            "data": {"CardCode": sap_card_code},
                            "created": False
                        }
                        sap_client = self.context["sap_client"]
                        logger.info(f"‚úÖ [SAP] Client configur√©: {sap_card_code}")
                    else:
                        logger.info("‚ö†Ô∏è [SAP] Client non trouv√©, cr√©ation n√©cessaire...")
                        sap_client_result = await self._create_sap_client_if_needed(client_info)
                        if sap_client_result.get("success") and sap_client_result.get("client"):
                            self.context["sap_client"] = {
                                "data": sap_client_result["client"],
                                "created": True
                            }
                            sap_client = self.context["sap_client"]
                            logger.info(f"‚úÖ [SAP] Client disponible: {sap_client_result['client'].get('CardCode')}")
                else:
                    logger.info(f"‚úÖ [SAP] Client d√©j√† disponible dans le contexte")

                
                # V√©rifier que nous avons un client SAP
                sap_card_code = None
                if sap_client.get("data") and sap_client["data"].get("CardCode"):
                    sap_card_code = sap_client["data"]["CardCode"]
                    logger.info(f"Client SAP confirm√©: {sap_card_code}")
                else:
                    logger.error("‚ùå AUCUN CLIENT SAP DISPONIBLE")
                    return {
                        "success": False,
                        "error": "Client SAP non disponible pour cr√©er le devis"
                    }
                
                # ========== √âTAPE 2: PR√âPARATION DES PRODUITS ==========
                logger.info("=== PR√âPARATION DES LIGNES PRODUITS ===")
                
                # S√©parer les produits trouv√©s des produits personnalis√©s
                found_products = [p for p in products_info if isinstance(p, dict) and p.get("found", False)]
                custom_products = [p for p in products_info if isinstance(p, dict) and p.get("custom_product", False)]
                
                # Traiter TOUS les produits pour s'assurer d'avoir des prix
                all_products = found_products + custom_products
                for product in all_products:
                    unit_price = product.get("unit_price", 0)

                    # Si prix = 0, essayer de r√©cup√©rer depuis sap_data
                    if unit_price == 0 and product.get("sap_data"):
                        sap_price = product["sap_data"].get("AvgPrice", 0)
                        if sap_price > 0:
                            unit_price = sap_price
                            product["unit_price"] = unit_price
                            product["total_price"] = unit_price * product.get("quantity", 1)
                            logger.info(f"Prix SAP utilis√© pour {product.get('name')}: {sap_price}‚Ç¨")
                            continue

                    # Si toujours pas de prix, utiliser l'estimation
                    if unit_price == 0:
                        logger.warning(f"‚ö†Ô∏è Produit sans prix d√©tect√©: {product.get('name')} - Utilisation estimation")
                        default_price = self._estimate_product_price(product.get("name", ""))
                        product["unit_price"] = default_price
                        product["Price"] = default_price  # AJOUT: D√©finir aussi le champ Price pour la validation
                        product["total_price"] = default_price * product.get("quantity", 1)
                        logger.info(f"Prix estim√© pour {product['name']}: {default_price}‚Ç¨")

                # Combiner tous les produits
                valid_products = all_products
                
                if not valid_products:
                    logger.error("‚ùå AUCUN PRODUIT VALIDE - Impossible de cr√©er un devis")
                    return {
                        "success": False,
                        "error": "Aucun produit valide disponible pour cr√©er le devis. Veuillez s√©lectionner des produits du catalogue.",
                        "requires_product_selection": True
                    }
                logger.info(f"Produits valides: {len(valid_products)}")
                
                # Pr√©parer les lignes pour SAP
                document_lines = []
                total_amount = 0.0
                
                for idx, product in enumerate(valid_products):
                    quantity = float(product.get("quantity", 1))
                    unit_price = float(product.get("unit_price", 0))
                    line_total = quantity * unit_price
                    total_amount += line_total
                    
                    line = {
                        "ItemCode": product.get("code") or f"UNKNOWN-{idx}",
                        "Quantity": quantity,
                        "Price": unit_price,
                        "DiscountPercent": 0.0,
                        "TaxCode": "S1",
                        "LineNum": idx
                    }
                    document_lines.append(line)
                    
                    logger.info(f"Ligne {idx}: {product.get('code')} x{quantity} = {line_total}‚Ç¨")
                
                logger.info(f"Total calcul√©: {total_amount}‚Ç¨")

                # ========== √âTAPE 3: PR√âPARATION DES DONN√âES DEVIS SAP ==========
                
                logger.info("=== PR√âPARATION DONN√âES DEVIS SAP ===")
                if not sap_card_code:
                    logger.error("‚ùå CardCode SAP manquant")
                    return {"success": False, "error": "Code client SAP requis"}
                if not document_lines:
                    logger.error("‚ùå Aucune ligne de produit")
                    return {"success": False, "error": "Au moins un produit requis"}
                # Pr√©parer les dates
                today = datetime.now()
                doc_date = today.strftime("%Y-%m-%d")
                due_date = (today + timedelta(days=30)).strftime("%Y-%m-%d")
                
                # Pr√©parer les donn√©es compl√®tes du devis SAP
                quotation_data = {
                    "CardCode": sap_card_code,
                    "DocDate": doc_date,
                    "DocDueDate": due_date,
                    "DocCurrency": "EUR",
                    "Comments": f"Devis cr√©√© automatiquement via NOVA le {today.strftime('%d/%m/%Y %H:%M')} - Mode: {'DRAFT' if self.draft_mode else 'NORMAL'}",
                    "SalesPersonCode": -1,
                    "DocumentLines": document_lines,
                    "DocTotal": total_amount,
                    "VatSum": 0.0,
                    "DiscountPercent": 0.0
                }
                
                # Ajouter des champs sp√©cifiques au mode Draft si n√©cessaire
                if self.draft_mode:
                    quotation_data["Comments"] = f"[BROUILLON] {quotation_data['Comments']}"
                    quotation_data["Remarks"] = "Devis en mode brouillon - Non valid√©"
                
                logger.info("Donn√©es devis SAP pr√©par√©es:")
                logger.info(f"  - Client: {sap_card_code}")
                logger.info(f"  - Lignes: {len(document_lines)}")
                logger.info(f"  - Total: {total_amount}‚Ç¨")
                logger.info(f"  - Mode: {'DRAFT' if self.draft_mode else 'NORMAL'}")
                
                # ========== √âTAPE 4: APPEL SAP ==========
                
                logger.info("=== APPEL SAP POUR CR√âATION DEVIS ===")
                logger.info("Donn√©es compl√®tes envoy√©es √† SAP:")
                logger.info(json.dumps(quotation_data, indent=2, ensure_ascii=False))
                
                sap_quote = None
                
                try:
                    # Choisir la m√©thode SAP selon le mode
                    if self.draft_mode:
                        logger.info("Appel SAP en mode DRAFT...")
                        sap_quote = await MCPConnector.call_sap_mcp("sap_create_quotation_draft", {
                            "quotation_data": quotation_data
                        })
                    else:
                        logger.info("Appel SAP en mode NORMAL...")
                        # Validation finale des prix avant envoi √† SAP
                        # V√©rifier que quote_data contient DocumentLines avant d'it√©rer
                        if not quote_data or not isinstance(quote_data, dict):
                            logger.error("‚ùå quote_data invalide pour Salesforce")
                            return {
                                "success": False,
                                "error": "Donn√©es de devis invalides pour Salesforce"
                            }

                        document_lines = quote_data.get("DocumentLines", [])
                        if not document_lines:
                            logger.warning("‚ö†Ô∏è Aucune ligne de document dans quote_data")
                            return {
                                "success": False,
                                "error": "Aucune ligne de produit √† synchroniser avec Salesforce"
                            }
                            # Traitement des lignes existant
                        for line in document_lines:
                            if line.get("Price", 0) == 0:
                                estimated = self._estimate_product_price(line.get("ItemDescription", ""))
                                line["Price"] = estimated
                                logger.warning(f"‚ö†Ô∏è Prix 0 d√©tect√© pour {line.get('ItemCode')} - Application prix estim√©: {estimated}‚Ç¨")

                        logger.info("Appel SAP en mode NORMAL...")
                        sap_quote = await MCPConnector.call_sap_mcp("sap_create_quotation_complete", {
                            "quotation_data": quotation_data
                        })
                    
                    logger.info("=== R√âSULTAT APPEL SAP ===")
                    # V√©rification et traitement du r√©sultat SAP
                    if sap_quote is None:
                        logger.error("‚ùå SAP a retourn√© None!")
                        return {
                            "success": False,
                            "error": "L'appel SAP a retourn√© None",
                            "sap_attempted": True,
                            "salesforce_attempted": False
                        }

                    if isinstance(sap_quote, dict) and "error" in sap_quote:
                        logger.error(f"‚ùå Erreur SAP: {sap_quote.get('error')}")
                        return {
                            "success": False,
                            "error": f"Erreur SAP: {sap_quote.get('error')}",
                            "sap_attempted": True,
                            "salesforce_attempted": False
                        }

                    if not isinstance(sap_quote, dict):
                        logger.error(f"‚ùå SAP a retourn√© un type invalide: {type(sap_quote)}")
                        return {
                            "success": False,
                            "error": f"Type de r√©ponse SAP invalide: {type(sap_quote)}",
                            "sap_attempted": True,
                            "salesforce_attempted": False
                        }
                    logger.info(f"Type retourn√©: {type(sap_quote)}")
                    logger.info(f"Contenu: {sap_quote}")
                    
                    # V√©rifier le r√©sultat SAP
                    if sap_quote is None:
                        logger.error("‚ùå SAP a retourn√© None!")
                        sap_quote = {"success": False, "error": "SAP a retourn√© None - probl√®me de communication"}
                    elif not isinstance(sap_quote, dict):
                        logger.error(f"‚ùå SAP a retourn√© un type inattendu: {type(sap_quote)}")
                        sap_quote = {"success": False, "error": f"Type de retour SAP inattendu: {type(sap_quote)}"}
                    elif not sap_quote.get("success", False):
                        logger.error(f"‚ùå SAP a signal√© un √©chec: {sap_quote.get('error', 'Erreur non sp√©cifi√©e')}")
                    else:
                        logger.info(f"‚úÖ Devis SAP cr√©√© avec succ√®s: DocNum {sap_quote.get('doc_num')}")
                        # Notification WebSocket du succ√®s
                        await websocket_manager.send_task_update(self.task_id, {
                            "type": "quote_created",
                            "status": "success",
                            "quote_data": {
                                "sap_doc_num": sap_quote.get("doc_num"),
                                "sf_opportunity_id": salesforce_quote.get("id") if salesforce_quote else None,
                                "total": total_amount if total_amount > 0 else 0
                            }
                        })
                except Exception as e:
                    logger.exception(f"‚ùå EXCEPTION lors de l'appel SAP: {str(e)}")
                    sap_quote = {"success": False, "error": f"Exception lors de l'appel SAP: {str(e)}"}
                
                # ========== √âTAPE 5: CR√âATION SALESFORCE ==========
                
                # Donn√©es minimales pour √©viter erreurs de validation
                opportunity_data = {
                    'Name': f'NOVA-{today.strftime("%Y%m%d-%H%M%S")}',
                    'StageName': 'Prospecting',  # √âtape standard qui existe toujours
                    'CloseDate': due_date,
                    'Type': 'New Customer'
                }
                
                # Ajouter AccountId seulement si client valide
                if client_id and client_id != "":
                    opportunity_data['AccountId'] = client_id
                else:
                    # Cr√©er avec compte g√©n√©rique ou utiliser un compte par d√©faut
                    logger.warning("‚ö†Ô∏è Pas de client Salesforce - cr√©ation avec compte g√©n√©rique")
                    # Utiliser un compte par d√©faut ou cr√©er l'opportunit√© sans compte
                    pass
                
                # Ajouter montant seulement si positif
                if total_amount > 0:
                    opportunity_data['Amount'] = total_amount
                
                # Ajouter description avec gestion d'erreurs
                try:
                    # CORRECTION: D√©finir sap_ref correctement
                    sap_ref = ""
                    if sap_quote and sap_quote.get('doc_num'):
                        sap_ref = f" (SAP DocNum: {sap_quote.get('doc_num')})"
                    
                    opportunity_data['Description'] = f'Devis g√©n√©r√© automatiquement via NOVA{sap_ref} - Mode: {"Brouillon" if self.draft_mode else "D√©finitif"}'
                    opportunity_data['LeadSource'] = 'NOVA Middleware'
                    opportunity_data['Probability'] = 50 if not self.draft_mode else 25
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur ajout m√©tadonn√©es: {e}")
                
                logger.info("Cr√©ation opportunit√© Salesforce...")
                logger.info(f"Donn√©es: {json.dumps(opportunity_data, indent=2, ensure_ascii=False)}")
                
                salesforce_quote = None
                
                try:
                    # Utiliser try/catch sp√©cifique pour Salesforce
                    opportunity_result = await MCPConnector.call_salesforce_mcp("salesforce_create_record", {
                        "sobject": "Opportunity",
                        "data": opportunity_data
                    })
                    
                    logger.info(f"üìä R√©sultat brut Salesforce: {opportunity_result}")
                    
                    # Validation robuste du r√©sultat
                    if opportunity_result is None:
                        raise Exception("Salesforce a retourn√© None")
                    
                    if not isinstance(opportunity_result, dict):
                        raise Exception(f"Salesforce a retourn√© un type inattendu: {type(opportunity_result)}")
                    
                    # V√©rifier succ√®s avec plusieurs crit√®res
                    success_indicators = [
                        opportunity_result.get("success") is True,
                        "id" in opportunity_result and opportunity_result["id"],
                        "error" not in opportunity_result
                    ]
                    
                    if any(success_indicators) and opportunity_result.get("id"):
                        opportunity_id = opportunity_result.get("id")
                        logger.info(f"‚úÖ Opportunit√© Salesforce cr√©√©e: {opportunity_id}")
                        
                        salesforce_quote = {
                            "success": True,
                            "id": opportunity_id,
                            "opportunity_id": opportunity_id,
                            "lines_created": len(document_lines),
                            "total_amount": total_amount,
                            "message": f"Opportunit√© Salesforce cr√©√©e avec succ√®s: {opportunity_id}"
                        }
                    else:
                        # Analyser l'erreur sp√©cifique
                        error_msg = opportunity_result.get("error", "Erreur Salesforce non sp√©cifi√©e")
                        logger.error(f"‚ùå Erreur cr√©ation opportunit√© Salesforce: {error_msg}")
                        
                        salesforce_quote = {
                            "success": False,
                            "error": error_msg,
                            "raw_response": opportunity_result,
                            "attempted_data": opportunity_data
                        }
                            
                except Exception as e:
                    logger.exception(f"‚ùå EXCEPTION lors de la cr√©ation Salesforce: {str(e)}")
                    salesforce_quote = {
                        "success": False,
                        "error": f"Exception Salesforce: {str(e)}",
                        "exception_type": type(e).__name__
                    }
                
                # ========== √âTAPE 6: CONSTRUCTION DE LA R√âPONSE ==========
                
                logger.info("=== CONSTRUCTION R√âPONSE FINALE ===")
                
                # D√©terminer le succ√®s global
                sap_success = sap_quote and sap_quote.get("success", False)
                sf_success = salesforce_quote and salesforce_quote.get("success", False)
                
                # Pour le POC, on consid√®re que le succ√®s = au moins SAP OU Salesforce
                overall_success = sap_success or sf_success
                
                # Construire la r√©ponse finale
                result = {
                    "success": overall_success,
                    "quote_id": f"SAP-{sap_quote.get('doc_num', 'FAILED')}" if sap_success else f"SF-{salesforce_quote.get('id', 'FAILED')}" if sf_success else f"FAILED-{today.strftime('%Y%m%d-%H%M%S')}",
                    "sap_doc_entry": sap_quote.get("doc_entry") if sap_success else None,
                    "sap_doc_num": sap_quote.get("doc_num") if sap_success else None,
                    "salesforce_quote_id": salesforce_quote.get("id") if sf_success else None,
                    "opportunity_id": salesforce_quote.get("id") if sf_success else None,
                    "status": "Created" if overall_success else "Failed",
                    "total_amount": total_amount,
                    "currency": "EUR",
                    "draft_mode": self.draft_mode,
                    "sap_results": sap_quote,
                    "salesforce_result": salesforce_quote,
                    "creation_details": {
                        "sap_success": sap_success,
                        "salesforce_success": sf_success,
                        "client_code": sap_card_code,
                        "lines_count": len(document_lines),
                        "creation_timestamp": today.isoformat()
                    }
                }
                
                # Message de statut
                if overall_success:
                    messages = []
                    if sap_success:
                        messages.append(f"SAP DocNum: {sap_quote.get('doc_num')}")
                    if sf_success:
                        messages.append(f"Salesforce ID: {salesforce_quote.get('id')}")
                    result["message"] = f"Devis cr√©√© avec succ√®s - {', '.join(messages)}"
                else:
                    errors = []
                    if not sap_success:
                        errors.append(f"SAP: {sap_quote.get('error', 'Erreur inconnue') if sap_quote else 'Aucune r√©ponse'}")
                    if not sf_success:
                        errors.append(f"Salesforce: {salesforce_quote.get('error', 'Erreur inconnue') if salesforce_quote else 'Aucune r√©ponse'}")
                    result["message"] = f"√âchec cr√©ation devis - {'; '.join(errors)}"
                    result["error"] = result["message"]
                
                logger.info("=== CR√âATION DEVIS TERMIN√âE ===")
                # Envoyer le r√©sultat final via WebSocket
                await self._send_final_quote_result({
                    "success": overall_success,
                    "quote_id": result["quote_id"],
                    "sap_doc_num": sap_quote.get('doc_num') if sap_success else None,
                    "salesforce_opportunity_id": salesforce_quote.get('id') if sf_success else None,
                    "client": client_name,
                    "products": valid_products,
                    "total_amount": total_amount,
                    "message": result["message"]
                    })
                
                logger.info(f"Succ√®s global: {overall_success}")
                logger.info(f"SAP: {'‚úÖ' if sap_success else '‚ùå'}")
                logger.info(f"Salesforce: {'‚úÖ' if sf_success else '‚ùå'}")
                logger.info(f"Quote ID: {result['quote_id']}")
                
                return result
                
            except Exception as e:
                logger.exception(f"‚ùå ERREUR CRITIQUE dans _create_quote_in_salesforce: {str(e)}")
                return {
                    "success": False,
                    "error": f"Erreur critique lors de la cr√©ation du devis: {str(e)}",
                    "quote_id": f"ERROR-{datetime.now().strftime('%Y%m%d-%H%M%S')}",
                    "status": "Failed",
                    "draft_mode": self.draft_mode,
                    "creation_details": {
                        "error_type": "critical_exception",
                        "error_timestamp": datetime.now().isoformat()
                    }
                }
            except asyncio.CancelledError:
                logger.warning("‚ö†Ô∏è Cr√©ation devis interrompue par l'utilisateur")
                return {"success": False, "error": "Op√©ration interrompue", "cancelled": True}
        except Exception as e:
                logger.exception(f"‚ùå ERREUR CRITIQUE dans _create_quote_in_salesforce: {str(e)}")
        
    def _estimate_product_price(self, product_name: str) -> float:
        """Estime un prix par d√©faut bas√© sur le nom du produit"""
        if not product_name:
            return 100.0
        product_lower = product_name.lower()

        # R√®gles d'estimation am√©lior√©es
        if "imprimante" in product_lower or "printer" in product_lower:
            if any(word in product_lower for word in ["laser", "professional", "pro", "bureau"]):
                return 450.0
            elif "couleur" in product_lower or "color" in product_lower:
                return 320.0
            else:
                return 180.0
        elif any(word in product_lower for word in ["ordinateur", "pc", "computer", "desktop"]):
            if "portable" in product_lower or "laptop" in product_lower:
                return 950.0
            else:
                return 750.0
        elif any(word in product_lower for word in ["√©cran", "moniteur", "screen", "monitor"]):
            if "4k" in product_lower or "uhd" in product_lower:
                return 380.0
            else:
                return 220.0
        elif any(word in product_lower for word in ["serveur", "server"]):
            return 2500.0
        elif any(word in product_lower for word in ["switch", "routeur", "router", "r√©seau"]):
            return 180.0
        elif any(word in product_lower for word in ["clavier", "keyboard", "souris", "mouse"]):
            return 45.0
        else:
            # Prix par d√©faut bas√© sur des mots-cl√©s g√©n√©riques
            if "enterprise" in product_lower or "professionnel" in product_lower:
                return 250.0
            else:
                return 120.0
            
    async def _create_sap_client_if_needed(self, client_info):
        """Cr√©e un client SAP si n√©cessaire (robuste, sch√©ma de retour stable)"""
        import logging
        from datetime import datetime
        logger = logging.getLogger(__name__)

        # Helpers
        def _has_method(obj, name: str) -> bool:
            return hasattr(obj, name) and callable(getattr(obj, name))

        async def _sap_call_search(query: str):
            payload = {"query": query, "entity_type": "BusinessPartners", "limit": 5}
            if _has_method(self.mcp_connector, "call_sap_mcp"):
                return await self.mcp_connector.call_sap_mcp("sap_search", payload)
            # fallback ancien sch√©ma
            if _has_method(self.mcp_connector, "call_mcp"):
                return await self.mcp_connector.call_mcp("sap_mcp", "sap_search", payload)
            raise RuntimeError("Aucune m√©thode SAP MCP disponible")

        async def _sap_call_create(customer_data: dict):
            if _has_method(self.mcp_connector, "call_sap_mcp"):
                # tenter l‚Äôendpoint complet puis fallback
                try:
                    return await self.mcp_connector.call_sap_mcp(
                        "sap_create_customer_complete", {"customer_data": customer_data}
                    )
                except Exception:
                    return await self.mcp_connector.call_sap_mcp(
                        "sap_create_customer", {"customer_data": customer_data}
                    )
            if _has_method(self.mcp_connector, "call_mcp"):
                # fallback ancien sch√©ma
                try:
                    return await self.mcp_connector.call_mcp(
                        "sap_mcp", "sap_create_customer_complete", {"customer_data": customer_data}
                    )
                except Exception:
                    return await self.mcp_connector.call_mcp(
                        "sap_mcp", "sap_create_customer", {"customer_data": customer_data}
                    )
            raise RuntimeError("Aucune m√©thode SAP MCP disponible")

        try:
            client_data = (client_info or {}).get("data", {})
            client_name = (client_data.get("Name") or "").strip()

            if not client_name:
                return {"success": False, "error": "Nom client manquant"}

            # 1) Recherche existant
            search_result = await _sap_call_search(client_name)
            if isinstance(search_result, dict) and "error" not in search_result:
                candidates = []
                if isinstance(search_result.get("value"), list):
                    candidates = search_result["value"]
                elif isinstance(search_result.get("results"), list):
                    candidates = search_result["results"]
                elif search_result.get("count", 0) > 0 and isinstance(search_result.get("results"), list):
                    candidates = search_result["results"]

                if candidates:
                    found = candidates[0]
                    logger.info("‚úÖ Client SAP trouv√©: %s - %s",
                                found.get("CardCode"), found.get("CardName"))
                    return {"success": True, "client": found, "created": False}

            # 2) Cr√©ation
            # CardCode <= 15, unique √† la seconde: "C" + YYMMDDHHMMSS + 2 digits ¬µs
            card_code = f"C{datetime.now():%y%m%d%H%M%S}{datetime.now():%f}"[:15]

            customer_data = {
                "CardCode": card_code,
                "CardName": client_name,
                "CardType": "cCustomer",
                "Currency": "EUR",
            }
            # Conserver GroupCode si pr√©sent c√¥t√© v1
            if "GroupCode" in client_data:
                customer_data["GroupCode"] = client_data["GroupCode"]
            else:
                # valeur raisonnable si besoin de groupe
                customer_data["GroupCode"] = 100

            create_result = await _sap_call_create(customer_data)
            if isinstance(create_result, dict) and create_result.get("success"):
                logger.info("‚úÖ Client SAP cr√©√©: %s", card_code)
                return {
                    "success": True,
                    "client": {"CardCode": card_code, "CardName": client_name},
                    "created": True,
                }

            err = (create_result or {}).get("error", "Erreur inconnue")
            logger.error("‚ùå √âchec cr√©ation client SAP: %s", err)
            return {"success": False, "error": err}

        except Exception as e:
            logger.error("‚ùå Exception cr√©ation client SAP: %s", e)
            return {"success": False, "error": str(e)}

    
    async def _create_salesforce_quote(self, quote_data: Dict[str, Any], sap_quote: Optional[Dict[str, Any]]) -> Dict[str, Any]:
        """Cr√©e R√âELLEMENT le devis dans Salesforce avec tous les d√©tails"""
        try:
            logger.info("=== CR√âATION R√âELLE DU DEVIS DANS SALESFORCE ===")
            
            # R√©f√©rence SAP si disponible
            sap_ref = f" (SAP DocNum: {sap_quote.get('doc_num')})" if sap_quote and sap_quote.get('doc_num') else ""
            
            # 1. Pr√©parer les donn√©es de l'opportunit√© (devis)
            opportunity_data = {
                'Name': f'NOVA-{datetime.now().strftime("%Y%m%d-%H%M%S")}',
                'AccountId': quote_data.get("client", {}).get("id", ""),
                'StageName': 'Proposal/Price Quote',
                'CloseDate': (datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d'),
                'Amount': quote_data.get("total_amount", 0),
                'Description': f'Devis g√©n√©r√© automatiquement via NOVA Middleware{sap_ref}',
                'LeadSource': 'NOVA Middleware',
                'Type': 'New Customer',
                'Probability': 50
            }
            
            logger.info(f"Donn√©es opportunit√© pr√©par√©es: {json.dumps(opportunity_data, indent=2)}")
            
            # 2. Cr√©er l'opportunit√©
            opportunity_result = await MCPConnector.call_salesforce_mcp("salesforce_create_record", {
                "sobject": "Opportunity",
                "data": opportunity_data
            })
            
            if "error" in opportunity_result or not opportunity_result.get("success"):
                logger.error(f"‚ùå Erreur cr√©ation opportunit√©: {opportunity_result.get('error', 'Erreur inconnue')}")
                return {"success": False, "error": opportunity_result.get("error", "√âchec cr√©ation opportunit√©")}
            
            opportunity_id = opportunity_result.get("id")
            logger.info(f"‚úÖ Opportunit√© cr√©√©e dans Salesforce: {opportunity_id}")
            
            # Retourner un r√©sultat simplifi√© pour le POC
            result = {
                "success": True,
                "id": opportunity_id,
                "opportunity_id": opportunity_id,
                "lines_created": len(quote_data.get("quote_lines", [])),
                "total_amount": quote_data.get("total_amount", 0),
                "message": f"Opportunit√© Salesforce cr√©√©e avec succ√®s: {opportunity_id}"
            }
            
            logger.info("=== DEVIS SALESFORCE CR√â√â AVEC SUCC√àS ===")
            return result
            
        except Exception as e:
            logger.exception(f"‚ùå Erreur critique lors de la cr√©ation du devis Salesforce: {str(e)}")
            return {
                "success": False, 
                "error": str(e),
                "message": "Erreur lors de la cr√©ation du devis dans Salesforce"
            }
    
    def _get_stock_value(self, product: Dict[str, Any]) -> float:  # ‚Üê BON
        """Extrait la valeur du stock, qu'il soit un float ou un dict"""
        stock = product.get("stock", 0)
        
        # Si c'est d√©j√† un float/int, le retourner directement
        if isinstance(stock, (int, float)):
            return float(stock)
        
        # Si c'est un dictionnaire, chercher 'total'
        if isinstance(stock, dict):
            return float(stock.get("total", 0))
        
        # Fallback
        return 0.0
    
    def _get_stock_safely(self, product: Dict[str, Any]) -> float:
        """
        Extrait la valeur du stock de mani√®re robuste
        G√®re les cas o√π stock est un float OU un dictionnaire
        """
        stock = product.get("stock", 0)
        
        # Cas 1: stock est d√©j√† un nombre (float/int)
        if isinstance(stock, (int, float)):
            return float(stock)
        
        # Cas 2: stock est un dictionnaire avec 'total'
        if isinstance(stock, dict):
            return float(stock.get("total", 0))
            
        # Cas 3: fallback
        return 0.0
        
    def _build_response(self) -> Dict[str, Any]:
        """üîß Construit la r√©ponse finale avec nom client correct (compat + optimisations l√©g√®res)"""
        logger.info("Construction de la r√©ponse finale enrichie")
        client_info = self.context.get("client_info", {}) or {}
        quote_result = self.context.get("quote_result", {}) or {}
        sap_client = self.context.get("sap_client", {}) or {}
        client_validation = self.context.get("client_validation", {}) or {}
        products_info = self.context.get("products_info", []) or []
        extracted_info = self.context.get("extracted_info", {}) or {}
        validated_data = self.context.get("validated_data", {}) or {}

        # Erreurs bloquantes en amont
        if not client_info.get("found", False):
            return {
                "success": False,
                "status": "error",
                "message": f"Client non trouv√©: {client_info.get('error', 'Erreur inconnue')}",
                "error": client_info.get('error', 'Client non trouv√©'),
                "next_steps": "Veuillez v√©rifier le nom du client et r√©essayer."
            }
        if not quote_result.get("success", False):
            return {
                "success": False,
                "status": "error",
                "message": f"√âchec de la cr√©ation du devis: {quote_result.get('error', 'Erreur inconnue')}",
                "error": quote_result.get('error', 'Erreur cr√©ation devis'),
                "next_steps": "Veuillez contacter le support technique."
            }

        # Extraction robuste du nom client
        client_name = "Client extrait"
        if self.context.get("client_info", {}).get("data", {}).get("Name"):
            client_name = self.context.get("client_info", {}).get("data", {}).get("Name", "")
            logger.info(f"‚úÖ Nom client depuis context Salesforce: {client_name}")
        elif self.context.get("client_info", {}).get("data", {}).get("CardName"):
            sap_name = self.context.get("client_info", {}).get("data", {}).get("CardName", "")
            client_name = sap_name.split(" - ", 1)[1].strip() if " - " in sap_name else sap_name
            logger.info(f"‚úÖ Nom client depuis context SAP (nettoy√©): {client_name}")
        elif self.context.get("extracted_info", {}).get("client"):
            client_name = self.context["extracted_info"]["client"]
            logger.info(f"‚úÖ Nom client depuis extraction LLM: {client_name}")
        elif extracted_info.get("client"):
            client_name = extracted_info["client"]
            logger.info(f"‚úÖ Nom client depuis extraction LLM: {client_name}")
        elif quote_result.get("sap_results", {}).get("raw_result", {}).get("CardName"):
            client_name = quote_result["sap_results"]["raw_result"]["CardName"]
            logger.info(f"‚úÖ Nom client depuis SAP raw result: {client_name}")
        logger.info(f"üéØ Nom client final pour interface: '{client_name}'")

        # Donn√©es client (compat + address structur√©e + fallback SAP)
        vcli = validated_data.get("client", {}) or {}
        cdata = client_info.get("data", {}) or {}
        account_number = (
            vcli.get("AccountNumber")
            or cdata.get("AccountNumber")
            or (sap_client.get("data", {}) or {}).get("CardCode")
            or ""
        )
        salesforce_id = vcli.get("Id") or cdata.get("Id") or ""
        client_response = {
            "name": client_name,
            "id": vcli.get("Id", salesforce_id),
            "salesforce_id": salesforce_id,
            "account_number": account_number,
            "address": {
                "street": vcli.get("BillingStreet") or cdata.get("BillingStreet"),
                "city": vcli.get("BillingCity") or cdata.get("BillingCity"),
                "postal_code": vcli.get("BillingPostalCode") or cdata.get("BillingPostalCode"),
                "country": vcli.get("BillingCountry") or cdata.get("BillingCountry"),
            },
            "email": vcli.get("Email") or cdata.get("Email"),
            "city": vcli.get("BillingCity") or cdata.get("BillingCity"),
            "country": vcli.get("BillingCountry") or cdata.get("BillingCountry"),
            "phone": vcli.get("Phone") or cdata.get("Phone"),
            "industry": (vcli.get("details", {}) or {}).get("industry"),
        }

        # Produits (fallback: validated_data.products puis products_info, en filtrant les erreurs)
        source_products = (validated_data.get("products") or []) or products_info
        products_response = []
        for product in source_products:
            if not isinstance(product, dict) or ("error" in product):
                continue
            product_code = product.get("code") or product.get("item_code") or product.get("ItemCode")
            product_name = product.get("name") or product.get("item_name") or product.get("ItemName")
            # coercition s√ªre
            try:
                quantity = float(product.get("quantity", 1) or 1)
            except (TypeError, ValueError):
                quantity = 1.0
            try:
                unit_price = float(product.get("unit_price", product.get("UnitPrice", 0)) or 0)
            except (TypeError, ValueError):
                unit_price = 0.0
            line_total = quantity * unit_price

            product_data = {
                "code": product_code or "",
                "name": product_name or "Sans nom",
                "quantity": quantity,
                "unit_price": unit_price,
                "line_total": line_total,
                "stock_available": self._get_stock_value(product),
                "available": self._get_stock_safely(product) >= quantity,
                "description": product.get("U_Description", ""),
                "manufacturer": product.get("Manufacturer", ""),
                "sales_unit": product.get("SalesUnit", "UN")
            }
            products_response.append(product_data)
            logger.info(f"‚úÖ Produit format√© dans r√©ponse: {product_data['code']} x{quantity} = {line_total}‚Ç¨")

        total_amount = round(sum(float(p.get("line_total", 0) or 0) for p in products_response), 2)
        all_available = all(bool(p.get("available", False)) for p in products_response)

        # Quote ID hybride: priorit√© SAP, puis SF, puis NOVA-TS
        quote_id = (
            (f"SAP-{quote_result.get('sap_doc_num')}" if quote_result.get('sap_doc_num') else None)
            or (f"SAP-{quote_result.get('doc_num')}" if quote_result.get('doc_num') else None)
            or quote_result.get("opportunity_id")
            or f"NOVA-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
        )

        # R√©ponse
        response = {
            "success": True,
            "status": "success",
            "quote_id": quote_id,
            "client": client_response,
            "products": products_response,
            "total_amount": total_amount,
            "currency": "EUR",
            "date": datetime.now().strftime("%Y-%m-%d"),
            "quote_status": "Created",
            "all_products_available": all_available,
            "sap_doc_num": quote_result.get("sap_doc_num"),
            "salesforce_quote_id": quote_result.get("opportunity_id"),
            "message": f"Devis g√©n√©r√© avec succ√®s pour {client_name}",
            "draft_mode": self.draft_mode
        }

        # Validation client
        if client_validation:
            response["client_validation"] = {
                "validation_used": True,
                "country": client_validation.get("country", "Unknown"),
                "validation_level": client_validation.get("validation_level", "basic"),
                "warnings": client_validation.get("warnings", []),
                "suggestions": client_validation.get("suggestions", []),
                "enriched_data": client_validation.get("enriched_data", {}),
                "duplicate_check": client_validation.get("duplicate_check", {})
            }
        else:
            response["client_validation"] = {
                "validation_used": False,
                "reason": "Client existant trouv√© dans Salesforce"
            }

        # Doublons devis
        duplicate_check = self.context.get("duplicate_check", {}) or {}
        if duplicate_check:
            response["duplicate_check"] = {
                "duplicates_found": duplicate_check.get("duplicates_found", False),
                "warnings_count": len(duplicate_check.get("warnings", [])),
                "suggestions_count": len(duplicate_check.get("suggestions", [])),
                "recent_quotes": len(duplicate_check.get("recent_quotes", [])),
                "draft_quotes": len(duplicate_check.get("draft_quotes", [])),
                "similar_quotes": len(duplicate_check.get("similar_quotes", [])),
                "details": duplicate_check
            }

        # R√©f√©rences syst√®me
        response["system_references"] = {
            "sap_client_created": sap_client.get("created", False) if sap_client else False,
            "sap_client_card_code": (sap_client.get("data", {}) or {}).get("CardCode") if sap_client else None,
            "quote_creation_timestamp": datetime.now().isoformat(),
            "validation_enabled": self.validation_enabled
        }

        logger.info(f"‚úÖ R√©ponse finale enrichie construite avec nom client: {client_name}")
        response["workflow_steps"] = self.workflow_steps

        # Visualisation
        if quote_result.get("success") and response.get("success"):
            response["quote_visualization"] = {
                "display_mode": "detailed",
                "document_data": {
                    "quote_number": response.get("quote_id", (
                        "SAP-" + (quote_result.get('sap_doc_num') or quote_result.get('doc_num') or 'DRAFT')
                    )),
                    "issue_date": datetime.now().strftime("%d/%m/%Y"),
                    "due_date": (datetime.now() + timedelta(days=30)).strftime("%d/%m/%Y"),
                    "validity": "30 jours",
                    "client_info": client_response,
                    "products_list": products_response,
                    "totals": {
                        "subtotal_ht": total_amount,
                        "tva_rate": 20.0,
                        "tva_amount": round(total_amount * 0.2, 2),
                        "total_ttc": round(total_amount * 1.2, 2)
                    },
                    "terms": "Devis valable 30 jours - Paiement √† 30 jours",
                    "created_by": "NOVA Assistant",
                    "company_info": {
                        "name": "IT SPIRIT",
                        "address": "39, rue Carnot - 92100 BOULOGNE BILLANCOURT",
                        "phone": "01 41 86 06 12",
                        "website": "www.it-spirit.fr"
                    }
                },
                "template": "nova_interface_final",
                "actions": [
                    {"id": "download_pdf", "label": "T√©l√©charger PDF", "icon": "download"},
                    {"id": "send_email", "label": "Envoyer par email", "icon": "mail"},
                    {"id": "create_new", "label": "Nouveau devis", "icon": "plus"}
                ]
            }

        return response

    
    # ‚úÖ M√âTHODE D'AIDE - Ajouter aussi cette m√©thode pour enrichir les donn√©es client
    def _enrich_client_data(self, client_name: str, salesforce_data: Dict[str, Any]) -> None:
        """Enrichit les donn√©es client dans le contexte"""
        self.enriched_client_name = client_name
        
        # Enrichir le contexte avec le nom correct
        if "client_info" not in self.context:
            self.context["client_info"] = {}
        
        if "data" not in self.context["client_info"]:
            self.context["client_info"]["data"] = {}
        
        # S'assurer que le nom est bien pr√©sent
        self.context["client_info"]["data"]["Name"] = client_name
        self.context["client_info"]["data"].update(salesforce_data)
        
        logger.info(f"‚úÖ Client enrichi dans le contexte: {client_name}")
    
    async def _validate_client(self, client_name: str) -> Dict[str, Any]:
        """
        Valide le client avec suggestions intelligentes
        """
        logger.info(f"üîç RECHERCHE CLIENT R√âEL: {client_name}")

        try:
            # === RECHERCHE CLASSIQUE (code existant) ===
            query = f"SELECT Id, Name, AccountNumber, AnnualRevenue, LastActivityDate FROM Account WHERE Name LIKE '%{client_name}%' LIMIT 10"
            logger.debug(f"üìù Requ√™te Salesforce: {query}")

            sf_result = await self.mcp_connector.call_salesforce_mcp("salesforce_query", {"query": query})

            logger.info(f"üìä R√âSULTAT SALESFORCE BRUT: {json.dumps(sf_result, indent=2, ensure_ascii=False)}")

            # Client trouv√© directement
            if sf_result.get("totalSize", 0) > 0 and sf_result.get("records"):
                client_record = sf_result["records"][0]
                logger.debug(f"üìã ENREGISTREMENT CLIENT TROUV√â: {json.dumps(client_record, indent=2)}")

                self._enrich_client_data(client_record.get("Name", client_name), client_record)
                logger.info(f"‚úÖ Client trouv√© directement: {client_record.get('Name')} (ID: {client_record.get('Id')})")
                logger.debug(f"üîç D√©tails client: AccountNumber={client_record.get('AccountNumber')}, Revenue={client_record.get('AnnualRevenue')}")
                return {"found": True, "data": client_record}
            
            # === NOUVEAU : RECHERCHE INTELLIGENTE ===
            logger.info("üß† Client non trouv√©, activation du moteur de suggestions...")

            # R√©cup√©rer tous les clients pour la recherche floue
            all_clients_query = "SELECT Id, Name, AccountNumber, AnnualRevenue, LastActivityDate FROM Account LIMIT 1000"
            logger.debug(f"üìù Requ√™te tous clients: {all_clients_query}")

            all_clients_result = await self.mcp_connector.call_salesforce_mcp("salesforce_query", {"query": all_clients_query})
            logger.debug(f"üìä R√âSULTAT TOUS CLIENTS: {json.dumps(all_clients_result, indent=2, ensure_ascii=False)}")

            available_clients = all_clients_result.get("records", []) if all_clients_result.get("totalSize", 0) > 0 else []
            logger.info(f"üîç {len(available_clients)} clients disponibles pour analyse")
            
            # G√©n√©rer les suggestions
            self.client_suggestions = await self.suggestion_engine.suggest_client(client_name, available_clients)
            logger.debug(f"üîç SUGGESTIONS G√âN√âR√âES: {json.dumps(self.client_suggestions.to_dict(), indent=2)}")

            if self.client_suggestions.has_suggestions:
                primary_suggestion = self.client_suggestions.primary_suggestion

                # Si confiance √©lev√©e, proposer auto-correction
                if primary_suggestion.confidence.value == "high":
                    logger.info(f"üéØ Suggestion haute confiance: {primary_suggestion.suggested_value} (score: {primary_suggestion.score})")
                    logger.debug(f"üîç D√©tails suggestion: {primary_suggestion.details}")
                    
                    # Retourner avec suggestion pour que l'utilisateur puisse choisir
                    return {
                        "found": False, 
                        "suggestions": self.client_suggestions.to_dict(),
                        "auto_suggest": True,
                        "message": f"Client '{client_name}' non trouv√©. Je sugg√®re '{primary_suggestion.suggested_value}' (similarit√©: {primary_suggestion.score}%)"
                    }
                else:
                    # Confiance moyenne/faible, pr√©senter les options
                    logger.info(f"ü§î Multiple suggestions trouv√©es pour: {client_name}")
                    return {
                        "found": False,
                        "suggestions": self.client_suggestions.to_dict(),
                        "auto_suggest": False,
                        "message": self.client_suggestions.conversation_prompt
                    }
            else:
                # === AUCUN CLIENT TROUV√â - SUGGESTIONS ===
                # Aucune suggestion, proposer cr√©ation
                logger.info(f"‚ùå Aucune suggestion trouv√©e pour: {client_name}")
                # üÜï TENTATIVE DE CR√âATION AUTOMATIQUE
                creation_result = await self._create_client_automatically(client_name)

                if creation_result.get("created"):
                    logger.info(f"‚úÖ Client '{client_name}' cr√©√© automatiquement !")
                    return {
                        "found": True,
                        "data": creation_result.get("client_data"),
                        "source": "auto_created",
                        "message": creation_result.get("message"),
                        "auto_created": True
                    }

                logger.warning(f"‚ö†Ô∏è Cr√©ation automatique √©chou√©e: {creation_result.get('error')}")
                return {
                    "found": False,
                    "suggestions": None,
                    "message": f"Client '{client_name}' non trouv√©. Voulez-vous cr√©er un nouveau client ?"
                }
                
        except Exception as e:
            logger.exception(f"Erreur validation client avec suggestions: {str(e)}")
            return {"found": False, "error": str(e)}
    
    async def _check_duplicate_quotes(self, client_info: Dict[str, Any], products: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        V√©rifie s'il existe d√©j√† des devis similaires pour √©viter les doublons
        
        Args:
            client_info: Informations du client valid√©
            products: Liste des produits demand√©s
            
        Returns:
            Dict avec statut de v√©rification et actions sugg√©r√©es
        """
        logger.info("üîç V√©rification des doublons de devis...")
        
        duplicate_check = {
            "duplicates_found": False,
            "recent_quotes": [],
            "similar_quotes": [],
            "draft_quotes": [],
            "action_required": False,
            "suggestions": [],
            "warnings": []
        }
        
        try:
            # R√©cup√©rer les identifiants client
            client_name = client_info.get("data", {}).get("Name", "")
            
            if not client_name:
                logger.warning("Aucun nom client pour v√©rification doublons")
                return duplicate_check
            
            # 1. V√©rifier les devis SAP r√©cents (derni√®res 48h)
            recent_quotes = await self._get_recent_sap_quotes(client_name, hours=48)
            
            # 2. V√©rifier les devis brouillons existants
            draft_quotes = await self._get_client_draft_quotes(client_name)
            
            # 3. Analyser la similarit√© des produits
            similar_quotes = await self._find_similar_product_quotes(client_name, products)
            
            # Populate results
            duplicate_check["recent_quotes"] = recent_quotes
            duplicate_check["draft_quotes"] = draft_quotes  
            duplicate_check["similar_quotes"] = similar_quotes
            
            # Analyser les r√©sultats
            total_findings = len(recent_quotes) + len(draft_quotes) + len(similar_quotes)
            
            if total_findings > 0:
                duplicate_check["duplicates_found"] = True
                duplicate_check["action_required"] = True

                # Messages d'alerte
                if recent_quotes:
                    duplicate_check["warnings"].append(f"‚ö†Ô∏è {len(recent_quotes)} devis r√©cent(s) trouv√©(s) pour {client_name}")

                if draft_quotes:
                    duplicate_check["warnings"].append(f"üìù {len(draft_quotes)} devis en brouillon pour {client_name}")
                    duplicate_check["suggestions"].append("üí° Consid√©rez consolider avec les brouillons existants")

                if similar_quotes:
                    duplicate_check["warnings"].append(f"üîÑ {len(similar_quotes)} devis avec produits similaires")
                    duplicate_check["suggestions"].append("üí° V√©rifiez s'il s'agit d'une mise √† jour ou d'un nouveau besoin")

                # Cr√©er le message d'alerte personnalis√© et demander d√©cision utilisateur
                if duplicate_check.get("duplicates_found"):
                    alert_message = f"‚ö†Ô∏è ATTENTION: Devis existants d√©tect√©s pour {client_name}"

                    if recent_quotes:
                        alert_message += f"\nüìã {len(recent_quotes)} devis r√©cent(s) d'imprimantes"
                    if draft_quotes:
                        alert_message += f"\n‚úèÔ∏è {len(draft_quotes)} devis en brouillon"
                    if similar_quotes:
                        alert_message += f"\nüîÑ {len(similar_quotes)} devis avec produits similaires"

                    duplicate_check["alert_message"] = alert_message
                    duplicate_check["requires_user_decision"] = True

                    logger.warning(f"‚ö†Ô∏è {len(duplicate_check.get('warnings', []))} doublons d√©tect√©s")

                    return duplicate_check
            
            else:
                duplicate_check["suggestions"].append("‚úÖ Aucun doublon d√©tect√© - Cr√©ation s√©curis√©e")
                
            logger.info(f"V√©rification doublons termin√©e: {total_findings} potentiel(s) doublon(s)")
            return duplicate_check
            
        except Exception as e:
            logger.exception(f"Erreur v√©rification doublons devis: {str(e)}")
            duplicate_check["warnings"].append(f"‚ùå Erreur v√©rification doublons: {str(e)}")
            return duplicate_check

    async def _get_recent_sap_quotes(self, client_name: str, hours: int = 48) -> List[Dict[str, Any]]:
        """R√©cup√®re les devis SAP r√©cents pour un client"""
        try:
            
            # Calculer la date limite
            cutoff_date = datetime.now() - timedelta(hours=hours)
            cutoff_str = cutoff_date.strftime("%Y-%m-%d")
            
            # Rechercher dans SAP avec filtre date et client
            
            result = await MCPConnector.call_sap_mcp("sap_search_quotes", {
                "client_name": client_name,
                "date_from": cutoff_str,
                "limit": 10
            })
            
            if result.get("success") and result.get("quotes"):
                return result["quotes"]
            
            return []
            
        except Exception as e:
            logger.warning(f"Erreur recherche devis r√©cents: {str(e)}")
            return []

    async def _get_client_draft_quotes(self, client_name: str) -> List[Dict[str, Any]]:
        """R√©cup√®re les devis en brouillon pour un client"""
        try:
            
            # R√©cup√©rer tous les brouillons
            draft_result = await sap_list_draft_quotes()
            
            if not draft_result.get("success"):
                return []
            
            # Filtrer par nom client
            client_drafts = [
                quote for quote in draft_result.get("draft_quotes", [])
                if quote.get("card_name", "").lower() == client_name.lower()
            ]
            
            return client_drafts
            
        except Exception as e:
            logger.warning(f"Erreur recherche brouillons client: {str(e)}")
            return []

    async def _find_similar_product_quotes(self, client_name: str, requested_products: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Trouve les devis avec des produits similaires"""
        try:
            # Pour l'instant, impl√©mentation simplifi√©e
            # TODO: Logique avanc√©e de comparaison produits
            
            # Extraire les codes et noms produits demand√©s pour comparaison
            requested_codes = set()
            requested_names = set()

            for product in requested_products:
                if product.get("code"):
                    requested_codes.add(product.get("code", "").upper())
                if product.get("name"):
                    # Rechercher par mots-cl√©s dans le nom (ex: "imprimante")
                    name_keywords = product.get("name", "").lower().split()
                    requested_names.update(name_keywords)

            logger.info(f"Recherche produits similaires pour {client_name}: codes={requested_codes}, mots-cl√©s={requested_names}")

            # Rechercher dans les devis r√©cents du client (ex: 7 jours)
            recent_quotes = await self._get_recent_sap_quotes(client_name, hours=168)
            similar_quotes = []

            for quote in recent_quotes:
                quote_has_similar = False
                matching_products = []
                # Analyser les lignes du devis pour d√©tecter les produits similaires
                for line in quote.get("DocumentLines", []):
                    item_code = line.get("ItemCode", "").upper()
                    item_name = line.get("ItemDescription", "").lower()

                    # V√©rification par code exact
                    if item_code and item_code in requested_codes:
                        quote_has_similar = True
                        matching_products.append(line.get("ItemDescription"))
                        # On continue pour collecter d'√©ventuels autres produits correspondants
                        continue

                    # V√©rification par mots-cl√©s dans le nom
                    for keyword in requested_names:
                        if len(keyword) > 3 and keyword in item_name:  # √âviter les mots trop courts
                            quote_has_similar = True
                            matching_products.append(line.get("ItemDescription"))
                            break

                if quote_has_similar:
                    similar_quotes.append({
                        "doc_entry": quote.get("DocEntry"),
                        "doc_num": quote.get("DocNum"),
                        "doc_date": quote.get("DocDate"),
                        "total": quote.get("DocTotal"),
                        "status": quote.get("DocumentStatus"),
                        "matching_products": matching_products
                    })

            return similar_quotes

        except Exception as e:
            logger.warning(f"Erreur recherche produits similaires: {str(e)}")
            return []
        
    async def _get_products_info(self, products: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        R√©cup√®re UNIQUEMENT les informations techniques des produits depuis SAP
        Le calcul des prix est d√©l√©gu√© au Price Engine
        """
        if not products:
            logger.warning("Aucun produit sp√©cifi√©")
            return []
            
        logger.info(f"üîç RECHERCHE PRODUITS (sans calcul prix): {products}")
        enriched_products = []

        for product in products:
            try:
                product_code = product.get("code", "")
                product_name = product.get("name", "")
                
                # PROBL√àME ICI : Si product_code est vide, on ne fait rien
                if product_code:
                    # Recherche par code exact (existant)
                    product_details = await MCPConnector.call_sap_mcp("sap_get_product_details", {
                        "item_code": product_code
                    })
                elif product_name:
                    # NOUVELLE LOGIQUE : Recherche par nom
                    logger.info(f"üîç Produit sans code, recherche par nom: {product_name}")
                    product_details = await self._search_product_by_name_only(product_name)
                else:
                    logger.error(f"‚ùå Produit sans code ni nom: {product}")
                    enriched_products.append({
                        "code": "",
                        "quantity": product.get("quantity", 1),
                        "error": "Produit sans code ni nom"
                    })
                    continue
                
                # Calculer le stock total (logique conserv√©e car technique)
                total_stock = self._extract_stock_from_sap_data(product_details)
                
                # R√©cup√©rer l'ID Salesforce
                salesforce_id = await self._find_product_in_salesforce(product_code)
                
                # ‚úÖ NOUVEAU : Produit enrichi SANS calcul de prix
                enriched_product = {
                "code": product_code,
                "quantity": product.get("quantity", 1),
                "name": product_details.get("ItemName", "Unknown"),
                "stock": total_stock,
                "salesforce_id": salesforce_id,
                "sap_raw_data": product_details,
                "unit_price": None,
                "line_total": None,
                "price_calculated": False
                }
                
                enriched_products.append(enriched_product)
                logger.info(f"‚úÖ Produit enrichi (sans prix): {product['code']} - Stock: {total_stock}")
                
            except Exception as e:
                logger.error(f"Erreur r√©cup√©ration produit {product['code']}: {str(e)}")
                enriched_products.append({
                    "code": product["code"],
                    "quantity": product["quantity"],
                    "error": str(e)
                })
        
        return enriched_products
    async def _find_similar_products(self, product_name: str) -> List[Dict[str, Any]]:
        """
        Trouve des produits similaires bas√©s sur des mots-cl√©s
        """
        if not product_name:
            return []
            
        try:
            # Extraire des mots-cl√©s intelligents
            keywords = self._extract_product_keywords(product_name)
            similar_products = []
            
            for keyword in keywords[:2]:  # Limiter √† 2 mots-cl√©s
                search_result = await self.mcp_connector.call_mcp(
                    "sap_mcp",
                    "sap_search",
                    {
                        "query": keyword,
                        "entity_type": "Items",
                        "limit": 3
                    }
                )
                
                if search_result.get("success") and search_result.get("results"):
                    for product in search_result["results"]:
                        if product not in similar_products:  # √âviter les doublons
                            similar_products.append({
                                "code": product.get("ItemCode"),
                                "name": product.get("ItemName"),
                                "price": float(product.get("AvgPrice", 0)),
                                "description": product.get("U_Description", ""),
                                "matched_keyword": keyword
                            })
            
            logger.info(f"üîç {len(similar_products)} alternatives trouv√©es pour '{product_name}'")
            return similar_products[:5]  # Limiter √† 5 alternatives max
            
        except Exception as e:
            logger.error(f"Erreur recherche alternatives: {str(e)}")
            return []
    async def _search_product_by_name_only(self, product_name: str) -> Dict[str, Any]:
        """
        Recherche un produit SAP par nom uniquement (quand pas de code)
        """
        try:
            logger.info(f"üîç Recherche SAP par nom: {product_name}")
            
            # Utiliser la m√©thode MCP de recherche g√©n√©rale
            search_result = await self.mcp_connector.call_mcp(
                "sap_mcp",
                "sap_search",
                {
                    "query": product_name,
                    "entity_type": "Items",
                    "limit": 10
                }
            )
            
            if search_result.get("success") and search_result.get("results"):
                # CORRECTION: Am√©liorer la s√©lection du meilleur r√©sultat
                results = search_result.get("results", [])
                
                # Trier par score de pertinence si disponible
                if results and "_relevance_score" in results[0]:
                    results.sort(key=lambda x: x.get("_relevance_score", 0), reverse=True)
                
                best_match = results[0]
                
                logger.info(f"‚úÖ Produit trouv√© par nom: {best_match.get('ItemName')} ({best_match.get('ItemCode')}) - Score: {best_match.get('_relevance_score', 'N/A')}")
                
                # Retourner au format attendu par _get_products_info
                return {
                    "ItemCode": best_match.get("ItemCode"),
                    "ItemName": best_match.get("ItemName"),
                    "OnHand": best_match.get("OnHand", 0),
                    "AvgPrice": best_match.get("AvgPrice", 0),
                    "U_Description": best_match.get("U_Description", ""),
                    "found_by": "name_search"
                }
            elif search_result.get("success"):
                # Recherche r√©ussie mais aucun r√©sultat
                logger.warning(f"‚ùå Aucun produit SAP trouv√© pour: {product_name}")
                return {
                    "error": f"Aucun produit trouv√© pour '{product_name}'"
                }
            else:
                # Erreur dans la recherche MCP
                logger.error(f"‚ùå Erreur recherche MCP: {search_result.get('error') if search_result else 'R√©sultat None'}")
                
                # CORRECTION: G√©rer le cas None et ajouter recherche intelligente
                if search_result is None:
                    logger.warning("‚ö†Ô∏è search_result est None, tentative recherche alternative")
                    # Recherche avec termes anglais
                    english_terms = self._get_english_search_terms(product_name)
                    for term in english_terms:
                        logger.info(f"üîç Recherche alternative: {term}")
                        alt_result = await self.mcp_connector.call_mcp(
                            "sap_mcp",
                            "sap_search",
                            {"search_term": term, "search_fields": ["ItemName", "U_Description"], "limit": 5}
                        )
                        if alt_result and alt_result.get("success") and alt_result.get("results"):
                            best_match = alt_result["results"][0]
                            return {
                                "ItemCode": best_match.get("ItemCode"),
                                "ItemName": best_match.get("ItemName"),
                                "OnHand": best_match.get("OnHand", 0),
                                "AvgPrice": best_match.get("AvgPrice", 0),
                                "U_Description": best_match.get("U_Description", ""),
                                "found_by": f"alternative_{term}"
                            }
                return {
                    "error": f"Erreur recherche SAP: {search_result.get('error')}"
                }
                
        except Exception as e:
            logger.exception(f"‚ùå Exception recherche par nom: {str(e)}")
            return {
                "error": f"Erreur syst√®me: {str(e)}"
            }
    def _extract_stock_from_sap_data(self, product_details: Dict) -> float:
        """Extrait le stock total depuis les donn√©es SAP"""
        total_stock = 0.0
        
        if "stock" in product_details and isinstance(product_details["stock"], dict):
            total_stock = float(product_details["stock"].get("total", 0))
        elif "QuantityOnStock" in product_details:
            total_stock = float(product_details.get("QuantityOnStock", 0))
        elif "OnHand" in product_details:
            total_stock = float(product_details.get("OnHand", 0))
        
        return total_stock

    async def _apply_price_engine(self, client_data: Dict, products_data: List[Dict]) -> Dict[str, Any]:
        """Applique le Price Engine pour calculer les prix finaux"""
        try:
            
            price_engine = PriceEngineService()
            
            # Pr√©parer les donn√©es pour le Price Engine
            pricing_request = {
                "client": {
                    "id": client_data.get("Id"),
                    "name": client_data.get("Name"),
                    "account_number": client_data.get("AccountNumber"),
                    "type": client_data.get("Type", "Standard"),
                    "city": client_data.get("BillingCity"),
                    "country": client_data.get("BillingCountry")
                },
                "products": [
                    {
                        "code": p.get("code"),
                        "name": p.get("name"),
                        "quantity": p.get("quantity", 1),
                        "base_price": p.get("sap_data", {}).get("Price", 0),
                        "category": p.get("sap_data", {}).get("ItemsGroupCode"),
                        "sap_data": p.get("sap_data", {})
                    }
                    for p in products_data
                ],
                "conditions": {
                    "draft_mode": self.draft_mode,
                    "timestamp": datetime.now().isoformat()
                }
            }
            
            # Calculer les prix avec le Price Engine
            pricing_result = await price_engine.calculate_pricing(pricing_request)
            
            if pricing_result.get("success"):
                return {
                    "success": True,
                    "updated_products": pricing_result.get("products", []),
                    "total_amount": pricing_result.get("total_amount", 0.0),
                    "pricing_details": pricing_result.get("details", {})
                }
            else:
                logger.error(f"Erreur Price Engine: {pricing_result.get('error')}")
                return {"success": False, "error": pricing_result.get("error")}
                
        except Exception as e:
            logger.error(f"Erreur application Price Engine: {str(e)}")
            return {"success": False, "error": str(e)}
        
    async def _apply_price_calculations(self, products_data: List[Dict], client_data: Dict) -> List[Dict]:
        """
        Applique les calculs de prix via le Price Engine
        """
        try:
            
            logger.info("üí∞ D√©marrage calculs Prix Engine...")
            
            # Pr√©parer les donn√©es pour le Price Engine
            price_engine = PriceEngineService()
            
            pricing_request = {
                "client": {
                    "id": client_data.get("Id"),
                    "name": client_data.get("Name"),
                    "account_number": client_data.get("AccountNumber"),
                    "type": client_data.get("Type", "Standard"),
                    "city": client_data.get("BillingCity"),
                    "country": client_data.get("BillingCountry")
                },
                "products": [
                    {
                        "code": p.get("code"),
                        "name": p.get("name"),
                        "quantity": p.get("quantity", 1),
                        "sap_data": p.get("sap_raw_data", {}),
                        "stock": p.get("stock", 0)
                    }
                    for p in products_data if not p.get("error")
                ],
                "conditions": {
                    "draft_mode": self.draft_mode,
                    "timestamp": datetime.now().isoformat()
                }
            }
            
            # üöÄ APPEL AU PRICE ENGINE
            pricing_result = await price_engine.calculate_pricing(pricing_request)
            
            if not pricing_result.get("success"):
                logger.error(f"‚ùå Erreur Price Engine: {pricing_result.get('error')}")
                raise Exception(pricing_result.get("error", "Erreur Price Engine"))
            
            # Fusionner les r√©sultats du Price Engine avec les donn√©es produits
            priced_products = []
            pricing_products = {p["code"]: p for p in pricing_result.get("products", [])}
            
            for product in products_data:
                if product.get("error"):
                    priced_products.append(product)  # Conserver les erreurs
                    continue
                    
                product_code = product["code"]
                pricing_data = pricing_products.get(product_code, {})
                
                # ‚úÖ Fusionner donn√©es techniques + prix
                priced_product = {
                    **product,  # Donn√©es techniques existantes
                    "unit_price": pricing_data.get("unit_price", 0.0),
                    "line_total": pricing_data.get("line_total", 0.0),
                    "price_calculated": True,
                    "pricing_details": pricing_data.get("details", {}),
                    "discounts": pricing_data.get("discounts", []),
                    "price_engine_version": pricing_result.get("version", "1.0")
                }
                
                priced_products.append(priced_product)
            
            logger.info(f"‚úÖ Price Engine appliqu√© sur {len(priced_products)} produits")
            return priced_products
            
        except Exception as e:
            logger.error(f"‚ùå Erreur application Price Engine: {str(e)}")
            # En cas d'erreur, retourner les produits avec prix par d√©faut
            return self._apply_fallback_pricing(products_data)
        
    async def continue_with_products(self, selected_products: List[Dict[str, Any]]) -> Dict[str, Any]:
        # Initialisation s√©curis√©e du contexte
        if not hasattr(self, 'context') or self.context is None:
            self.context = {}
        """Continue le workflow apr√®s s√©lection de produits par l'utilisateur"""
        try:
            logger.info(f"üîÑ Continuation workflow avec {len(selected_products)} produit(s) s√©lectionn√©(s)")
            
            if not selected_products or not isinstance(selected_products, list):
                return self._build_error_response("Donn√©es invalides", "selected_products doit √™tre une liste non vide")
            
            # R√©cup√©rer le contexte de la t√¢che
            if not self.context:
                logger.warning("‚ö†Ô∏è Contexte manquant, r√©cup√©ration depuis la t√¢che...")
                task = progress_tracker.get_task(self.task_id) if self.task_id else None
                if task and hasattr(task, 'context') and task.context:
                    self.context = task.context
                else:
                    self.context = {}
            
            # Import unique du Price Engine
            price_engine = None
            try:
                from services.price_engine import price_engine
                logger.info("‚úÖ Price Engine disponible")
            except ImportError:
                logger.warning("‚ö†Ô∏è Price Engine non disponible, utilisation des prix de fallback")
            
            # R√©cup√©ration unique du CardCode client pour tous les produits
            client_sap_code = None
            if self.context.get("client_info"):
                client_data = self.context["client_info"].get("data", {})
                client_sap_code = (
                    client_data.get("sap_code") or 
                    self.context.get("selected_client", {}).get("sap_code")
                )
                if client_sap_code:
                    logger.info(f"‚úÖ CardCode client trouv√©: {client_sap_code}")
            
            # Reformater les produits s√©lectionn√©s pour le workflow
            formatted_products = []
            for i, selected_product in enumerate(selected_products):
                # Extraire les donn√©es du produit s√©lectionn√©
                product_data = selected_product.get("product_data") or selected_product.get("data") or selected_product
                quantity = selected_product.get("quantity", selected_product.get("requested_quantity", 1))
                
                # Calcul du prix avec Price Engine si disponible
                unit_price = 0
                if price_engine and client_sap_code and product_data.get("ItemCode"):
                    try:
                        price_result = await price_engine.get_item_price(
                            card_code=client_sap_code,
                            item_code=product_data["ItemCode"], 
                            quantity=quantity
                        )
                        if price_result.get("success"):
                            unit_price = price_result["unit_price_after_discount"]
                            logger.info(f"‚úÖ Prix Price Engine {product_data['ItemCode']}: {unit_price}‚Ç¨")
                        else:
                            logger.warning(f"‚ö†Ô∏è Price Engine √©chec {product_data['ItemCode']}: {price_result.get('error')}")
                    except Exception as pe_error:
                        logger.warning(f"‚ö†Ô∏è Erreur Price Engine {product_data['ItemCode']}: {pe_error}")
                
                # Fallback sur AvgPrice puis estimation
                if unit_price == 0:
                    unit_price = product_data.get("AvgPrice", 0) or product_data.get("unit_price", 0)
                    if unit_price == 0:
                        unit_price = self._estimate_product_price(product_data.get("ItemName", ""))
                        logger.info(f"üí∞ Prix estim√© {product_data.get('ItemName')}: {unit_price}‚Ç¨")
                
                formatted_product = {
                    "code": product_data.get("ItemCode", ""),
                    "name": product_data.get("ItemName", ""),
                    "quantity": quantity,
                    "unit_price": product_data.get("AvgPrice", 0) or product_data.get("unit_price", 0) or self._estimate_product_price(product_data.get("ItemName", "")),
                    "total_price": 0,  # Sera calcul√© apr√®s
                    "currency": "EUR",
                    "stock": product_data.get("OnHand", 0),
                    "description": product_data.get("U_Description", ""),
                    "sap_data": product_data,
                    "search_method": "user_selected",
                    "found": True
                }
                # Recalculer total_price avec le prix final
                formatted_product["total_price"] = formatted_product["unit_price"] * quantity
                formatted_products.append(formatted_product)
                logger.info(f"‚úÖ Produit {i+1}: {formatted_product['name']} x{quantity}")
            
            # Mettre √† jour le contexte avec les produits s√©lectionn√©s
            self.context["products_info"] = formatted_products
            self.context["products_selected"] = True
            
            # Pr√©parer les donn√©es pour _create_quote_document
            client_result = self.context.get("client_info", {})
            products_result = {"products": formatted_products}
            
            # Continuer directement vers la cr√©ation du devis
            self._track_step_complete("lookup_products", f"‚úÖ {len(formatted_products)} produit(s) s√©lectionn√©(s)")
            
            # Cr√©er le devis
            self._track_step_start("create_quote", "üßæ Cr√©ation du devis")
            quote_result = await self._create_quote_document(client_result, products_result)
            
            if not isinstance(quote_result, dict):
                logger.error("‚ùå _create_quote_document a retourn√© un r√©sultat invalide")
                return self._build_error_response("Erreur cr√©ation devis", "R√©sultat invalide")
            
            # Marquer la t√¢che comme termin√©e
            self._track_step_complete("create_quote", "‚úÖ Devis cr√©√©")
            if self.current_task:
                progress_tracker.complete_task(self.task_id, quote_result)
            
            return quote_result
            
        except (AttributeError, KeyError, TypeError, ValueError) as e:
            logger.exception(f"‚ùå Erreur donn√©es continuation workflow: {str(e)}")
            self._track_step_fail("continue_with_products", "Erreur donn√©es", str(e))
            return self._build_error_response("Erreur donn√©es workflow", str(e))
        except ImportError as e:
            logger.exception(f"‚ùå Erreur import continuation workflow: {str(e)}")
            self._track_step_fail("continue_with_products", "Erreur import", str(e))
            return self._build_error_response("Service indisponible", str(e))
        except Exception as e:
            logger.exception(f"‚ùå Erreur inattendue continuation workflow: {str(e)}")
            self._track_step_fail("continue_with_products", "Erreur inattendue", str(e))
            return self._build_error_response("Erreur syst√®me", str(e))
        
    def _apply_fallback_pricing(self, products_data: List[Dict]) -> List[Dict]:
        """Prix de secours si le Price Engine √©choue"""
        logger.warning("‚ö†Ô∏è Application des prix de secours...")
        
        for product in products_data:
            if not product.get("error") and product.get("unit_price") is None:
                # Prix de secours bas√© sur les donn√©es SAP brutes
                sap_data = product.get("sap_raw_data", {})
                fallback_price = self._extract_fallback_price_from_sap(sap_data)
                
                product.update({
                    "unit_price": fallback_price,
                    "line_total": product["quantity"] * fallback_price,
                    "price_calculated": True,
                    "pricing_method": "fallback"
                })
        
        return products_data

    def _extract_fallback_price_from_sap(self, sap_data: Dict) -> float:
        """Extrait un prix de secours depuis les donn√©es SAP"""
        # V√©rifier d'abord les donn√©es de prix structur√©es
        if isinstance(sap_data, dict):
            # Prix depuis Price Engine si disponible
            if "price_details" in sap_data and sap_data["price_details"].get("price_engine"):
                pe = sap_data["price_details"]["price_engine"]
                price = float(pe.get("unit_price_after_discount", 0.0))
                if price > 0:
                    return price
            
            # Prix direct SAP
            if sap_data.get("Price") is not None and float(sap_data.get("Price", 0)) > 0:
                return float(sap_data.get("Price"))
            
            # Prix de liste SAP
            if sap_data.get("AvgPrice") is not None and float(sap_data.get("AvgPrice", 0)) > 0:
                return float(sap_data.get("AvgPrice"))
            
            # Prix dans ItemPrices
            if "ItemPrices" in sap_data and len(sap_data["ItemPrices"]) > 0:
                for price_entry in sap_data["ItemPrices"]:
                    price = float(price_entry.get("Price", 0.0))
                    if price > 0:
                        return price
            
            # Prix de dernier achat
            if sap_data.get("LastPurchasePrice") is not None and float(sap_data.get("LastPurchasePrice", 0)) > 0:
                return float(sap_data.get("LastPurchasePrice"))
        
        # Si aucun prix trouv√©, utiliser estimation par nom de produit
        product_name = sap_data.get("ItemName", "") if isinstance(sap_data, dict) else ""
        return self._estimate_product_price(product_name)

    def _get_standard_system_prompt(self) -> str:
        """Retourne le prompt syst√®me standard pour l'extraction"""
        return """Tu es un assistant sp√©cialis√© dans l'extraction d'informations de devis.
        Extrait les informations client, produits et quantit√©s de la demande utilisateur.
        Retourne un JSON structur√© avec les champs: client_info, products, special_requirements."""

    def _get_robust_system_prompt(self) -> str:
        """Retourne le prompt syst√®me robuste avec fallbacks"""
        return """Tu es un assistant expert en extraction d'informations de devis.
        Extrait toutes les informations disponibles m√™me si incompl√®tes.
        Utilise des valeurs par d√©faut raisonnables pour les champs manquants.
        Retourne un JSON structur√© avec validation et suggestions."""

    def _get_minimal_system_prompt(self) -> str:
        """Retourne le prompt syst√®me minimal pour extraction rapide"""
        return """Extrait rapidement: nom client, produits demand√©s, quantit√©s.
        Format JSON simple uniquement."""
        
    async def _extract_info_unified(self, prompt: str, 
                                extraction_mode: str = "standard") -> Dict[str, Any]:
        """
        M√©thode d'extraction LLM unifi√©e
        
        Args:
            prompt: Demande utilisateur
            extraction_mode: Mode d'extraction (standard, robust, minimal)
        
        Returns:
            Informations extraites
        """
        system_prompts = {
            "standard": self._get_standard_system_prompt(),
            "robust": self._get_robust_system_prompt(),
            "minimal": self._get_minimal_system_prompt()
        }
        
        system_prompt = system_prompts.get(extraction_mode, system_prompts["standard"])
        
        try:
            # Logique d'extraction commune
            result = await self.llm_extractor.extract_quote_info(prompt)
            
            # Post-traitement selon le mode
            # Pour l'instant, on retourne le r√©sultat tel quel
            # Les modes "robust" et "minimal" peuvent √™tre impl√©ment√©s plus tard
            return result

        except Exception as e:
            logger.error(f"Erreur extraction {extraction_mode}: {e}")
            return {"error": str(e)}
    
    async def _extract_info_from_prompt(self, prompt: str) -> Dict[str, Any]:
        """
        Extraction des informations avec fallback robuste
        Version corrig√©e qui fonctionne m√™me si Claude √©choue
        """

        logger.info(f"üîÑ Extraction d'informations depuis: {prompt}")

        # üîß STRAT√âGIE 1: Essayer Claude API (si disponible)
        try:
            # V√©rifier si l'API Claude est configur√©e
            api_key = os.getenv("ANTHROPIC_API_KEY")

            if api_key and api_key.startswith("sk-ant-"):
                logger.info("üìû Tentative d'extraction via Claude API...")

                # Importer le module avec gestion d'erreur
                try:
                    extracted_info = await LLMExtractor.extract_quote_info(prompt)

                    # V√©rifier si l'extraction a r√©ussi
                    if extracted_info and "error" not in extracted_info:
                        logger.info("‚úÖ Extraction Claude r√©ussie")
                        return extracted_info
                    else:
                        logger.warning(f"‚ö†Ô∏è Erreur Claude: {extracted_info.get('error', 'R√©ponse invalide')}")

                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Exception Claude: {str(e)}")
            else:
                logger.info("‚ö†Ô∏è API Claude non configur√©e, passage au fallback")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur g√©n√©rale Claude: {str(e)}")

        # üîß STRAT√âGIE 2: Fallback avec extraction manuelle robuste
        logger.info("üîÑ Utilisation du fallback d'extraction manuelle...")

        try:
            fallback_result = await self._extract_info_basic_robust(prompt)

            if fallback_result and "client" in fallback_result:
                logger.info("‚úÖ Extraction manuelle r√©ussie")
                return fallback_result
            else:
                logger.warning("‚ö†Ô∏è Extraction manuelle √©choue, utilisation des valeurs par d√©faut")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Exception fallback: {str(e)}")

        # üîß STRAT√âGIE 3: Extraction minimale par d√©faut
        logger.info("üîÑ Extraction minimale par d√©faut...")

        return await self._extract_info_minimal(prompt)

    async def _extract_info_basic_robust(self, prompt: str) -> Dict[str, Any]:
        """
        Extraction manuelle robuste avec patterns am√©lior√©s
        """

        import re

        # Normaliser le prompt
        prompt_lower = prompt.lower()

        # üîç EXTRACTION CLIENT avec patterns multiples
        client_patterns = [
            r"pour\s+(?:la\s+soci√©t√©\s+|l'entreprise\s+|le\s+client\s+)?([A-Za-z0-9\s&\-'.,]+?)(?:\s+|$)",
            r"client\s*[:=]\s*([A-Za-z0-9\s&\-'.,]+?)(?:\s+|$)",
            r"soci√©t√©\s*[:=]\s*([A-Za-z0-9\s&\-'.,]+?)(?:\s+|$)",
            r"entreprise\s*[:=]\s*([A-Za-z0-9\s&\-'.,]+?)(?:\s+|$)",
            r"([A-Za-z0-9\s&\-'.,]{3,30})\s+(?:a\s+besoin|souhaite|demande|veut)",
        ]

        client_name = None

        for pattern in client_patterns:
            matches = re.findall(pattern, prompt_lower)
            if matches:
                # Nettoyer le nom du client
                client_name = matches[0].strip()

                # Supprimer les mots parasites
                stop_words = ['de', 'pour', 'le', 'la', 'les', 'un', 'une', 'des', 'du', 'devis', 'faire', 'cr√©er']
                client_words = [word for word in client_name.split() if word not in stop_words]

                if client_words:
                    client_name = ' '.join(client_words).title()
                    break

        # Si pas de client trouv√©, utiliser une valeur par d√©faut
        if not client_name:
            client_name = "Client √† identifier"

        # üîç EXTRACTION PRODUITS avec patterns multiples
        product_patterns = [
            r"(\d+)\s+(?:unit√©s?\s+de\s+|)([A-Za-z0-9\-_]+)",
            r"(\d+)\s+([A-Za-z0-9\-_\s]+?)(?:\s+pour|$)",
            r"(?:ref\s*[:=]\s*|r√©f√©rence\s*[:=]\s*|code\s*[:=]\s*)([A-Za-z0-9\-_]+)",
            r"(\d+)\s+(imprimante|ordinateur|√©cran|clavier|souris|serveur|switch|routeur|c√¢ble)",
        ]

        products = []

        for pattern in product_patterns:
            matches = re.findall(pattern, prompt_lower)
            for match in matches:
                if len(match) == 2:
                    # Pattern avec quantit√© et produit
                    quantity, product = match
                    products.append({
                        "code": product.strip(),
                        "quantity": int(quantity) if quantity.isdigit() else 1,
                        "name": product.strip().title()
                    })
                else:
                    # Pattern sans quantit√©
                    products.append({
                        "code": match.strip(),
                        "quantity": 1,
                        "name": match.strip().title()
                    })

        # Si pas de produits trouv√©s, analyser par mots-cl√©s
        if not products:
            keywords = ['imprimante', 'ordinateur', '√©cran', 'clavier', 'souris', 'serveur']

            for keyword in keywords:
                if keyword in prompt_lower:
                    # Chercher une quantit√© avant le mot-cl√©
                    quantity_match = re.search(rf"(\d+)\s+.*?{keyword}", prompt_lower)
                    quantity = int(quantity_match.group(1)) if quantity_match else 1

                    # AJOUT: Aussi v√©rifier les chiffres en d√©but de phrase
                    if quantity == 1:
                        number_matches = re.findall(r'\b(\d+)\b', prompt_lower)
                        if number_matches:
                            try:
                                first_number = int(number_matches[0])
                                if 1 <= first_number <= 999:  # Quantit√© raisonnable
                                    quantity = first_number
                            except ValueError:
                                pass

                    products.append({
                        "code": f"{keyword.upper()}_001",
                        "quantity": quantity,
                        "name": keyword.title()
                    })
                    break

        # Si toujours pas de produits, cr√©er un produit par d√©faut
        if not products:
            products.append({
                "code": "PRODUIT_001",
                "quantity": 1,
                "name": "Produit √† identifier"
            })

        return {
            "action_type": "DEVIS",
            "client": client_name,
            "products": products,
            "extracted_method": "manual_robust",
            "confidence": 0.7
        }

    async def _extract_info_minimal(self, prompt: str) -> Dict[str, Any]:
        """
        Extraction minimale garantie de fonctionner
        """

        # Analyser le prompt pour des indices basiques
        words = prompt.lower().split()

        # Chercher des nombres (potentiellement des quantit√©s)
        quantities = []
        for word in words:
            if word.isdigit():
                try:
                    num = int(word)
                    if 1 <= num <= 999:  # Filtre quantit√©s raisonnables
                        quantities.append(num)
                except ValueError:
                    pass

        # Prendre le premier nombre valide ou 1 par d√©faut
        default_quantity = quantities[0] if quantities else 1
        logger.info(f"üì¶ Quantit√© extraite en mode minimal: {default_quantity}")

        # Chercher des mots-cl√©s produits
        product_keywords = ['imprimante', 'ordinateur', '√©cran', 'laptop', 'serveur', 'switch', 'routeur']
        found_products = [keyword for keyword in product_keywords if keyword in prompt.lower()]

        # G√©n√©rer un nom de client basique
        client_name = "Client NOVA"

        # Cr√©er les produits
        products = []

        if found_products:
            for product in found_products:
                products.append({
                    "code": f"{product.upper()}_001",
                    "quantity": default_quantity,
                    "name": product.title()
                })
        else:
            # Produit par d√©faut
            products.append({
                "code": "PRODUIT_STANDARD",
                "quantity": default_quantity,
                "name": "Produit Standard"
            })

        return {
            "action_type": "DEVIS",
            "client": client_name,
            "products": products,
            "extracted_method": "minimal_fallback",
            "confidence": 0.5,
            "note": "Extraction minimale - donn√©es √† v√©rifier"
        }
    async def _extract_intelligent_search_criteria(self, product_name: str) -> Dict[str, Any]:
        """Extrait crit√®res de recherche intelligents pour produits SAP"""
        
        try:
            # Utiliser une approche directe pour l'analyse de produits
            # au lieu de extract_quote_info qui confond avec l'analyse de devis
            
            # Cat√©gorisation simple bas√©e sur des mots-cl√©s
            product_lower = product_name.lower()
            
            # D√©tection de cat√©gorie
            if any(term in product_lower for term in ["imprimante", "printer"]):
                category = "imprimante"
                characteristics = ["imprimante"]
            elif any(term in product_lower for term in ["ordinateur", "pc", "computer"]):
                category = "ordinateur"
                characteristics = ["ordinateur", "pc"]
            elif any(term in product_lower for term in ["√©cran", "monitor", "screen"]):
                category = "√©cran"
                characteristics = ["√©cran", "monitor"]
            else:
                category = "g√©n√©ral"
                characteristics = [product_name]
            
            return {
                "action_type": "RECHERCHE_PRODUIT",
                "search_criteria": {
                    "category": category,
                    "characteristics": characteristics,
                    "specifications": {}
                },
                "query_details": f"Recherche de produits de type '{category}'"
            }
            
        except Exception as e:
            logger.error(f"Erreur analyse crit√®res produit: {e}")
            return {
                "action_type": "RECHERCHE_PRODUIT",
                "search_criteria": {
                    "category": "g√©n√©ral",
                    "characteristics": [product_name],
                    "specifications": {}
                },
                "query_details": f"Recherche g√©n√©rale pour '{product_name}'"
            }
    def _extract_category_from_name(self, product_name: str) -> str:
        """Extrait la cat√©gorie d'un nom de produit"""
        product_lower = product_name.lower()
        
        if any(term in product_lower for term in ["imprimante", "printer"]):
            return "imprimante"
        elif any(term in product_lower for term in ["ordinateur", "pc", "computer"]):
            return "ordinateur"
        elif any(term in product_lower for term in ["√©cran", "monitor", "screen"]):
            return "√©cran"
        else:
            return "g√©n√©ral"

    async def _smart_product_search(self, product_name: str, product_code: str = "") -> Dict[str, Any]:
        """Recherche produits avec crit√®res intelligents - VERSION OPTIMIS√âE AVEC BASE LOCALE"""
        start_time = datetime.now()
        logger.info(f"üîç Recherche optimis√©e d√©marr√©e: '{product_name}' (code: '{product_code}')")

        try:
            # Garde simple
            if not (product_name or product_code):
                return {"found": False, "products": [], "method": "no_input", "error": "Aucun crit√®re fourni"}

            # Construire les crit√®res
            criteria = {
                "product_name": product_name,
                "product_code": product_code,
                "category": self._extract_category_from_name(product_name) if product_name else "g√©n√©ral",
                "keywords": self._extract_product_keywords(product_name) if product_name else []
            }

            # ===== √âTAPE 1: RECHERCHE LOCALE PRIORITAIRE (< 500ms) =====

            # 1.1 Recherche exacte par code si fourni
            if product_code:
                try:
                    local_exact = await self._search_local_by_code(product_code)
                    if local_exact:
                        duration_ms = (datetime.now() - start_time).total_seconds() * 1000
                        logger.info(f"‚úÖ Produit trouv√© en local par code en {duration_ms:.0f}ms: {local_exact.get('ItemName')}")
                        return {"found": True, "products": [local_exact], "method": "exact_code_local", "duration_ms": duration_ms}
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur recherche locale par code: {str(e)}")

            # 1.2 Recherche intelligente locale par nom
            if product_name:
                try:
                    local_smart_results = await self._search_local_intelligent(product_name, criteria)
                    if local_smart_results:
                        # d√©dup locale par ItemCode
                        seen = set()
                        dedup = []
                        for it in local_smart_results:
                            code = it.get("ItemCode")
                            if code and code not in seen:
                                seen.add(code)
                                dedup.append(it)
                        duration_ms = (datetime.now() - start_time).total_seconds() * 1000
                        logger.info(f"‚úÖ {len(dedup)} produits trouv√©s en local en {duration_ms:.0f}ms")
                        return {"found": True, "products": dedup[:10], "method": "intelligent_local", "duration_ms": duration_ms}
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur recherche locale intelligente: {str(e)}")

            # 1.3 Recherche fuzzy locale
            if product_name:
                try:
                    local_fuzzy_results = await self._search_local_fuzzy(product_name)
                    if local_fuzzy_results:
                        # d√©dup
                        seen = set()
                        dedup = []
                        for it in local_fuzzy_results:
                            code = it.get("ItemCode")
                            if code and code not in seen:
                                seen.add(code)
                                dedup.append(it)
                        duration_ms = (datetime.now() - start_time).total_seconds() * 1000
                        logger.info(f"‚úÖ {len(dedup)} produits trouv√©s en fuzzy local en {duration_ms:.0f}ms")
                        return {"found": True, "products": dedup[:5], "method": "fuzzy_local", "duration_ms": duration_ms}
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur recherche fuzzy locale: {str(e)}")

            # ===== √âTAPE 2: FALLBACK SAP (LIMIT√â POUR √âVITER BOUCLES) =====
            logger.warning("üîÑ Recherche locale vide - Activation fallback SAP limit√©")

            # 2.1 Recherche exacte par code SAP
            if product_code:
                try:
                    exact_result = await self.mcp_connector.call_sap_mcp("sap_read", {
                        "endpoint": f"/Items('{product_code}')",
                        "method": "GET"
                    })
                    if "error" not in exact_result and exact_result.get("ItemCode"):
                        duration_ms = (datetime.now() - start_time).total_seconds() * 1000
                        logger.info(f"‚úÖ Produit trouv√© via SAP par code: {exact_result.get('ItemName')}")
                        return {"found": True, "products": [exact_result], "method": "exact_code_sap", "duration_ms": duration_ms}
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur recherche SAP par code: {str(e)}")

            # 2.2 Recherche SAP par nom (LIMIT√âE √Ä 1 TENTATIVE)
            if product_name:
                try:
                    search_timeout = asyncio.create_task(asyncio.sleep(15))  # 15s max
                    search_task = asyncio.create_task(
                        self.mcp_connector.call_mcp(
                            "sap_mcp",
                            "sap_search",
                            {"query": product_name, "entity_type": "Items", "limit": 3}
                        )
                    )
                    done, pending = await asyncio.wait([search_task, search_timeout], return_when=asyncio.FIRST_COMPLETED)
                    for task in pending:
                        task.cancel()

                    if search_task in done:
                        search_result = search_task.result()
                        if search_result and search_result.get("success") and search_result.get("results"):
                            results = search_result["results"][:3]
                            duration_ms = (datetime.now() - start_time).total_seconds() * 1000
                            logger.info(f"‚úÖ Produit trouv√© via SAP par nom ({len(results)} r√©sultats)")
                            return {"found": True, "products": results, "method": "name_search_sap", "duration_ms": duration_ms}
                    else:
                        logger.warning(f"‚è∞ Timeout recherche SAP pour '{product_name}' (15s d√©pass√©es)")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur recherche SAP par nom: {str(e)}")

            # 2.3 Recherche SAP alternative avec termes anglais (DERNI√àRE CHANCE)
            if product_name:
                try:
                    english_terms = self._get_english_search_terms(product_name)
                    for term in english_terms[:2]:
                        logger.info(f"üîç Recherche SAP alternative: {term}")
                        alt_task = asyncio.create_task(
                            self.mcp_connector.call_mcp(
                                "sap_mcp",
                                "sap_search",
                                {"search_term": term, "search_fields": ["ItemName", "U_Description"], "limit": 2}
                            )
                        )
                        try:
                            alt_result = await asyncio.wait_for(alt_task, timeout=10.0)
                            if alt_result and alt_result.get("success") and alt_result.get("results"):
                                results = alt_result["results"][:2]
                                duration_ms = (datetime.now() - start_time).total_seconds() * 1000
                                logger.info(f"‚úÖ Produit trouv√© via terme alternatif '{term}'")
                                return {"found": True, "products": results, "method": f"alternative_{term}", "duration_ms": duration_ms}
                        except asyncio.TimeoutError:
                            logger.warning(f"‚è∞ Timeout recherche alternative '{term}' (10s)")
                            alt_task.cancel()
                            continue
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Erreur recherche alternative '{term}': {str(e)}")
                            continue
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur recherche termes alternatifs: {str(e)}")

            # ===== AUCUN R√âSULTAT TROUV√â =====
            duration_ms = (datetime.now() - start_time).total_seconds() * 1000
            logger.warning(f"‚ùå Aucun produit trouv√© pour '{product_name}' apr√®s {duration_ms:.0f}ms")
            return {"found": False, "products": [], "method": "no_match", "searched_criteria": criteria, "duration_ms": duration_ms}

        except Exception as e:
            duration_ms = (datetime.now() - start_time).total_seconds() * 1000
            logger.error(f"‚ùå Erreur critique _smart_product_search apr√®s {duration_ms:.0f}ms: {str(e)}")
            return {"found": False, "products": [], "method": "error", "error": str(e), "duration_ms": duration_ms}
    
    def _is_generic_search(self, product_name: str) -> bool:
        """D√©tecte si le terme de recherche est trop g√©n√©rique pour auto-s√©lection"""
        if not product_name:
            return False
            
        generic_terms = [
            "imprimante", "ordinateur", "√©cran", "clavier", "souris", 
            "scanner", "serveur", "switch", "routeur", "c√¢ble",
            "cartouche", "toner", "papier", "moniteur", "pc"
        ]
        
        # V√©rifier si le nom contient seulement des termes g√©n√©riques et des chiffres/unit√©s
        name_lower = product_name.lower()
        words = name_lower.split()
        
        # Si tous les mots sont soit g√©n√©riques, soit des nombres/unit√©s
        for word in words:
            if not (any(term in word for term in generic_terms) or 
                   word.isdigit() or 
                   word in ["ppm", "go", "gb", "tb", "mo", "mb", "pouces", "inch"]):
                return False
        
        return True
    async def _search_local_by_code(self, item_code: str) -> Optional[Dict[str, Any]]:
        """Recherche exacte par ItemCode en base locale PostgreSQL"""
        try:
            from sqlalchemy import create_engine, text
            from sqlalchemy.orm import sessionmaker
            db_url = os.getenv("DATABASE_URL")
            if not db_url:
                logger.warning("DATABASE_URL manquant pour recherche locale par code")
                return None
            # Recherche simple et directe d'abord
            simple_results = session.execute(
                text("""
                SELECT item_code, item_name, u_description, avg_price, on_hand,
                    items_group_code, manufacturer, sales_unit
                FROM produits_sap 
                WHERE valid = true 
                AND on_hand > 0
                AND (
                    LOWER(item_name) LIKE '%' || LOWER(:search_term) || '%' OR
                    LOWER(u_description) LIKE '%' || LOWER(:search_term) || '%'
                )
                ORDER BY on_hand DESC
                LIMIT 10
                """),
                {"search_term": product_name}
            ).fetchall()

            if simple_results:
                logger.info(f"‚úÖ Recherche simple trouv√©e: {len(simple_results)} r√©sultats")
                formatted_results: List[Dict[str, Any]] = []
                for row in simple_results:
                    formatted_results.append({
                        "ItemCode": row.item_code,
                        "ItemName": row.item_name,
                        "U_Description": row.u_description or "",
                        "AvgPrice": float(row.avg_price or 0),
                        "OnHand": int(row.on_hand or 0),
                        "QuantityOnStock": int(row.on_hand or 0),
                        "ItemsGroupCode": row.items_group_code or "",
                        "Manufacturer": row.manufacturer or "",
                        "SalesUnit": row.sales_unit or "UN",
                        "source": "local_db_simple",
                        "relevance_score": 1.0
                    })
                return formatted_results
            with SessionLocal() as session:
                result = session.execute(
                    text("""
                    SELECT item_code, item_name, u_description, avg_price, on_hand,
                        items_group_code, manufacturer, sales_unit
                    FROM produits_sap 
                    WHERE item_code = :code AND valid = true
                    """),
                    {"code": item_code}
                ).fetchone()
                if result:
                    return {
                        "ItemCode": result.item_code,
                        "ItemName": result.item_name,
                        "U_Description": result.u_description or "",
                        "AvgPrice": float(result.avg_price or 0),
                        "OnHand": int(result.on_hand or 0),
                        "QuantityOnStock": int(result.on_hand or 0),
                        "ItemsGroupCode": result.items_group_code or "",
                        "Manufacturer": result.manufacturer or "",
                        "SalesUnit": result.sales_unit or "UN",
                        "source": "local_db"
                    }
        except Exception as e:
            logger.error(f"‚ùå Erreur recherche locale par code: {str(e)}")
        return None

    async def _search_local_intelligent(self, product_name: str, criteria: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Recherche intelligente locale avec LLM et SQL optimis√©"""
        try:
            from sqlalchemy import create_engine, text
            from sqlalchemy.orm import sessionmaker

            keywords = criteria.get("keywords", []) or []
            category = criteria.get("category", "autre") or "autre"

            # Conditions SQL
            search_conditions = ["(LOWER(item_name) LIKE :search_term OR LOWER(u_description) LIKE :search_term)"]
            params = {"search_term": f"%{product_name.lower()}%"}

            for i, keyword in enumerate(keywords[:3]):
                param_name = f"keyword_{i}"
                search_conditions.append(f"(LOWER(item_name) LIKE :{param_name} OR LOWER(u_description) LIKE :{param_name})")
                params[param_name] = f"%{keyword.lower()}%"

            if category != "autre":
                search_conditions.append("(LOWER(item_name) LIKE :category OR LOWER(u_description) LIKE :category)")
                params["category"] = f"%{category.lower()}%"

            query = f"""
            SELECT item_code, item_name, u_description, avg_price, on_hand,
                items_group_code, manufacturer, sales_unit,
                (
                    CASE 
                    WHEN LOWER(item_name) LIKE :search_term THEN 100
                    WHEN LOWER(u_description) LIKE :search_term THEN 80
                    WHEN :category IS NOT NULL AND LOWER(item_name) LIKE :category THEN 60
                    ELSE 40
                    END
                ) as relevance_score
            FROM produits_sap 
            WHERE valid = true 
            AND on_hand > 0
            AND ({' OR '.join(search_conditions)})
            ORDER BY relevance_score DESC, on_hand DESC
            LIMIT 10
            """

            db_url = os.getenv("DATABASE_URL")
            if not db_url:
                logger.warning("DATABASE_URL manquant pour recherche locale intelligente")
                return []
            engine = create_engine(db_url, pool_pre_ping=True)
            SessionLocal = sessionmaker(bind=engine)
            with SessionLocal() as session:
                results = session.execute(text(query), params).fetchall()
                formatted_results: List[Dict[str, Any]] = []
                for row in results or []:
                    formatted_results.append({
                        "ItemCode": row.item_code,
                        "ItemName": row.item_name,
                        "U_Description": row.u_description or "",
                        "AvgPrice": float(row.avg_price or 0),
                        "OnHand": int(row.on_hand or 0),
                        "QuantityOnStock": int(row.on_hand or 0),
                        "ItemsGroupCode": row.items_group_code or "",
                        "Manufacturer": row.manufacturer or "",
                        "SalesUnit": row.sales_unit or "UN",
                        "source": "local_db",
                        "relevance_score": float(row.relevance_score or 0.0)
                    })
                return formatted_results
        except Exception as e:
            logger.error(f"‚ùå Erreur recherche locale intelligente: {str(e)}")
        return []

    async def _search_local_fuzzy(self, product_name: str) -> List[Dict[str, Any]]:
        """Recherche fuzzy locale - Version compatible sans pg_trgm"""
        try:
            from sqlalchemy import create_engine, text
            from sqlalchemy.orm import sessionmaker
            db_url = os.getenv("DATABASE_URL")
            if not db_url:
                logger.warning("DATABASE_URL manquant pour recherche fuzzy locale")
                return []
            engine = create_engine(db_url, pool_pre_ping=True)
            SessionLocal = sessionmaker(bind=engine)
            with SessionLocal() as session:
                # Recherche par sous-cha√Ænes multiples sans pg_trgm
                search_terms = product_name.lower().split()
                where_clauses = []
                params = {"name": product_name}
                
                for i, term in enumerate(search_terms[:3]):  # Limite √† 3 termes
                    if len(term) > 2:  # Ignore les termes trop courts
                        params[f"term_{i}"] = f"%{term}%"
                        where_clauses.append(f"(LOWER(item_name) LIKE :term_{i} OR LOWER(u_description) LIKE :term_{i})")
                
                if not where_clauses:
                    where_clauses = ["LOWER(item_name) LIKE '%' || LOWER(:name) || '%'"]
                
                results = session.execute(
                    text(f"""
                    SELECT item_code, item_name, u_description, avg_price, on_hand,
                        items_group_code, manufacturer, sales_unit
                    FROM produits_sap 
                    WHERE valid = true 
                    AND on_hand > 0
                    AND ({' OR '.join(where_clauses)})
                    ORDER BY on_hand DESC, LENGTH(item_name) ASC
                    LIMIT 10
                    """),
                    params
                ).fetchall()
                formatted_results: List[Dict[str, Any]] = []
                for row in results or []:
                    formatted_results.append({
                        "ItemCode": row.item_code,
                        "ItemName": row.item_name,
                        "U_Description": row.u_description or "",
                        "AvgPrice": float(row.avg_price or 0),
                        "OnHand": int(row.on_hand or 0),
                        "QuantityOnStock": int(row.on_hand or 0),
                        "ItemsGroupCode": row.items_group_code or "",
                        "Manufacturer": row.manufacturer or "",
                        "SalesUnit": row.sales_unit or "UN",
                        "source": "local_db",
                        "similarity_score": float(row.sim_score or 0.0)
                    })
                return formatted_results
        except Exception as e:
            logger.error(f"‚ùå Erreur recherche fuzzy locale: {str(e)}")
        return []
    
    async def _search_local_fallback(self, product_name: str) -> List[Dict[str, Any]]:
        """Recherche locale sans pg_trgm - fallback LIKE"""
        try:
            from sqlalchemy import create_engine, text
            from sqlalchemy.orm import sessionmaker
            db_url = os.getenv("DATABASE_URL")
            if not db_url:
                return []
            
            engine = create_engine(db_url, pool_pre_ping=True)
            SessionLocal = sessionmaker(bind=engine)
            
            with SessionLocal() as session:
                results = session.execute(
                    text("""
                    SELECT item_code, item_name, u_description, avg_price, on_hand,
                        items_group_code, manufacturer, sales_unit,
                        CASE 
                            WHEN LOWER(item_name) LIKE LOWER(:name_exact) THEN 0.9
                            WHEN LOWER(item_name) LIKE LOWER(:name_start) THEN 0.8  
                            WHEN LOWER(item_name) LIKE LOWER(:name_contain) THEN 0.6
                            WHEN LOWER(u_description) LIKE LOWER(:name_contain) THEN 0.4
                            ELSE 0.2
                        END as sim_score
                    FROM produits_sap 
                    WHERE valid = true 
                    AND on_hand > 0
                    AND (
                        LOWER(item_name) LIKE LOWER(:name_contain) OR
                        LOWER(u_description) LIKE LOWER(:name_contain)
                    )
                    ORDER BY sim_score DESC, on_hand DESC
                    LIMIT 5
                    """),
                    {
                        "name_exact": product_name,
                        "name_start": f"{product_name}%",
                        "name_contain": f"%{product_name}%"
                    }
                ).fetchall()
                
                formatted_results = []
                for row in results or []:
                    formatted_results.append({
                        "ItemCode": row.item_code,
                        "ItemName": row.item_name,
                        "U_Description": row.u_description or "",
                        "AvgPrice": float(row.avg_price or 0),
                        "OnHand": int(row.on_hand or 0),
                        "QuantityOnStock": int(row.on_hand or 0),
                        "ItemsGroupCode": row.items_group_code or "",
                        "Manufacturer": row.manufacturer or "",
                        "SalesUnit": row.sales_unit or "UN",
                        "source": "local_db",
                        "similarity_score": float(row.sim_score or 0.0)
                    })
                return formatted_results
        except Exception as e:
            logger.error(f"‚ùå Erreur recherche fallback locale: {str(e)}")
        return []
    def _extract_product_keywords(self, product_name: str) -> List[str]:
        """Extrait les mots-cl√©s intelligents d'un nom de produit"""
        import unicodedata

        def _normalize(s: str) -> str:
            s_no_accents = ''.join(ch for ch in unicodedata.normalize('NFD', s) if not unicodedata.combining(ch))
            return s_no_accents.lower()

        product_lower = product_name.lower()
        product_norm = _normalize(product_name)

        search_terms: List[str] = []
        seen = set()

        def _add(term: str) -> None:
            t = term.strip()
            if not t:
                return
            key = _normalize(t)
            if key not in seen:
                seen.add(key)
                search_terms.append(t)

        translations = {
            "imprimante": ["laser printer", "inkjet printer"],
            "ordinateur": ["workstation", "laptop"],
            "√©cran": ["monitor", "display"],
            "clavier": ["keyboard", "mechanical keyboard"],
            "souris": ["wireless mouse", "optical mouse"],
            "scanner": ["document scanner", "scan"],
            "laser": ["laser printer", "LaserJet"],
            "couleur": ["color", "colour"],
            "noir": ["monochrome", "mono"],
            "ppm": ["pages per minute", "page/min"],
        }

        for french_term, english_terms in translations.items():
            fr_norm = _normalize(french_term)
            if fr_norm in product_norm:
                for t in english_terms[:2]:
                    _add(t)

        _add(product_name)

        numbers = re.findall(r"\d+", product_lower)
        for num in numbers:
            try:
                val = int(num)
            except ValueError:
                continue
            if 5 < val < 1000:
                _add(f"{num}ppm")
                _add(f"{num} ppm")
                _add(f"{num} pages")

        return search_terms[:6]

    def _get_english_search_terms(self, product_name: str) -> List[str]:
        """G√©n√®re des termes de recherche anglais pour SAP"""
        product_lower = product_name.lower()
        translations = {
            "imprimante": ["printer", "Printer", "PRINTER"],
            "ordinateur": ["computer", "Computer", "PC"],
            "√©cran": ["monitor", "Monitor", "screen"],
            "clavier": ["keyboard", "Keyboard"],
            "souris": ["mouse", "Mouse"],
            "scanner": ["scanner", "Scanner"]
        }
        search_terms: List[str] = []
        for french_term, english_terms in translations.items():
            if french_term in product_lower:
                search_terms.extend(english_terms)
                break
        search_terms.append(product_name)
        return search_terms[:3]

    def _extract_category_from_name(self, product_name: str) -> str:
        """Extrait la cat√©gorie d'un nom de produit"""
        product_lower = product_name.lower()
        if any(term in product_lower for term in ["imprimante", "printer"]):
            return "imprimante"
        elif any(term in product_lower for term in ["ordinateur", "pc", "computer"]):
            return "ordinateur"
        elif any(term in product_lower for term in ["√©cran", "monitor", "screen"]):
            return "√©cran"
        else:
            return "g√©n√©ral"

            
    def _calculate_product_match_score(self, product: Dict, criteria: Dict) -> float:
        """Calcule score de correspondance produit/crit√®res"""
        
        score = 0.0
        product_name = product.get("ItemName", "").lower()
        combined_text = f"{product_name} {product.get('U_Description', '').lower()}"
        
        # Score cat√©gorie
        category = criteria.get("category", "").lower()
        if category in combined_text:
            score += 0.4
        
        # Score sp√©cifications techniques (vitesse ppm)
        specifications = criteria.get("specifications", {})
        if "vitesse" in specifications:
            target_speed = int(specifications["vitesse"].replace(" ppm", "").replace("ppm", ""))
            
            import re
            speed_matches = re.findall(r'(\d+)\s*ppm', combined_text)
            for match in speed_matches:
                product_speed = int(match)
                speed_diff = abs(product_speed - target_speed)
                
                if speed_diff == 0:
                    score += 0.5
                elif speed_diff <= 2:
                    score += 0.3
                elif speed_diff <= 5:
                    score += 0.1
        
        return min(score, 1.0)
    async def _check_availability(self, products: List[Dict[str, Any]]) -> Dict[str, Any]:
        """V√©rifie la disponibilit√© des produits"""
        logger.info("V√©rification de la disponibilit√© des produits")
        
        availability_status = {
            "all_available": True,
            "unavailable_products": [],
            "alternatives": {}
        }
        
        for product in products:
            if "error" in product:
                availability_status["all_available"] = False
                availability_status["unavailable_products"].append({
                    "code": product["code"],
                    "reason": "Produit non trouv√©",
                    "details": product["error"]
                })
                continue
            
            if product.get("stock", 0) < product.get("quantity", 0):
                logger.warning(f"Produit {product['code']} insuffisant en stock: {product['stock']} < {product['quantity']}")
                availability_status["all_available"] = False
                
                unavailable_item = {
                    "code": product["code"],
                    "name": product.get("name", ""),
                    "quantity_requested": product.get("quantity", 0),
                    "quantity_available": product.get("stock", 0),
                    "reason": "Stock insuffisant"
                }
                availability_status["unavailable_products"].append(unavailable_item)
        
        return availability_status
    
    async def _build_missing_info_response(self, extracted_info: Dict[str, Any], missing_elements: List[str]) -> Dict[str, Any]:
        """Construit une r√©ponse proactive demandant les informations manquantes avec des propositions concr√®tes"""
        
        # R√©cup√©rer les listes pour proposer des choix
        available_clients = await self._get_available_clients_list()
        available_products = await self._get_available_products_list()

        # üîß PROTECTION SUPPL√âMENTAIRE: S'assurer que les listes ne sont jamais None
        if available_clients is None:
            logger.warning("available_clients est None, utilisation d'une liste vide")
            available_clients = []
        if available_products is None:
            logger.warning("available_products est None, utilisation d'une liste vide")
            available_products = []

        # Construire le message personnalis√© selon ce qui manque
        if "client" in missing_elements and "produits" in missing_elements:
            message = "üéØ **Parfait ! Je vais vous aider √† cr√©er votre devis √©tape par √©tape.**\n\n" + \
                     "Pour commencer, j'ai besoin de conna√Ætre le client. Voulez-vous que je vous pr√©sente la liste de nos clients ?"
            questions = [
                "üè¢ **√âtape 1 - Client** : Choisissez une option ci-dessous"
            ]
            
        elif "client" in missing_elements:
            products_info = ", ".join([f"{p.get('quantity', 1)}x {p.get('code', '')}" for p in extracted_info.get("products", [])])
            message = f"üéØ **Excellent ! J'ai identifi√© les produits : {products_info}**\n\n" + \
                     "Maintenant, pour quel client souhaitez-vous cr√©er ce devis ? Voulez-vous que je vous pr√©sente la liste de nos clients ?"
            questions = [
                "üè¢ **Client requis** : Choisissez une option ci-dessous"
            ]
            
        elif "produits" in missing_elements:
            client_name = extracted_info.get("client", "le client")
            message = f"üéØ **Parfait ! Devis pour {client_name}**\n\n" + \
                     "Maintenant, quels produits souhaitez-vous inclure dans ce devis ? Voulez-vous que je vous pr√©sente notre catalogue ?"
            questions = [
                "üì¶ **√âtape 2 - Produits** : Choisissez une option ci-dessous"
            ]
        
        # Construire les actions rapides PROACTIVES
        quick_actions = []
        
        if "client" in missing_elements:
            quick_actions.extend([
                {
                    "action": "show_clients_list",
                    "label": f"üìã Voir nos {len(available_clients)} clients",
                    "type": "primary",
                    "description": "Afficher la liste compl√®te des clients",
                    "data": {"count": len(available_clients)}
                },
                {
                    "action": "search_client",
                    "label": "üîç Rechercher un client",
                    "type": "secondary",
                    "description": "Rechercher par nom d'entreprise"
                },
                {
                    "action": "new_client",
                    "label": "‚ûï Nouveau client",
                    "type": "secondary",
                    "description": "Cr√©er un nouveau client"
                }
            ])
        
        if "produits" in missing_elements:
            quick_actions.extend([
                {
                    "action": "show_products_list",
                    "label": f"üì¶ Voir nos {len(available_products)} produits",
                    "type": "primary",
                    "description": "Afficher notre catalogue produits",
                    "data": {"count": len(available_products)}
                },
                {
                    "action": "search_product",
                    "label": "üîç Rechercher un produit",
                    "type": "secondary",
                    "description": "Rechercher par code ou nom"
                },
                {
                    "action": "product_categories",
                    "label": "üìÇ Par cat√©gories",
                    "type": "secondary",
                    "description": "Parcourir par cat√©gories"
                }
            ])
        
        # Actions g√©n√©rales toujours disponibles
        quick_actions.extend([
            {
                "action": "manual_entry",
                "label": "‚úèÔ∏è Saisie manuelle",
                "type": "tertiary",
                "description": "Saisir directement les informations"
            },
            {
                "action": "examples",
                "label": "üí° Voir des exemples",
                "type": "tertiary",
                "description": "Exemples de demandes"
            }
        ])
        
        return {
            "success": True,
            "workflow_status": "waiting_for_input",
            "response_type": "user_input_required",
            "message": message,
            "questions": questions,
            "extracted_info": extracted_info,
            "missing_elements": missing_elements,
            "quick_actions": quick_actions,
            "available_data": {
                "clients": available_clients[:10] if "client" in missing_elements else [],  # Top 10 pour aper√ßu
                "products": available_products[:10] if "produits" in missing_elements else [],  # Top 10 pour aper√ßu
                "clients_count": len(available_clients),
                "products_count": len(available_products)
            },
            "quote_data": {
                "status": "incomplete",
                "task_id": self.task_id,
                "partial_data": extracted_info,
                "timestamp": datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
                "workflow_steps": self.workflow_steps,
                "context_available": True,
                "draft_mode": self.draft_mode
            },
            "suggestions": {
                "examples": [
                    "Je veux un devis pour Acme Corp avec 5 PROD001 et 2 PROD002",
                    "Cr√©er un devis pour Entreprise XYZ, produit REF123 quantit√© 10",
                    "Devis pour client ABC avec 3 unit√©s ITEM456"
                ],
                "next_steps": [
                    "Choisissez un client dans la liste" if "client" in missing_elements else None,
                    "S√©lectionnez les produits souhait√©s" if "produits" in missing_elements else None
                ]
            }
        }
    
    async def _get_available_clients_list(self) -> List[Dict[str, Any]]:
        """R√©cup√®re la liste des clients disponibles depuis Salesforce"""
        try:
            clients_data = await self.mcp_connector.get_salesforce_accounts(limit=100)

            # üîß CORRECTION: V√©rifier si clients_data est valide
            if clients_data and isinstance(clients_data, list):
                clients = []
                for record in clients_data:
                    client_info = {
                        "id": record.get("Id", ""),
                        "name": record.get("Name", ""),
                        "type": record.get("Type", "Prospect"),
                        "industry": record.get("Industry", ""),
                        "phone": record.get("Phone", ""),
                        "website": record.get("Website", ""),
                        "recent_quotes": 0  # √Ä calculer si n√©cessaire
                    }
                    clients.append(client_info)

                # Trier par nom
                clients.sort(key=lambda x: x["name"])
                logger.info(f"R√©cup√©r√© {len(clients)} clients depuis Salesforce (m√©thode principale)")
                return clients
            else:
                logger.warning("M√©thode principale n'a pas retourn√© de donn√©es valides, passage au fallback")

        except Exception as e:
            logger.warning(f"M√©thode principale √©chou√©e, passage au fallback: {str(e)}")

        # üîß FALLBACK: Essayer avec appel MCP direct
        try:
            clients_data = await MCPConnector.call_salesforce_mcp("salesforce_query", {
                "query": "SELECT Id, Name, Type, Industry FROM Account LIMIT 100"
            })

            if clients_data and "records" in clients_data:
                clients = []
                for record in clients_data["records"]:
                    client_info = {
                        "id": record.get("Id", ""),
                        "name": record.get("Name", ""),
                        "type": record.get("Type", "Prospect"),
                        "industry": record.get("Industry", ""),
                        "phone": record.get("Phone", ""),
                        "website": record.get("Website", ""),
                        "recent_quotes": 0  # √Ä calculer si n√©cessaire
                    }
                    clients.append(client_info)

                # Trier par nom
                clients.sort(key=lambda x: x["name"])
                logger.info(f"R√©cup√©r√© {len(clients)} clients depuis Salesforce (fallback)")
                return clients
            else:
                logger.warning("Aucun client trouv√© dans Salesforce")

        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des clients: {str(e)}")

        # üîß CORRECTION: Toujours retourner une liste, jamais None
        logger.info("Retour de la liste d'exemple de clients")
        return [
            {"id": "example1", "name": "Acme Corporation", "type": "Customer", "industry": "Technology"},
            {"id": "example2", "name": "Global Industries", "type": "Prospect", "industry": "Manufacturing"},
            {"id": "example3", "name": "Tech Solutions Ltd", "type": "Customer", "industry": "IT Services"}
        ]
    
    async def _enhanced_product_search(self, product_name: str, product_code: str = "") -> Dict[str, Any]:
        """
        üîß RECHERCHE PRODUIT AM√âLIOR√âE pour cas comme "Imprimante 20 ppm"
        """
        try:
            logger.info(f"üîç Recherche produit am√©lior√©e: '{product_name}' (code: '{product_code}')")

            # 1. Recherche exacte par code si fourni
            if product_code:
                exact_result = await self.mcp_connector.call_mcp(
                    "sap_mcp",
                    "sap_search",
                    {
                        "table": "OITM",
                        "filter": f"ItemCode eq '{product_code}'",
                        "select": "ItemCode,ItemName,OnHand,AvgPrice"
                    }
                )
                
                if exact_result.get("success") and exact_result.get("data"):
                    return {
                        "found": True,
                        "product": exact_result["data"][0],
                        "search_method": "exact_code"
                    }

            # 2. Recherche intelligente par nom pour "imprimantes"
            if product_name:
                search_terms = self._extract_product_keywords(product_name)
                
                for term in search_terms:
                    logger.info(f"üîç Recherche avec terme: '{term}'")
                    
                    fuzzy_result = await self.mcp_connector.call_mcp(
                        "sap_mcp",
                        "sap_search",
                        {
                            "table": "OITM",
                            "filter": f"contains(tolower(ItemName),'{term.lower()}') or contains(tolower(U_Description),'{term.lower()}')",
                            "select": "ItemCode,ItemName,OnHand,AvgPrice,U_Description",
                            "top": 3
                        }
                    )
                    
                    if fuzzy_result.get("success") and fuzzy_result.get("data"):
                        best_match = fuzzy_result["data"][0]
                        logger.info(f"‚úÖ Produit trouv√©: {best_match.get('ItemName')} ({best_match.get('ItemCode')})")
                        
                        return {
                            "found": True,
                            "product": best_match,
                            "search_method": "fuzzy",
                            "search_term": term
                        }

            # 3. Recherche intelligente avec mots-cl√©s
            logger.info(f"üîç Recherche intelligente pour: {product_name}")
            keywords = self._extract_product_keywords(product_name)
            
            for keyword in keywords[:2]:  # Tester 2 mots-cl√©s max
                keyword_result = await self.mcp_connector.call_mcp(
                    "sap_mcp",
                    "sap_search",
                    {
                        "search_term": keyword,
                        "search_fields": ["ItemName", "U_Description"],
                        "limit": 3
                    }
                )
                
                if keyword_result.get("success") and keyword_result.get("results"):
                    best_match = keyword_result["results"][0]
                    logger.info(f"‚úÖ Produit trouv√© via mot-cl√© '{keyword}': {best_match.get('ItemName')}")
                    
                    return {
                        "found": True,
                        "product": {
                            "code": best_match.get("ItemCode"),
                            "name": best_match.get("ItemName"),
                            "price": float(best_match.get("AvgPrice", 0)),
                            "stock": int(best_match.get("OnHand", 0)),
                            "description": best_match.get("U_Description", "")
                        },
                        "search_method": "keyword_match",
                        "matched_keyword": keyword
                    }
            
            
        except Exception as e:

            logger.exception(f"‚ùå Erreur recherche produit: {str(e)}")

            return {
                "found": False,
                "error": str(e)
            }
    def _get_intelligent_search_terms(self, product_name: str) -> List[str]:
        """
        G√©n√®re des termes de recherche intelligents pour SAP
        """
        product_lower = product_name.lower()
        search_terms = []
        
        # Mapping fran√ßais -> anglais pour SAP
        translations = {
            "imprimante": ["printer", "imprimante", "Printer", "PRINTER"],
            "ordinateur": ["computer", "PC", "desktop", "ordinateur"],
            "√©cran": ["monitor", "screen", "display", "√©cran"],
            "clavier": ["keyboard", "clavier"],
            "souris": ["mouse", "souris"],
            "scanner": ["scanner", "scan"],
            "laser": ["laser", "Laser"],
            "couleur": ["color", "colour", "couleur"]
        }
        
        # Chercher des correspondances
        for french_term, english_terms in translations.items():
            if french_term in product_lower:
                search_terms.extend(english_terms)
        
        # Ajouter le terme original
        search_terms.append(product_name)
        
        # Retourner les termes uniques, anglais en premier
        return list(dict.fromkeys(search_terms))[:4]
    

    def _create_generic_product(self, product_name: str) -> Dict[str, Any]:
        """
        üîß CR√âATION PRODUIT G√âN√âRIQUE avec prix estim√©
        """
        import time
        
        # Prix estim√©s selon le type
        estimated_price = 100.0  # Par d√©faut
        
        if "imprimante" in product_name.lower():
            if "20 ppm" in product_name.lower() or "ppm" in product_name.lower():
                    # Extraction intelligente de la vitesse
                    import re
                    ppm_match = re.search(r'(\d+)\s*ppm', product_name.lower())
                    if ppm_match:
                        ppm_value = int(ppm_match.group(1))
                        estimated_price = 150.0 + (ppm_value * 5)  # Prix bas√© sur vitesse
                    else:
                        estimated_price = 300.0  # Imprimante standard
            else:
                estimated_price = 150.0  # Imprimante g√©n√©rique
        elif "ordinateur" in product_name.lower():
            estimated_price = 800.0
        elif "√©cran" in product_name.lower():
            estimated_price = 300.0
        
        generic_code = f"GEN{int(time.time()) % 10000:04d}"
        # Normaliser le format pour compatibilit√© avec la validation
        normalized_price = estimated_price
        
        return {
            "ItemCode": generic_code,
            "ItemName": product_name.title(),
            "OnHand": 999,  # Stock fictif
            "AvgPrice": estimated_price,
            "Price": estimated_price,  # Format standardis√© pour validation
            "U_Description": f"Produit g√©n√©rique cr√©√© automatiquement - Prix estim√©",
            "Generic": True
        }
    
    async def _get_available_products_list(self) -> List[Dict[str, Any]]:
        """R√©cup√®re la liste des produits disponibles depuis SAP"""
        try:
            # R√©cup√©rer les produits depuis SAP via MCP
            products_data = await self.mcp_connector.get_sap_products(limit=100)
            
            if products_data and "products" in products_data:
                products = []
                for product in products_data["products"]:
                    product_info = {
                        "code": product.get("code", ""),
                        "name": product.get("name", ""),
                        "description": product.get("description", ""),
                        "price": product.get("price", 0),
                        "currency": product.get("currency", "EUR"),
                        "stock": product.get("stock", 0),
                        "category": product.get("category", "G√©n√©ral"),
                        "unit": product.get("unit", "pi√®ce"),
                        "promotion": product.get("promotion", False),
                        "discount_threshold": product.get("discount_threshold", 50)  # Remise √† partir de 50 unit√©s
                    }
                    products.append(product_info)
                
                # Trier par code produit
                products.sort(key=lambda x: x["code"])
                logger.info(f"R√©cup√©r√© {len(products)} produits depuis SAP")
                return products
            else:
                logger.warning("Aucun produit trouv√© dans SAP")
                return []
                
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des produits: {str(e)}")
            # Retourner une liste d'exemple en cas d'erreur
            return [
                {"code": "PROD001", "name": "Imprimante Laser Pro", "price": 299.99, "currency": "EUR", "stock": 25, "category": "Imprimantes", "discount_threshold": 10},
                {"code": "PROD002", "name": "Scanner Document Plus", "price": 199.99, "currency": "EUR", "stock": 15, "category": "Scanners", "discount_threshold": 5},
                {"code": "PROD003", "name": "Cartouche Encre XL", "price": 49.99, "currency": "EUR", "stock": 100, "category": "Consommables", "discount_threshold": 20, "promotion": True}
            ]
    
    async def _build_product_quantity_response(self, client_info: Dict[str, Any], selected_products: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Construit une r√©ponse pour demander les quantit√©s avec suggestions de remises et promotions"""
        
        products_with_suggestions = []
        total_savings_potential = 0
        
        for product in selected_products:
            product_code = product.get("code", "")
            product_name = product.get("name", product_code)
            price = product.get("price", 0)
            discount_threshold = product.get("discount_threshold", 50)
            promotion = product.get("promotion", False)
            
            # Calculer les suggestions de quantit√©
            suggestions = {
                "recommended_quantities": [1, 5, 10, discount_threshold] if discount_threshold > 10 else [1, 5, 10],
                "discount_info": {
                    "threshold": discount_threshold,
                    "discount_rate": 0.15 if discount_threshold <= 20 else 0.10,  # 15% pour petites quantit√©s, 10% pour grandes
                    "savings_per_unit": price * (0.15 if discount_threshold <= 20 else 0.10)
                },
                "promotion": {
                    "active": promotion,
                    "description": f"Promotion sp√©ciale sur {product_name}" if promotion else None,
                    "additional_discount": 0.05 if promotion else 0  # 5% suppl√©mentaire
                }
            }
            
            # Chercher des produits alternatifs
            alternatives = await self._find_product_alternatives(product)
            
            product_info = {
                "code": product_code,
                "name": product_name,
                "price": price,
                "currency": product.get("currency", "EUR"),
                "stock": product.get("stock", 0),
                "suggestions": suggestions,
                "alternatives": alternatives
            }
            
            products_with_suggestions.append(product_info)
            
            # Calculer le potentiel d'√©conomies
            if discount_threshold <= 50:
                potential_savings = price * discount_threshold * suggestions["discount_info"]["discount_rate"]
                total_savings_potential += potential_savings
        
        client_name = client_info.get("name", "votre client")
        
        message = f"üéØ **Excellent ! Devis pour {client_name}**\n\n" + \
                 f"Maintenant, pr√©cisons les quantit√©s pour chaque produit. Je vais vous donner des conseils sur les remises disponibles :"
        
        quick_actions = [
            {
                "action": "auto_quantities",
                "label": "‚ú® Quantit√©s optimales",
                "type": "primary",
                "description": f"Appliquer les quantit√©s recommand√©es (potentiel d'√©conomies: {total_savings_potential:.2f}‚Ç¨)"
            },
            {
                "action": "manual_quantities",
                "label": "‚úèÔ∏è Saisir manuellement",
                "type": "secondary",
                "description": "D√©finir les quantit√©s une par une"
            },
            {
                "action": "add_more_products",
                "label": "‚ûï Ajouter d'autres produits",
                "type": "secondary",
                "description": "Compl√©ter la s√©lection"
            }
        ]
        
        return {
            "success": False,
            "workflow_status": "configuring_quantities",
            "message": message,
            "client_info": client_info,
            "products_details": products_with_suggestions,
            "savings_potential": total_savings_potential,
            "quick_actions": quick_actions,
            "suggestions": {
                "tips": [
                    f"Commandez {products_with_suggestions[0]['suggestions']['discount_info']['threshold']} unit√©s ou plus pour b√©n√©ficier de remises",
                    "Certains produits ont des promotions en cours",
                    "Je peux vous proposer des alternatives avec un meilleur rapport qualit√©-prix"
                ]
            }
        }
    
    async def _search_products_with_validation(self, products: List[Dict]) -> Dict[str, Any]:
        """Recherche produits avec gestion des alternatives"""
        
        self._track_step_start("search_products", f"üîç Recherche de {len(products)} produit(s)")
        
        results = []
        requires_validation = False
        
        for i, product in enumerate(products):
            product_name = product.get("name", "")
            product_code = product.get("code", "")
            quantity = product.get("quantity", 1)
            
            self._track_step_progress("product_search_progress", 
                                    int((i / len(products)) * 100), 
                                    f"Recherche: {product_name}")
            
            # Rechercher dans SAP
            sap_results = await self.mcp_connector.search_sap_items(product_name, product_code)
            
            exact_matches = []
            fuzzy_matches = []
            
            for result in sap_results.get("results", []):
                name_similarity = self._calculate_similarity(product_name, result.get("ItemName", ""))
                code_similarity = self._calculate_similarity(product_code, result.get("ItemCode", "")) if product_code else 0
                
                max_similarity = max(name_similarity, code_similarity)
                
                if max_similarity >= 0.9:
                    exact_matches.append({"data": result, "similarity": max_similarity})
                elif max_similarity >= 0.6:
                    fuzzy_matches.append({"data": result, "similarity": max_similarity})
            
            if exact_matches:
                # Produit trouv√©
                best_match = max(exact_matches, key=lambda x: x["similarity"])
                results.append({
                    "original": product,
                    "found": True,
                    "product_data": best_match["data"],
                    "quantity": quantity,
                    "status": "found"
                })
            elif fuzzy_matches:
                # Alternatives trouv√©es
                results.append({
                    "original": product,
                    "found": False,
                    "alternatives": fuzzy_matches,
                    "quantity": quantity,
                    "status": "alternatives_available"
                })
                requires_validation = True
            else:
                # Aucun produit trouv√©
                results.append({
                    "original": product,
                    "found": False,
                    "alternatives": [],
                    "quantity": quantity,
                    "status": "not_found"
                })
        
        self._track_step_complete("product_search_progress", "Recherche termin√©e")
        
        if requires_validation:
            self._track_step_start("product_alternatives", "üîÑ Alternatives produits trouv√©es")
            self._track_step_start("product_validation", "‚è≥ S√©lection utilisateur requise")
            
            validation_data = {
                "products": results,
                "message": "S√©lectionnez les produits appropri√©s"
            }

            self.current_task.require_user_validation("product_validation", "product_selection", validation_data)

            try:
                await websocket_manager.send_user_interaction_required(self.task_id, {
                    "type": "product_selection",
                    "message": "Certains produits n√©cessitent votre attention",
                    "data": validation_data
                })
            except Exception as ws_error:
                logger.warning(f"‚ö†Ô∏è Erreur envoi WebSocket (non bloquant): {ws_error}")
            
            return {
                "found": False,
                "requires_validation": True,
                "validation_type": "product_selection",
                "results": results
            }
        else:
            # Tous les produits trouv√©s
            found_products = [r for r in results if r["found"]]
            self._track_step_complete("search_products", f"‚úÖ {len(found_products)} produit(s) trouv√©(s)")
            
            return {
                "found": True,
                "products": found_products
            }
    
    async def _find_product_alternatives(self, product: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Trouve des produits alternatifs avec avantages/inconv√©nients"""
        try:
            product_category = product.get("category", "")
            product_price = product.get("price", 0)
            
            # Simuler la recherche d'alternatives (en r√©alit√©, cela ferait appel √† SAP)
            alternatives = []
            
            # Exemple d'alternatives bas√©es sur la cat√©gorie
            if "Imprimante" in product.get("name", ""):
                alternatives = [
                    {
                        "code": "PROD001B",
                        "name": "Imprimante Laser Pro V2",
                        "price": product_price * 1.2,
                        "advantages": ["Vitesse d'impression sup√©rieure (+30%)", "Garantie √©tendue 3 ans"],
                        "disadvantages": ["Prix plus √©lev√©", "Consommation √©nerg√©tique sup√©rieure"],
                        "recommendation": "Recommand√© pour usage intensif"
                    },
                    {
                        "code": "PROD001C",
                        "name": "Imprimante Laser Eco",
                        "price": product_price * 0.8,
                        "advantages": ["Prix attractif", "Faible consommation", "Compact"],
                        "disadvantages": ["Vitesse r√©duite (-20%)", "Capacit√© papier limit√©e"],
                        "recommendation": "Id√©al pour usage occasionnel"
                    }
                ]
            
            return alternatives[:2]  # Limiter √† 2 alternatives
            
        except Exception as e:
            logger.error(f"Erreur lors de la recherche d'alternatives: {str(e)}")
            return []
    
    async def _handle_product_search(self, extracted_info: Dict[str, Any]) -> Dict[str, Any]:
        """
        G√®re les demandes de recherche de produits par caract√©ristiques
        """
        logger.info("üîç Traitement demande de recherche produit")
        
        search_criteria = extracted_info.get("search_criteria", {})
        if not search_criteria:
            return {
                "success": False,
                "message": "Crit√®res de recherche non sp√©cifi√©s",
                "action_type": "RECHERCHE_PRODUIT",
                "suggestion": "Exemple: 'Je cherche une imprimante laser recto-verso r√©seau 50 ppm'"
            }
        
        # Utiliser le moteur de recherche
        search_engine = ProductSearchEngine()
        
        results = await search_engine.search_products_by_characteristics(search_criteria)
        
        if results.get("success"):
            return {
                "success": True,
                "action_type": "RECHERCHE_PRODUIT",
                "message": f"üéØ {results['total_found']} produit(s) trouv√©(s)",
                "search_criteria": search_criteria,
                "products": results["matched_products"],
                "quick_actions": [
                    {
                        "action": "create_quote",
                        "label": "üìã Cr√©er un devis",
                        "type": "primary",
                        "description": "Cr√©er un devis avec un de ces produits"
                    },
                    {
                        "action": "refine_search",
                        "label": "üîç Affiner la recherche",
                        "type": "secondary", 
                        "description": "Pr√©ciser les crit√®res"
                    }
                ]
            }
        else:
            return {
                "success": False,
                "action_type": "RECHERCHE_PRODUIT",
                "message": "‚ùå Aucun produit trouv√© avec ces crit√®res",
                "error": results.get("error"),
                "search_criteria": search_criteria,
                "suggestions": [
                    "Essayez des termes plus g√©n√©raux",
                    "V√©rifiez l'orthographe des caract√©ristiques",
                    "Contactez le support pour des produits sp√©cifiques"
                ]
            }

    async def _handle_client_info(self, extracted_info: Dict[str, Any]) -> Dict[str, Any]:
        """
        G√®re les demandes d'information client
        """
        logger.info("üë§ Traitement demande d'information client")
        
        client_name = extracted_info.get("client")
        if not client_name:
            return {
                "success": False,
                "action_type": "INFO_CLIENT",
                "message": "Nom du client non sp√©cifi√©",
                "suggestion": "Exemple: 'Informations sur le client Edge Communications'"
            }
        
        # Rechercher le client dans Salesforce
        client_info = await self._validate_client(client_name)
        
        if client_info.get("found"):
            client_data = client_info["data"]
            return {
                "success": True,
                "action_type": "INFO_CLIENT",
                "message": f"‚ÑπÔ∏è Informations pour {client_data.get('Name')}",
                "client": {
                    "name": client_data.get("Name"),
                    "account_number": client_data.get("AccountNumber"),
                    "phone": client_data.get("Phone"),
                    "email": client_data.get("Email"),
                    "address": f"{client_data.get('BillingStreet', '')} {client_data.get('BillingCity', '')}",
                    "salesforce_id": client_data.get("Id")
                },
                "quick_actions": [
                    {
                        "action": "create_quote_for_client",
                        "label": "üìã Cr√©er un devis",
                        "type": "primary",
                        "description": f"Nouveau devis pour {client_data.get('Name')}"
                    }
                ]
            }
        else:
            return {
                "success": False,
                "action_type": "INFO_CLIENT",
                "message": f"‚ùå Client '{client_name}' non trouv√©",
                "suggestions": client_info.get("suggestions", []),
                "quick_actions": [
                    {
                        "action": "create_client",
                        "label": "‚ûï Cr√©er ce client",
                        "type": "secondary",
                        "description": f"Ajouter '{client_name}' comme nouveau client"
                    }
                ]
            }

    async def _handle_stock_consultation(self, extracted_info: Dict[str, Any]) -> Dict[str, Any]:
        """
        G√®re les demandes de consultation de stock
        """
        logger.info("üì¶ Traitement demande de consultation stock")
        
        # √Ä impl√©menter selon vos besoins
        return {
            "success": True,
            "action_type": "CONSULTATION_STOCK",
            "message": "üöß Fonction en cours de d√©veloppement",
            "suggestion": "Utilisez la recherche de produits pour voir les stocks"
        }

    async def _handle_other_request(self, extracted_info: Dict[str, Any]) -> Dict[str, Any]:
        """
        G√®re les autres types de demandes
        """
        logger.info("‚ùì Traitement autre demande")
        
        return {
            "success": False,
            "action_type": "AUTRE",
            "message": "ü§î Je n'ai pas compris votre demande",
            "extracted_info": extracted_info,
            "suggestions": [
                "G√©n√©rer un devis: 'faire un devis pour [client] avec [produits]'",
                "Rechercher un produit: 'je cherche une imprimante laser recto-verso'",
                "Consulter un client: 'informations sur le client [nom]'"
            ]
        }
    
    async def _handle_client_selection(self, user_input: Dict, context: Dict) -> Dict[str, Any]:
        """üîß G√®re la s√©lection de client par l'utilisateur avec continuation workflow"""
        try:
            action = user_input.get("action")

            if action == "select_existing":
                # Initialisation des variables n√©cessaires
                selected_client_data = user_input.get("selected_data")
                client_name = context.get("original_client_name", "")

                # R√©cup√©rer le code SAP depuis selected_data
                if selected_client_data and isinstance(selected_client_data, dict) and selected_client_data.get("sap_code"):
                    self.context["client_sap_code"] = selected_client_data["sap_code"]
                    logger.info(f"‚úÖ Code SAP r√©cup√©r√© depuis client s√©lectionn√©: {selected_client_data['sap_code']}")

                # R√©cup√©rer aussi depuis selected_client si selected_data manque
                if not selected_client_data:
                    alt = user_input.get("selected_client")
                    if alt and isinstance(alt, dict):
                        selected_client_data = alt

                # Pr√©server/compl√©ter les donn√©es Salesforce si pr√©sentes
                if selected_client_data and isinstance(selected_client_data, dict) and selected_client_data.get("sf_id"):
                    sf_id = selected_client_data.get("sf_id")
                    if sf_id and not selected_client_data.get("Id"):
                        try:
                            sf_query = (
                                "SELECT Id, Name, AccountNumber, Phone, BillingStreet, "
                                "BillingCity, BillingPostalCode, BillingCountry "
                                f"FROM Account WHERE Id = '{sf_id}'"
                            )
                            sf_result = await self.mcp_connector.call_mcp(
                                "salesforce_mcp", "salesforce_query", {"query": sf_query}
                            )
                            if sf_result.get("totalSize", 0) > 0:
                                sf_data = sf_result["records"][0]
                                if isinstance(sf_data, dict):
                                    selected_client_data.update(sf_data)
                                    logger.info(f"‚úÖ Donn√©es Salesforce r√©cup√©r√©es pour {sf_data.get('Name')}")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Erreur r√©cup√©ration donn√©es SF: {str(e)}")

                if selected_client_data and isinstance(selected_client_data, dict):
                    # Mettre √† jour avec le nom r√©el depuis les donn√©es
                    client_name = (
                        selected_client_data.get("Name")
                        or selected_client_data.get("name")
                        or selected_client_data.get("CardName")
                        or client_name
                    )
                    try:
                        await self.cache_manager.cache_client(client_name, selected_client_data)
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Cache client √©chou√©: {e}")
                else:
                    logger.warning("‚ö†Ô∏è selected_data manquant - utilisation nom par d√©faut")

                # Mise √† jour du contexte (unique source de v√©rit√©)
                self.context["client_info"] = {"data": selected_client_data, "found": bool(selected_client_data)}
                self.context["client_validated"] = True  # (d√©dupliqu√©)

                # Sauvegarder le contexte dans la t√¢che
                self._save_context_to_task()

                # Persistance compl√©mentaire
                self.context["validated_client"] = selected_client_data
                self.context["selected_client"] = selected_client_data

                # Sauvegarder dans la t√¢che si disponible
                if getattr(self, "current_task", None):
                    if not hasattr(self.current_task, "context") or not isinstance(self.current_task.context, dict):
                        self.current_task.context = {}
                    self.current_task.context["client_info"] = {"data": selected_client_data, "found": bool(selected_client_data)}
                    logger.info("‚úÖ Client info sauvegard√© dans la t√¢che")

                # Affichage : prot√©ger si selected_client_data est None
                if isinstance(selected_client_data, dict):
                    client_display_name = (
                        selected_client_data.get("Name")
                        or selected_client_data.get("CardName")
                        or client_name
                        or "Client sans nom"
                    )
                else:
                    client_display_name = client_name or "Client sans nom"
                # R√©cup√©rer original_extracted_info depuis le contexte ou interaction_data
                original_extracted_info = context.get("workflow_context", {}).get("extracted_info", {})
                if not original_extracted_info:
                    original_extracted_info = context.get("original_context", {}).get("extracted_info", {})
                if not original_extracted_info and hasattr(self, 'context'):
                    original_extracted_info = self.context.get("extracted_info", {})
                    
                # Fallback si toujours pas trouv√©
                if not original_extracted_info:
                    original_extracted_info = {}
                    logger.warning("‚ö†Ô∏è original_extracted_info vide - utilisation fallback")
                self.context["selected_client_display"] = client_display_name
                logger.info(f"‚úÖ Client s√©lectionn√©: {client_display_name}")

                # Poursuite du workflow
                workflow_ctx = context.get("workflow_context", {}) or {}
                extracted_info = (workflow_ctx.get("extracted_info") or {}) if isinstance(workflow_ctx, dict) else {}

                # R√©cup√©rer les produits depuis le contexte ou depuis la t√¢che
                original_products = (extracted_info.get("products") or []) if isinstance(extracted_info, dict) else []
                # CORRECTION: R√©cup√©rer les produits depuis extracted_info du contexte
                if not original_products and hasattr(self, 'context') and self.context.get('extracted_info'):
                    original_products = self.context.get('extracted_info', {}).get('products', [])
                    logger.info(f"üîÑ Produits r√©cup√©r√©s depuis contexte: {len(original_products)} produit(s)")
                # Si pas de produits dans le contexte, essayer de les r√©cup√©rer depuis la t√¢che
                if not original_products and getattr(self, "current_task", None):
                    validation_data = getattr(self.current_task, "validation_data", None)
                    if isinstance(validation_data, dict):
                        client_validation = validation_data.get("client_selection", {}) or {}
                        original_context = client_validation.get("original_context", {}) or {}
                        original_products = (original_context.get("extracted_info", {}) or {}).get("products", []) or []
                        logger.info(f"üîç Produits r√©cup√©r√©s depuis validation_data de la t√¢che: {len(original_products)} produit(s)")

                # CORRECTION: V√©rifier doublons APR√àS s√©lection client mais AVANT produits
                logger.info("üîç === D√âBUT V√âRIFICATION DOUBLONS APR√àS S√âLECTION CLIENT ===")
                duplicate_check = await self._check_duplicate_quotes(
                    {"data": selected_client_data, "found": True, "name": client_display_name},
                    original_products
                )
                self.context["duplicate_check"] = duplicate_check

                # Si doublons trouv√©s ET n√©cessite une d√©cision utilisateur
                if duplicate_check.get("requires_user_decision"):
                    logger.warning(f"‚ö†Ô∏è DOUBLONS D√âTECT√âS - Interaction utilisateur requise")
                    
                    duplicate_interaction_data = {
                        "type": "duplicate_resolution",
                        "interaction_type": "duplicate_resolution",
                        "client_name": client_display_name,
                        "alert_message": duplicate_check.get("alert_message"),
                        "recent_quotes": duplicate_check.get("recent_quotes", []),
                        "draft_quotes": duplicate_check.get("draft_quotes", []),
                        "similar_quotes": duplicate_check.get("similar_quotes", []),
                        "extracted_info": original_extracted_info,
                        "options": [
                            {"value": "proceed", "label": "Cr√©er un nouveau devis malgr√© les doublons"},
                            {"value": "consolidate", "label": "Consolider avec un devis existant"},
                            {"value": "review", "label": "Examiner les devis existants d'abord"},
                            {"value": "cancel", "label": "Annuler la demande"}
                        ],
                        "input_type": "choice"
                    }
                    
                    # Marquer la t√¢che en attente d'interaction
                    if self.current_task:
                        from services.progress_tracker import TaskStatus
                        self.current_task.status = TaskStatus.PENDING
                        self.current_task.require_user_validation(
                            "duplicate_resolution",
                            "duplicate_resolution", 
                            duplicate_interaction_data
                        )
                    
                    # Envoyer via WebSocket
                    try:
                        from services.websocket_manager import websocket_manager
                        await websocket_manager.send_user_interaction_required(
                            self.task_id,
                            duplicate_interaction_data
                        )
                        logger.info("‚úÖ Alerte de doublon envoy√©e via WebSocket")
                        
                        return {
                            "success": True,
                            "status": "user_interaction_required", 
                            "type": "duplicate_resolution",
                            "message": duplicate_check.get("alert_message"),
                            "task_id": self.task_id,
                            "interaction_data": duplicate_interaction_data
                        }
                    except Exception as ws_error:
                        logger.warning(f"‚ö†Ô∏è Erreur envoi WebSocket alerte doublon: {ws_error}")

                # Si pas de doublons ou utilisateur veut continuer
                if original_products:
                    
                    self._track_step_start("lookup_products", f"üì¶ Recherche de {len(original_products)} produit(s)")
                    await self._process_products_retrieval(original_products)

                    # R√©cup√©rer extracted_info depuis le contexte de la t√¢che
                    extracted_info = self.context.get("extracted_info", {})
                    original_extracted_info = extracted_info  # D√©finir la variable avant utilisation
                    
                    # Si extracted_info disponible, continuer le workflow
                    if isinstance(extracted_info, dict) and extracted_info:
                        return await self._continue_workflow_after_client_selection(
                            selected_client_data, {"extracted_info": extracted_info}
                        )
                    elif isinstance(original_extracted_info, dict) and original_extracted_info:
                        return await self._continue_workflow_after_client_selection(
                            selected_client_data, {"extracted_info": original_extracted_info}
                        )
                    elif isinstance(extracted_info, dict) and extracted_info:
                        return await self._process_quote_workflow(extracted_info)

                    else:
                        # Fallback minimal si aucun extracted_info complet
                        return await self._continue_workflow_after_client_selection(
                            selected_client_data, {"extracted_info": {"products": original_products}}
                        )

                return self._build_error_response("Workflow incomplet", "Produits manquants pour continuer")

            elif action == "create_new":
                client_name = user_input.get("client_name", context.get("original_client_name", ""))
                # CORRECTION: Appeler directement _handle_new_client_creation avec le contexte workflow
                workflow_context = context.get("workflow_context", {})
                return await self._handle_new_client_creation(client_name, workflow_context)

            elif action == "cancel":
                return {"status": "cancelled", "message": "Demande de devis annul√©e par l'utilisateur"}

            else:
                return self._build_error_response("Action non reconnue", f"Action: {action}")

        except Exception as e:
            logger.exception(f"Erreur _handle_client_selection: {e}")
            return self._build_error_response("Erreur s√©lection client", str(e))

    async def _handle_new_client_creation(self, client_name: str, workflow_context: Dict) -> Dict:
        """
        üîß CR√âATION CLIENT PUIS CONTINUATION WORKFLOW
        """
        # CORRECTION: Validation et cr√©ation du client avec workflow continuation
        try:
            self._track_step_start("client_creation", f"Cr√©ation du client: {client_name}")
            
            validation_result = await self.client_validator.validate_and_enrich_client(client_name)
            
            if validation_result.get("can_create"):
                # Cr√©er dans Salesforce puis SAP
                self._track_step_progress("client_creation", 30, "Cr√©ation Salesforce...")
                sf_client = await self._create_salesforce_client(validation_result)
                
                self._track_step_progress("client_creation", 60, "Cr√©ation SAP...")
                sap_client = await self._create_sap_client_from_validation(validation_result, sf_client)
                
                # Mettre √† jour le contexte
                self.context.update({
                    "client_info": {"data": sf_client, "found": True},
                    "client_validated": True,
                    "client_sap_code": sf_client.get("sap_code", "")
                })
                
                self._track_step_complete("client_creation", f"Client cr√©√©: {sf_client.get('Name', client_name)}")
                
                # CORRECTION: Continuer le workflow avec les produits
                original_products = workflow_context.get("extracted_info", {}).get("products", [])
                if original_products:
                    self._track_step_start("product_validation", "Validation des produits...")
                    return await self._get_products_info(original_products)
                else:
                    # Pas de produits dans le contexte - demander √† l'utilisateur
                    return self._build_product_request_response(sf_client.get("Name", client_name))
            
            else:
                self._track_step_fail("client_creation", "Impossible de cr√©er le client", validation_result.get("error", ""))
                return self._build_error_response("Impossible de cr√©er le client", validation_result.get("error", ""))
        
        except Exception as e:
            logger.exception(f"Erreur cr√©ation client {client_name}: {e}")
            self._track_step_fail("client_creation", "Erreur cr√©ation client", str(e))
            return self._build_error_response("Erreur cr√©ation client", str(e))
        
    async def _initiate_client_creation(self, client_name: str) -> Dict[str, Any]:
        """
        CORRECTION: M√©thode manquante pour initier la cr√©ation client
        """
        try:
            logger.info(f"Initiation cr√©ation client: {client_name}")
            
            # R√©cup√©rer le contexte workflow complet depuis la t√¢che
            if self.task_id:
                task = progress_tracker.get_task(self.task_id)
                if task and hasattr(task, 'context'):
                    workflow_context = task.context
                else:
                    workflow_context = {"extracted_info": {"products": []}}
            else:
                workflow_context = {"extracted_info": {"products": []}}
            
            return await self._handle_new_client_creation(client_name, workflow_context)
            
        except Exception as e:
            logger.exception(f"Erreur initiation cr√©ation client {client_name}: {e}")
            return self._build_error_response("Erreur initiation cr√©ation client", str(e))
    async def _continue_workflow_after_client_selection(self, client_data: Dict, original_context: Dict) -> Dict:
        """
        üîß CONTINUATION AUTOMATIQUE DU WORKFLOW APR√àS S√âLECTION CLIENT
        """
        logger.info("üîÑ Continuation du workflow avec client s√©lectionn√©")
        
        # Mettre √† jour le contexte avec le client valid√©
        self.context["client_info"] = {"data": client_data, "found": True}
        self.context["client_validated"] = True
        
        # R√©cup√©rer les produits de la demande originale
        original_products = original_context.get("extracted_info", {}).get("products", [])
        
        if original_products:
            # Passer √† la recherche et validation des produits
            self._track_step_start("lookup_products", f"üì¶ Recherche de {len(original_products)} produit(s)")
            products_result = await self._process_products_retrieval(original_products)
            
            # V√©rifier si s√©lection produits requise
            if products_result.get("status") == "product_selection_required":
                logger.info("‚ö†Ô∏è S√©lection produits requise apr√®s s√©lection client")
                # Envoyer l'interaction WebSocket
                await self._send_product_selection_interaction(products_result.get("products", []))
                return products_result
                
            # Si produits valid√©s, continuer vers g√©n√©ration devis
            return await self._continue_quote_generation(products_result)
        else:
            # Si pas de produits, demander √† l'utilisateur
            return self._build_product_selection_interface(client_data.get("Name", ""))
    def _generate_client_efficiency_tip(self, searched_name: str, found_client: Dict) -> str:
        """G√©n√®re des conseils d'efficacit√© pour l'utilisateur"""
        tips = []
        # Conseil sp√©cifique si plusieurs clients avec noms similaires
        if "group" in searched_name.lower() or "groupe" in searched_name.lower():
            tips.append(f"üí° Astuce : Utilisez 'Group' ou 'Groupe' pour distinguer les filiales (ex: '{searched_name.replace('Group', '').strip()}' vs '{searched_name}')")
        elif len(searched_name.split()) == 1:
            # Client simple, v√©rifier s'il existe une version Group
            tips.append(f"üí° Astuce : Si vous cherchez une filiale, essayez '{searched_name} Group' ou '{searched_name} Groupe'")
        # Conseil sur la ville
        client_city = (found_client.get("BillingCity") or 
                      found_client.get("City") or 
                      found_client.get("Address", "").split(",")[-1].strip())
        if client_city and len(client_city) > 2:
            tips.append(f"üí° Pour √™tre plus efficace, pr√©cisez la ville : '{searched_name} {client_city}'")
        
        # Conseil sur le code client
        client_code = found_client.get("AccountNumber") or found_client.get("CardCode")
        if client_code:
            tips.append(f"üí° Vous pouvez aussi utiliser le code client : '{client_code}'")
        
        # Conseil g√©n√©ral
        if not tips:
            tips.append("üí° Pour gagner du temps, pr√©cisez la ville ou le secteur d'activit√© du client")
        
        return " ‚Ä¢ ".join(tips[:2])  # Maximum 2 conseils

    async def _get_products_info_with_auto_selection(self, products: List[Dict[str, Any]]) -> Dict[str, Any]:
        """R√©cup√©ration des produits avec auto-s√©lection intelligente"""
        try:
            if not products:
                return {
                    "status": "success",
                    "products": [],
                    "message": "Aucun produit √† traiter"
                }

            self._track_step_progress("get_products_info", 10, f"üîç Recherche de {len(products)} produit(s)...")

            validated_products = []
            products_found = []
            products_needing_selection = []
            products_needing_interaction = []
            auto_selected_count = 0

            for i, product in enumerate(products):
                product_name = product.get("name", "")
                product_code = product.get("code", "")
                quantity = product.get("quantity", 1)
                progress = int(20 + (i / len(products)) * 60)
                # Progression
                self._track_step_progress("get_products_info", progress,
                                        f"üì¶ Recherche '{product_name}' ({i+1}/{len(products)})")

                # Recherche du produit avec m√©thode existante
                single_product_list = [{
                    "name": product_name,
                    "code": product_code,
                    "quantity": quantity
                }]
                
                # Utiliser _process_products_retrieval qui existe
                # Initialiser le r√©sultat du produit
                product_result = {"found": False, "suggestions": [], "error": None}
                search_result = await self._process_products_retrieval(single_product_list)
                found_products = search_result.get("products", [])
                
                if found_products and len(found_products) == 1:
                    # Un seul produit trouv√© - Auto-s√©lection
                    validated_products.append(found_products[0])
                    auto_selected_count += 1
                    # Restaure la tra√ßabilit√© sans alourdir
                    code = (found_products[0].get("code") if isinstance(found_products[0], dict) else None) or product_code
                    logger.info(f"‚úÖ Produit auto-s√©lectionn√©: {code}")

                elif found_products and len(found_products) > 1:
                    # Plusieurs produits trouv√©s - Demande s√©lection
                    options = found_products[:5]
                    products_needing_selection.append({
                        "original_name": product_name,
                        "original_code": product_code,               # r√©introduit (utile pour la suite)
                        "quantity": quantity,
                        "options": options,
                        "search_method": "intelligent_local",        # r√©introduit (diagnostic/UX)
                        "selection_reason": (
                            f"Terme '{product_name}' trop g√©n√©rique - {len(found_products)} produits correspondent"
                        ),
                        "multiple_matches": True                     # r√©introduit (signal explicite)
                    })
                    logger.info(f"‚ö†Ô∏è {len(found_products)} options pour '{product_name}' - S√©lection requise")

                else:
                    # Produit non trouv√©
                    product_result = {
                        "found": False,
                        "suggestions": [],
                        "error": "Produit non trouv√©"
                    }
                    products_needing_interaction.append({
                        "original": product,
                        "suggestions": [],
                        "efficiency_tip": self._generate_product_efficiency_tip(product_code, product_name)
                    })
                if product_result.get("found"):
                    # Produit trouv√© directement
                    validated_products.append({
                        "found": True,
                        "data": product_result["data"],
                        "quantity": quantity,
                        "auto_selected": True
                    })
                    logger.info(f"‚úÖ Produit auto-s√©lectionn√©: {product_code}")
                                                            
            # Traitement des r√©sultats
            if not products_needing_interaction:
                # Tous les produits auto-s√©lectionn√©s
                efficiency_tip = f"‚ú® {auto_selected_count} produit(s) automatiquement identifi√©(s) ! Pour plus d'efficacit√©, utilisez les codes de r√©f√©rence pr√©cis."

                try:
                    await websocket_manager.send_task_update(self.task_id, {
                        "type": "auto_selection",
                        "step": "products_auto_selected",
                        "message": f"‚úÖ {auto_selected_count} produit(s) automatiquement s√©lectionn√©(s)",
                        "efficiency_tip": efficiency_tip,
                        "show_tip": True
                    })
                except Exception as ws_error:
                    logger.warning(f"‚ö†Ô∏è Erreur envoi WebSocket (non bloquant): {ws_error}")
                
                self.context["products_info"] = [p["data"] for p in validated_products]
                self._track_step_complete("get_products_info", f"{len(validated_products)} produit(s) valid√©(s)")
                
                # Continuer vers la g√©n√©ration du devis
                # V√©rifier si des produits n√©cessitent s√©lection
                if products_needing_selection:
                    logger.info(f"‚ö†Ô∏è {len(products_needing_selection)} produit(s) n√©cessite(nt) s√©lection")
                    await self._send_product_selection_interaction(products_needing_selection)
                    return {
                        "status": "product_selection_required",
                        "products": products_needing_selection,
                        "task_id": self.task_id,
                        "message": f"{len(products_needing_selection)} produit(s) n√©cessite(nt) votre s√©lection"
                    }
                
                # Si tous les produits sont valid√©s, continuer
                # Transformer les produits valid√©s en format attendu par _continue_quote_generation
                products_for_generation = {"products": [p.get("data", p) for p in validated_products]}
                return await self._continue_quote_generation(products_for_generation)
                
            else:
                # Certains produits n√©cessitent une interaction
                logger.info(f"‚ö†Ô∏è {len(products_needing_interaction)} produit(s) n√©cessite(nt) s√©lection utilisateur")
                await self._send_product_selection_interaction(products_needing_interaction)
                return {
                    "status": "user_interaction_required",
                    "interaction_type": "product_selection", 
                    "products": products_needing_interaction,
                    "task_id": self.task_id,
                    "message": f"{len(products_needing_interaction)} produit(s) n√©cessite(nt) votre s√©lection"
                }
        except asyncio.CancelledError:
            logger.warning("‚ö†Ô∏è Recherche produits interrompue")
            return {"error": "Recherche interrompue", "cancelled": True}        
        except Exception as e:
            logger.exception(f"Erreur _get_products_info_with_auto_selection: {e}")
            return self._build_error_response("Erreur validation produits", str(e))

    def _generate_product_efficiency_tip(self, product_code: str, product_name: str) -> str:
        """G√©n√®re des conseils d'efficacit√© pour les produits"""
        tips = []
        
        # Conseil sur les codes de r√©f√©rence
        if not product_code or len(product_code) < 3:
            tips.append("üí° Utilisez le code de r√©f√©rence exact pour une recherche plus rapide")
        
        # Conseil sur les caract√©ristiques
        generic_terms = ["imprimante", "ordinateur", "√©cran", "scanner"]
        if any(term in product_name.lower() for term in generic_terms):
            tips.append("üí° Pr√©cisez le mod√®le, la marque ou les caract√©ristiques (ex: 'HP LaserJet', 'A4 couleur')")
        
        # Conseil g√©n√©ral
        if not tips:
            tips.append("üí° Plus vous pr√©cisez le produit, plus la recherche sera efficace")
        
        return tips[0] if tips else ""

    async def _handle_mixed_product_validation(self, validated_products: List, products_needing_interaction: List) -> Dict:
        """G√®re le cas mixte : certains produits auto-s√©lectionn√©s, d'autres n√©cessitent interaction"""
        
        first_unresolved = products_needing_interaction[0]
        product_suggestions = first_unresolved["suggestions"]
        efficiency_tip = first_unresolved["efficiency_tip"]
        
        # Pr√©parer les options pour l'utilisateur
        options = []
        for i, suggestion in enumerate(product_suggestions[:5], 1):
            options.append({
                "id": suggestion.get("ItemCode", f"option_{i}"),
                "label": f"{suggestion.get('ItemName', 'N/A')} (Ref: {suggestion.get('ItemCode', 'N/A')})",
                "value": suggestion.get("ItemCode"),
                "data": suggestion
            })
        
        # Pr√©parer la validation pour l'interaction utilisateur
        validation_data = {
            "type": "product_selection",
            "interaction_type": "product_selection", 
            "product": first_unresolved["original"],
            "options": options,
            "validated_products": validated_products,
            "remaining_products": products_needing_interaction[1:],
            "efficiency_tip": efficiency_tip,
            "message": f"S√©lectionnez le produit pour '{first_unresolved['original'].get('name', '')}'",
            "show_tip": True
        }
        
        # Marquer la t√¢che en attente d'interaction
        if self.current_task:
            self.current_task.status = TaskStatus.PENDING
            self.current_task.require_user_validation("product_selection", "product_selection", validation_data)
        
        # Envoyer via WebSocket
        try:
            await websocket_manager.send_user_interaction_required(self.task_id, validation_data)
        except Exception as ws_error:
            logger.warning(f"‚ö†Ô∏è Erreur envoi WebSocket (non bloquant): {ws_error}")
        
        return {
            "success": True,
            "status": "user_interaction_required",
            "type": "product_selection",
            "message": "S√©lection de produit requise",
            "task_id": self.task_id,
            "interaction_data": validation_data
        }
    # üÜï M√âTHODES AUXILIAIRES POUR LA VALIDATION S√âQUENTIELLE
    async def _send_product_selection_interaction(self, products_needing_selection: List[Dict]) -> None:
        """Envoie l'interaction de s√©lection de produits via WebSocket"""
        try:
            
            interaction_data = {
                "type": "product_selection",
                "interaction_type": "product_selection",
                "products_needing_selection": products_needing_selection,
                "message": f"{len(products_needing_selection)} produits n√©cessitent votre s√©lection",
                "options": []
            }
            
            for product_info in products_needing_selection:
                interaction_data["options"].append({
                    "name": product_info.get("original_name"),
                    "quantity": product_info.get("quantity"),
                    "choices": [{
                        **option,
                        "Price": option.get("Price") or option.get("AvgPrice") or self._estimate_product_price(option.get("ItemName", "")),
                        "display_price": f"{option.get('Price') or option.get('AvgPrice') or self._estimate_product_price(option.get('ItemName', ''))}‚Ç¨"
                    } for option in product_info.get("options", [])]
                })
            
            # Stocker les donn√©es d'interaction dans la t√¢che pour r√©cup√©ration ult√©rieure
            task = progress_tracker.get_task(self.task_id)
            if task:
                task.interaction_data = interaction_data
                logger.info(f"üì¶ Donn√©es d'interaction stock√©es avec quantit√©s")

            await websocket_manager.send_user_interaction_required(self.task_id, interaction_data)
            logger.info(f"‚úÖ Interaction produit envoy√©e pour {len(products_needing_selection)} produits")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur envoi interaction produit: {e}")
    async def _initiate_client_creation(self, client_name: str) -> Dict[str, Any]:
        """Initie le processus de cr√©ation d'un nouveau client"""
        return {
            "status": "user_interaction_required",
            "interaction_type": "client_creation",
            "message": f"Le client '{client_name}' n'existe pas. Voulez-vous le cr√©er ?",
            "question": "Cr√©er un nouveau client ?",
            "options": [
                {"value": "create_client", "label": "Oui, cr√©er le client"},
                {"value": "retry_client", "label": "Non, saisir un autre nom"}
            ],
            "input_type": "choice",
            "context": {"client_name": client_name}
        }

    async def _continue_product_validation(self, products: List[Dict]) -> Dict[str, Any]:
        """Continue la validation avec les produits"""
        try:
            # Utiliser le validateur s√©quentiel pour valider les produits
            extracted_info = {"products": products}
            validation_result = await self.sequential_validator.validate_quote_request(extracted_info)

            if validation_result["status"] == "ready":
                return await self._continue_quote_generation(validation_result["data"])
            else:
                return validation_result

        except Exception as e:
            logger.exception(f"Erreur validation produits: {str(e)}")
            return self._build_error_response("Erreur validation produits", str(e))

    async def _parallel_client_product_search(self, client_name: str, products: List[Dict]) -> Dict[str, Any]:
        """Recherche parall√®le client et produits pour optimiser les performances"""
        try:
            logger.info(f"üöÄ Recherche parall√®le - Client: {client_name}, Produits: {len(products)}")

            # Notification d√©but recherche parall√®le
            await self._notify_websocket("parallel_search_started", {
                "client_query": client_name,
                "product_count": len(products),
                "message": "Recherche parall√®le client et produits..."
            })

            # Cr√©er les t√¢ches parall√®les
            client_task = asyncio.create_task(
                self._search_client_parallel(client_name)
            )
            products_task = asyncio.create_task(
                self._search_products_parallel(products)
            )

            # Ex√©cution parall√®le avec gestion d'exceptions
            client_result, products_result = await asyncio.gather(
                client_task, products_task, return_exceptions=True
            )

            # Gestion des erreurs de t√¢ches
            if isinstance(client_result, Exception):
                logger.error(f"‚ùå Erreur recherche client parall√®le: {client_result}")
                client_result = {"found": False, "error": str(client_result)}

            if isinstance(products_result, Exception):
                logger.error(f"‚ùå Erreur recherche produits parall√®le: {products_result}")
                products_result = {"status": "error", "products": [], "error": str(products_result)}

            # Traitement des r√©sultats
            return await self._process_parallel_results(client_result, products_result)

        except Exception as e:
            logger.exception(f"‚ùå Erreur recherche parall√®le: {e}")
            # Fallback vers m√©thode s√©quentielle
            return {"status": "fallback_to_sequential", "error": str(e)}

    async def _search_client_parallel(self, client_name: str) -> Dict[str, Any]:
        """Recherche client optimis√©e pour parall√©lisation"""
        try:
            # Utiliser la logique existante sans les track_step qui sont s√©quentiels
            return await self._process_client_validation(client_name)
        except Exception as e:
            logger.error(f"‚ùå Erreur recherche client: {e}")
            return {"found": False, "error": str(e)}

    async def _search_products_parallel(self, products: List[Dict]) -> Dict[str, Any]:
        """Recherche produits optimis√©e pour parall√©lisation"""
        try:
            # Utiliser la logique existante sans les track_step
            return await self._process_products_retrieval(products)
        except Exception as e:
            logger.error(f"‚ùå Erreur recherche produits: {e}")
            return {"status": "error", "products": [], "error": str(e)}

    async def _process_parallel_results(self, client_result: Dict, products_result: Dict) -> Dict[str, Any]:
        """Traite les r√©sultats de la recherche parall√®le"""
        try:
            # V√©rifier si interactions utilisateur requises
            interactions_needed = []

            # Client n√©cessite interaction
            if client_result.get("status") == "user_interaction_required":
                interactions_needed.append({
                    "type": "client_selection",
                    "data": client_result
                })

            # Produits n√©cessitent interaction
            if products_result.get("status") == "product_selection_required":
                interactions_needed.append({
                    "type": "product_selection",
                    "data": products_result
                })

            # Si interactions requises, prioriser client puis produits
            if interactions_needed:
                # Retourner la premi√®re interaction (client prioritaire)
                first_interaction = interactions_needed[0]

                # Stocker les autres interactions pour plus tard
                if len(interactions_needed) > 1:
                    self.context["pending_interactions"] = interactions_needed[1:]

                return first_interaction["data"]

            # Si tout est valid√©, continuer vers g√©n√©ration
            if (client_result.get("found") and
                products_result.get("status") == "success"):

                # Mettre √† jour le contexte
                self.context["client_info"] = client_result
                self.context["products_info"] = products_result.get("products", [])

                logger.info("‚úÖ Recherche parall√®le r√©ussie - Passage √† la g√©n√©ration")
                return await self._continue_quote_generation({
                    "client": client_result,
                    "products": products_result.get("products", [])
                })

            # Cas d'erreur mixte
            errors = []
            if not client_result.get("found"):
                errors.append(f"Client non trouv√©: {client_result.get('error', 'N/A')}")
            if products_result.get("status") != "success":
                errors.append(f"Produits non trouv√©s: {products_result.get('error', 'N/A')}")

            return {
                "status": "error",
                "message": "Erreurs lors de la recherche parall√®le",
                "errors": errors
            }

        except Exception as e:
            logger.exception(f"‚ùå Erreur traitement r√©sultats parall√®les: {e}")
            return {
                "status": "error",
                "message": "Erreur traitement r√©sultats parall√®les",
                "error": str(e)
            }

    async def _continue_product_resolution(self, validated_products: List[Dict], remaining_products: List[Dict]) -> Dict[str, Any]:
        """Continue la r√©solution des produits restants"""
        try:
            # Traiter le prochain produit non r√©solu
            next_product = remaining_products[0]

            return {
                "status": "user_interaction_required",
                "interaction_type": "product_selection",
                "message": f"S√©lectionnez le produit pour '{next_product.get('original_request', '')}'",
                "question": "Quel produit souhaitez-vous ?",
                "options": next_product.get("suggestions", []),
                "input_type": "product_choice",
                "context": {
                    "validation_context": {
                        "validated_products": validated_products,
                        "unresolved_products": remaining_products
                    }
                }
            }

        except Exception as e:
            logger.exception(f"Erreur r√©solution produits: {str(e)}")
            return self._build_error_response("Erreur r√©solution produits", str(e))

    async def _continue_quantity_validation(self, validated_products: List[Dict]) -> Dict[str, Any]:
        """Continue avec la validation des quantit√©s"""
        try:
            # V√©rifier la disponibilit√© des stocks
            final_products = []
            stock_issues = []

            for product in validated_products:
                product_data = product.get("product_data", {})
                requested_qty = product.get("requested_quantity", 1)
                available_stock = product_data.get("Stock", 0)

                if available_stock >= requested_qty:
                    final_products.append({
                        **product_data,
                        "RequestedQuantity": requested_qty,
                        "LineTotal": product_data.get("Price", 0) * requested_qty
                    })
                else:
                    stock_issues.append({
                        "product": product_data.get("Name", "Produit inconnu"),
                        "requested": requested_qty,
                        "available": available_stock
                    })

            if stock_issues:
                return {
                    "status": "user_interaction_required",
                    "interaction_type": "quantity_adjustment",
                    "message": "Probl√®mes de stock d√©tect√©s",
                    "question": "Comment souhaitez-vous proc√©der ?",
                    "stock_issues": stock_issues,
                    "options": [
                        {"value": "proceed", "label": "Continuer avec les quantit√©s disponibles"},
                        {"value": "modify", "label": "Modifier les quantit√©s"},
                        {"value": "cancel", "label": "Annuler la demande"}
                    ],
                    "input_type": "choice",
                    "context": {"final_products": final_products}
                }
            else:
                # Pas de probl√®me de stock, continuer
                return await self._continue_quote_generation({"products": final_products})

        except Exception as e:
            logger.exception(f"Erreur validation quantit√©s: {str(e)}")
            return self._build_error_response("Erreur validation quantit√©s", str(e))

    # üîß NOUVELLES ROUTES FASTAPI OPTIMIS√âES

    # Cr√©er un routeur pour les nouvelles routes
    router_v2 = APIRouter()

    @router_v2.post("/generate_quote_v2")  # Nouvelle version optimis√©e
    async def generate_quote_optimized(request: dict):
        """
        Route optimis√©e avec validation s√©quentielle et cache
        """

        try:
            user_prompt = request.get("prompt", "").strip()
            draft_mode = request.get("draft_mode", False)

            if not user_prompt:
                raise HTTPException(status_code=400, detail="Prompt requis")

            # Initialiser le workflow optimis√©
            workflow = DevisWorkflow(validation_enabled=True, draft_mode=draft_mode)

            # Lancer le processus
            result = await workflow.process_quote_request(user_prompt, draft_mode)

            return {
                "success": True,
                "data": result,
                "performance": {
                    "cache_stats": await workflow.cache_manager.get_cache_stats(),
                    "timestamp": datetime.now().isoformat()
                }
            }

        except Exception as e:
            logger.exception(f"Erreur route generate_quote_v2: {str(e)}")
            raise HTTPException(status_code=500, detail=str(e))

    @router_v2.post("/continue_quote")
    async def continue_quote_after_interaction(request: dict):
        """
        Continue le workflow apr√®s interaction utilisateur
        """
        try:
            task_id = request.get("task_id")
            user_input = request.get("user_input", {})
            context = request.get("context", {})

            if not task_id:
                raise HTTPException(status_code=400, detail="task_id requis")

            # R√©cup√©rer l'instance workflow depuis le cache
            workflow_data = await cache_manager.get_workflow_state(task_id)
            if not workflow_data:
                raise HTTPException(status_code=404, detail="Workflow expir√©")

            # Recr√©er l'instance et restaurer le contexte
            workflow = DevisWorkflow()
            workflow.task_id = task_id
            workflow.context = workflow_data.get("context", {})

            # Continuer le workflow avec le contexte restaur√©
            result = await workflow.continue_after_user_input(user_input, workflow.context)

            # Sauvegarder l'√©tat mis √† jour
            await cache_manager.save_workflow_state(task_id, {
                "context": workflow.context,
                "last_update": datetime.now().isoformat()
            })

            return {"success": True, "data": result}

        except HTTPException:
            # R√©√©lever les erreurs HTTP
            raise
        except Exception as e:
            logger.exception(f"Erreur continue_quote: {e}")
            raise HTTPException(status_code=500, detail="Erreur interne")

    async def _process_quote_workflow(self, extracted_info: Dict[str, Any]) -> Dict[str, Any]:
        """
        üîß REFONTE : Workflow de devis avec gestion d'interruption client et statuts critiques
        """
        try:
            # 0) Entr√©es extraites du prompt
            client_name = extracted_info.get("client", "")
            products = extracted_info.get("products", [])
            # IMPORTANT: Sauvegarder extracted_info dans le contexte pour que _process_client_validation puisse y acc√©der
            self.context["extracted_info"] = extracted_info
            logger.info(f"‚úÖ Contexte initialis√© avec extracted_info - client: {client_name}, produits: {len(products)}")
            # NOUVEAU : V√©rifier si recherche parall√®le a d√©j√† eu lieu
            if not hasattr(self, '_parallel_search_done'):
                parallel_search_result = await self._parallel_client_product_search(client_name, products)
                self._parallel_search_done = True
                # Si interactions requises, s'arr√™ter ici
                if parallel_search_result.get("status") in ["user_interaction_required", "product_selection_required"]:
                    return parallel_search_result
                # Si erreur, fallback vers s√©quentiel
                if parallel_search_result.get("status") == "fallback_to_sequential":
                    logger.warning("‚ö†Ô∏è Fallback vers recherche s√©quentielle")
                else:
                    # Recherche parall√®le r√©ussie, continuer directement √† la g√©n√©ration
                    if parallel_search_result.get("status") not in ["error"]:
                        return parallel_search_result
            # Fallback s√©quentiel si parall√®le a √©chou√©
            # √âtape 1 : recherche/validation du client
            self._track_step_start("search_client", f"üë§ Recherche du client : {client_name}")
            client_result = await self._process_client_validation(client_name)
            # üîí Garde-fous
            if client_result is None:
                logger.error("‚ùå _process_client_validation a retourn√© None")
                return {
                    "success": False,
                    "status": "error",
                    "message": "Erreur lors de la validation du client",
                    "error": "client_validation_failed"
                }
            # ‚è∏Ô∏è Cas d'interaction utilisateur requise (s√©lection client)
            if client_result.get("status") in ["user_interaction_required", "client_selection_required"]:
                # R√©cup√©rer des options client de mani√®re robuste
                interaction_data = client_result.get("interaction_data") or client_result
                client_options = (
                    interaction_data.get("client_options")
                    or interaction_data.get("options")
                    or interaction_data.get("clients")
                    or []
                )
                # Construire la validation_data ENRICHIE avec le contexte initial (client + produits)
                validation_data = {
                    "options": client_options,
                    "clients": client_options,
                    "client_options": client_options,
                    "total_options": len(client_options),
                    "original_client_name": client_name,
                    "allow_create_new": True,
                    "interaction_type": "client_selection",
                    "original_context": {
                        "extracted_info": {
                            "client": client_name,
                            "products": products
                        }
                    }
                }
                # Marquer la t√¢che et enregistrer l'attente d'interaction
                if self.current_task:
                    # üîë Un SEUL appel, avec le contexte complet
                    self.current_task.require_user_validation("client_selection", "client_selection", validation_data)
                # Logs de debug utiles
                if not client_options:
                    logger.error("‚ùå ERREUR: Pas de client_options dans validation_data")
                    logger.error(f"‚ùå Structure envoy√©e: {json.dumps(validation_data, indent=2, default=str)}")
                else:
                    logger.info(f"‚úÖ {len(client_options)} clients pr√™ts pour s√©lection")
                # Retour standardis√© pour le front
                return {
                    "success": True,
                    "status": "user_interaction_required",
                    "type": "client_selection",
                    "message": "S√©lection du client requise",
                    "task_id": self.task_id,
                    "interaction_data": validation_data
                }
            # üîß Statuts bloquants
            if client_result.get("status") in ["error", "cancelled"]:
                logger.warning(f"‚ùå Workflow interrompu - Statut client : {client_result.get('status')}")
                return client_result
            self._track_step_complete("search_client", f"‚úÖ Client : {client_result.get('status')}")
            # CORRECTION CRITIQUE: V√©rification doublons IMM√âDIATEMENT apr√®s validation du client
            self._track_step_start("check_duplicates", "üîç V√©rification des doublons...")
            
            # Utiliser le client du contexte si disponible (pour apr√®s s√©lection)
            client_info_for_duplicates = client_result
            if self.context.get("client_validated") and self.context.get("client_info"):
                logger.info("üîÑ Utilisation du client du contexte (post-s√©lection)")
                client_info_for_duplicates = self.context["client_info"]
            
            duplicate_check = await self._check_duplicate_quotes(
                client_info=client_info_for_duplicates,
                products=products
            )
            
            self.context["duplicate_check"] = duplicate_check
            
            # Si doublons trouv√©s ET n√©cessite une d√©cision utilisateur
            if duplicate_check.get("requires_user_decision"):
                client_name_for_alert = (
                    client_info_for_duplicates.get("data", {}).get("Name") or 
                    client_info_for_duplicates.get("name") or 
                    client_name
                )
                
                self._track_step_progress("check_duplicates", 90, duplicate_check.get("alert_message", "Doublons d√©tect√©s"))
                
                duplicate_interaction_data = {
                    "type": "duplicate_resolution",
                    "interaction_type": "duplicate_resolution",
                    "client_name": client_name_for_alert,
                    "alert_message": duplicate_check.get("alert_message"),
                    "recent_quotes": duplicate_check.get("recent_quotes", []),
                    "draft_quotes": duplicate_check.get("draft_quotes", []),
                    "similar_quotes": duplicate_check.get("similar_quotes", []),
                    "extracted_info": extracted_info,
                    "options": [
                        {"value": "proceed", "label": "Cr√©er un nouveau devis malgr√© les doublons"},
                        {"value": "consolidate", "label": "Consolider avec un devis existant"},
                        {"value": "review", "label": "Examiner les devis existants d'abord"},
                        {"value": "cancel", "label": "Annuler la demande"}
                    ],
                    "input_type": "choice"
                }
                
                # Marquer la t√¢che en attente d'interaction
                if self.current_task:
                    from services.progress_tracker import TaskStatus
                    self.current_task.status = TaskStatus.PENDING
                    self.current_task.require_user_validation(
                        "duplicate_resolution",
                        "duplicate_resolution",
                        duplicate_interaction_data
                    )
                
                # Envoyer via WebSocket
                try:
                    from services.websocket_manager import websocket_manager
                    await websocket_manager.send_user_interaction_required(
                        self.task_id,
                        duplicate_interaction_data
                    )
                    logger.info("‚úÖ Alerte de doublon envoy√©e via WebSocket")
                except Exception as ws_error:
                    logger.warning(f"‚ö†Ô∏è Erreur envoi WebSocket alerte doublon: {ws_error}")
                
                return {
                    "success": True,
                    "status": "user_interaction_required",
                    "type": "duplicate_resolution",
                    "message": duplicate_check.get("alert_message"),
                    "task_id": self.task_id,
                    "interaction_data": duplicate_interaction_data
                }
            
            # Si doublons d√©tect√©s mais sans interaction requise, continuer avec warning
            if duplicate_check.get("duplicates_found"):
                logger.warning(f"‚ö†Ô∏è {len(duplicate_check.get('warnings', []))} doublons d√©tect√©s - Continuation du workflow")
            else:
                logger.info("‚úÖ Aucun doublon d√©tect√©")
            
            self._track_step_complete("check_duplicates", "‚úÖ V√©rification doublons termin√©e")            
            # √âtape 2 : r√©cup√©ration des produits
            self._track_step_start("lookup_products", f"üì¶ Recherche de {len(products)} produit(s)")
            products_result = await self._process_products_retrieval(products) or {}
            if not isinstance(products_result, dict):
                logger.error("‚ùå _process_products_retrieval a retourn√© un type invalide")
                products_result = {"status": "error", "products": []}
            # V√âRIFICATION CRITIQUE : Arr√™ter le workflow si s√©lection de produits requise
            if products_result.get("status") == "product_selection_required":
                # Envoyer l'interaction WebSocket avant de s'arr√™ter
                try:
                    await self._send_product_selection_interaction(products_result.get("products", []))
                except Exception as ws_error:
                    logger.warning(f"‚ö†Ô∏è Erreur envoi WebSocket interaction produits: {ws_error}")
                logger.warning("‚ö†Ô∏è S√©lection de produits requise - Arr√™t du workflow")
                self._track_step_fail("lookup_products", "Produits non trouv√©s", "S√©lection manuelle requise")
                return {
                    "success": False,
                    "status": "user_interaction_required",
                    "interaction_type": "product_selection",
                    "message": products_result.get("message", "S√©lection de produits requise"),
                    "products_info": products_result.get("products", []),
                    "task_id": self.task_id
                }

            # V√©rification des produits valides AVANT cr√©ation du devis
            raw_products = products_result.get("products", []) if isinstance(products_result.get("products", []), list) else []
            valid_products = [p for p in raw_products if not p.get("error") and not p.get("requires_manual_search")]
            if not valid_products:
                error_msg = "Aucun produit valide trouv√© dans le catalogue SAP"
                if raw_products:
                    errors = [p.get("error", "Produit non trouv√©") for p in raw_products if p.get("error")]
                    if errors:
                        error_msg = f"Erreurs produits: {'; '.join(set(errors))}"
                logger.error(f"‚ùå {error_msg}")
                self._track_step_fail("lookup_products", "Produits invalides", error_msg)
                return {"success": False, "error": error_msg, "status": "product_error"}
            found = len(valid_products)  # Utiliser les produits r√©ellement valides
            self._track_step_complete("lookup_products", f"‚úÖ {found} produit(s) trouv√©(s)")
            # √âtape 3 : pr√©paration et pr√©visualisation du devis
            self._track_step_start("prepare_quote", "üìã Pr√©paration du devis")
            quote_preview = await self._prepare_quote_preview(client_result, products_result)
            self._track_step_complete("prepare_quote", "‚úÖ Devis pr√©par√©")
            
            # Demander validation utilisateur avant cr√©ation
            if not quote_preview.get("error"):
                validation_data = {
                    "type": "quote_validation",
                    "interaction_type": "quote_validation",
                    "quote_preview": quote_preview,
                    "client_info": client_info,
                    "products": valid_products,  # ‚úÖ uniquement valides
                    "message": "Veuillez valider le devis avant cr√©ation",
                    "total_amount": quote_preview.get("total_amount", 0),
                    "currency": quote_preview.get("currency", "EUR")
                }
                if self.current_task:
                    self.current_task.status = TaskStatus.PENDING
                    self.current_task.require_user_validation("quote_validation", "quote_validation", validation_data)
                try:
                    await websocket_manager.send_user_interaction_required(self.task_id, validation_data)
                except Exception as ws_error:
                    logger.warning(f"‚ö†Ô∏è Erreur envoi WebSocket (non bloquant): {ws_error}")
                return {
                    "success": True,
                    "status": "user_interaction_required",
                    "type": "quote_validation",
                    "message": "Validation du devis requise",
                    "task_id": self.task_id,
                    "interaction_data": validation_data
                }

            self._track_step_start("create_quote", "üßæ Cr√©ation du devis")
            quote_result = await self._create_quote_document(client_result, products_result)
            if not isinstance(quote_result, dict):
                logger.error("‚ùå _create_quote_document a retourn√© un r√©sultat invalide")
                quote_result = {"status": "error", "quote_data": {}}
            # Extraction s√©curis√©e de quote_data
            quote_data = quote_result.get("quote_data") or {}
            returned_products = quote_data.get("products") or valid_products  # Utiliser produits valides uniquement
            if not returned_products:
                logger.warning("‚ùå Aucun produit valide pour le devis")
                return {"success": False, "error": "Aucun produit valide trouv√©"}
            # √âtape 4 : synchronisation dans les syst√®mes externes (SAP / Salesforce)
            self._track_step_start("sync_external_systems", "üíæ Synchronisation SAP & Salesforce")
            sync_results = {}
            for system in ("sap", "salesforce"):
                key = f"sync_to_{system}"
                self._track_step_start(key, f"{'üíæ' if system=='sap' else '‚òÅÔ∏è'} Enregistrement dans {system.upper()}")
                # Ajouter simulation temporelle m√™me en mode draft
                if getattr(self, "draft_mode", False):
                    logger.info(f"üéØ MODE DRAFT - Simulation synchronisation {system.upper()}")
                    await asyncio.sleep(0.5)  # Simulation r√©aliste
                    result = {"status": "success", "simulated": True, "message": f"Simulation {system} r√©ussie"}
                else:
                    result = await self._sync_quote_to_systems(quote_result, target=system)
                # V√©rifier le r√©sultat avant de marquer comme termin√©
                if result.get("status") == "success":
                    self._track_step_complete(key, f"‚úÖ {system.upper()} mis √† jour")
                else:
                    error_msg = result.get("message", f"Erreur {system}")
                    self._track_step_fail(key, f"‚ùå Erreur {system.upper()}", error_msg)
                sync_results[system] = result
            # Total
            total_amount = sum(p.get("total_price", 0) for p in returned_products)
            # R√©sultat final
            return {
                "success": True,
                "status": quote_result.get("status", "success"),
                "type": "quote_generated",
                "message": "‚úÖ Devis g√©n√©r√© avec succ√®s !",
                "task_id": self.task_id,
                "workflow_steps": getattr(self, "workflow_steps", []),
                "quote_id": quote_data.get("quote_id", ""),
                "client": quote_data.get("client", client_result.get("client_data", {})),
                "products": returned_products,
                "total_amount": total_amount,
                "currency": quote_data.get("currency", "EUR"),
                "quote_data": quote_data,
                "client_result": client_result,
                "products_result": products_result,
                "sync_results": sync_results
            }
        except HTTPException:
            # R√©√©lever les erreurs HTTP
            raise
        except Exception as e:
            logger.exception(f"Erreur _process_quote_workflow: {e}")
            return {
                "success": False,
                "status": "error",
                "message": "Erreur interne pendant le workflow de devis",
                "error": str(e)
            }

    async def _prepare_quote_preview(self, client_result: Dict[str, Any], products_result: Dict[str, Any]) -> Dict[str, Any]:
        """Pr√©pare l'aper√ßu du devis pour validation utilisateur"""
        try:
            from datetime import datetime, timedelta
            
            client_data = client_result.get("data", {})
            products = products_result.get("products", [])
            
            # Calculer totaux
            subtotal = sum(p.get("total_price", 0) for p in products if p.get("found"))
            tax_rate = 0.196  # TVA 19.6%
            tax_amount = subtotal * tax_rate
            total_amount = subtotal + tax_amount
            
            # Formatage des produits pour aper√ßu
            formatted_products = []
            for product in products:
                if product.get("found") and product.get("data"):
                    product_data = product["data"]
                    formatted_products.append({
                        "code": product_data.get("ItemCode", ""),
                        "name": product_data.get("ItemName", ""),
                        "quantity": product.get("quantity", 1),
                        "unit_price": product.get("unit_price", 0),
                        "total_price": product.get("total_price", 0),
                        "stock": product_data.get("OnHand", 0)
                    })

            preview = {
                "client_name": client_data.get("CardName") or client_data.get("Name", ""),
                "client_code": client_data.get("CardCode") or client_data.get("AccountNumber", ""),
                "products": formatted_products,
                "subtotal": subtotal,
                "tax_rate": tax_rate,
                "tax_amount": tax_amount,
                "total_amount": total_amount,
                "currency": "EUR",
                "doc_date": datetime.now().strftime("%Y-%m-%d"),
                "due_date": (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")
            }
            
            logger.info(f"üìã Aper√ßu devis pr√©par√© - Total: {total_amount}‚Ç¨")
            return preview
            
        except Exception as e:
            logger.error(f"‚ùå Erreur pr√©paration aper√ßu devis: {str(e)}")
            return {"error": str(e)}


    async def _process_other_action(self, extracted_info: Dict[str, Any]) -> Dict[str, Any]:
        """
        üîß MODIFICATION : Traitement des autres types d'actions
        """
        action_type = extracted_info.get("action_type", "UNKNOWN")

        return {
            "status": "success",
            "type": "other_action",
            "message": f"Action {action_type} trait√©e",
            "data": extracted_info
        }

    # üîß NOUVELLE M√âTHODE : Version publique pour les tests
    async def test_connections(self) -> bool:
        """
        üîß NOUVELLE M√âTHODE : Version publique de _check_connections pour les tests
        """
        return await self._check_connections()

    async def _check_connections(self) -> bool:
        """
        üîß MODIFICATION CRITIQUE : V√©rifier les connexions avec progression avanc√©e
        """
        try:
            self._track_step_progress("validate_input", 10, "üîç Initialisation des tests...")

            # Ex√©cuter les tests de connexion avec progression int√©gr√©e
            connection_results = await test_mcp_connections_with_progress()

            # Analyser les r√©sultats
            overall_status = connection_results.get("overall_status", "unknown")
            connections = connection_results.get("connections", {})

            sf_connected = connections.get("salesforce", {}).get("connected", False)
            sap_connected = connections.get("sap", {}).get("connected", False)

            # D√©terminer le message de statut
            if overall_status == "all_connected":
                status_msg = "‚úÖ Toutes les connexions valid√©es"
                connections_ok = True
            elif overall_status == "partial_connection":
                status_msg = f"‚ö†Ô∏è Connexions partielles (SF: {'‚úÖ' if sf_connected else '‚ùå'}, SAP: {'‚úÖ' if sap_connected else '‚ùå'})"
                connections_ok = self.force_production  # Continuer si mode production forc√©
            else:
                status_msg = "‚ùå Aucune connexion disponible"
                connections_ok = False

            self._track_step_progress("validate_input", 100, status_msg)

            # Log d√©taill√©
            logger.info(f"üîß Test connexions termin√© - Statut: {overall_status}")
            logger.info(f"üîß SF: {sf_connected}, SAP: {sap_connected}, Force Production: {self.force_production}")

            # En mode production forc√©, continuer m√™me avec des connexions partielles
            if self.force_production and not connections_ok:
                logger.warning("üî• MODE PRODUCTION FORC√â - Continuation malgr√© les erreurs de connexion")
                connections_ok = True
                self._track_step_progress("validate_input", 100, "üî• Mode production forc√© - Continuation")

            return connections_ok

        except Exception as e:
            logger.error(f"‚ùå Erreur v√©rification connexions: {str(e)}")
            self._track_step_progress("validate_input", 100, f"‚ùå Erreur: {str(e)}")

            # En mode production forc√©, continuer m√™me en cas d'erreur
            if self.force_production:
                logger.warning("üî• MODE PRODUCTION FORC√â - Continuation malgr√© l'erreur")
                return True

            return False
    
    async def _search_client_with_validation(self, client_name: str) -> Dict[str, Any]:
        """Recherche client avec gestion des alternatives et validation"""
        
        # √âtape 1: Recherche directe
        self._track_step_start("search_client", f"üîç Recherche du client '{client_name}'")
        
        # NOUVEAU: Utiliser find_client_everywhere pour recherche exhaustive
        self._track_step_progress("search_client", 30, "Recherche exhaustive dans toutes les bases...")
        client_search_result = await find_client_everywhere(client_name)
        
        self._track_step_complete("client_search_progress", "Bases de donn√©es consult√©es")
        
        # NOUVEAU: Analyser les r√©sultats de find_client_everywhere
        total_found = client_search_result.get("total_found", 0)
        logger.info(f"üîç Recherche exhaustive termin√©e: {total_found} client(s) trouv√©(s)")
        
        if total_found > 0:
            # CLIENT(S) TROUV√â(S) - Proposer s√©lection utilisateur
            self._track_step_complete("search_client", f"‚úÖ {total_found} client(s) trouv√©(s) pour '{client_name}'")
            return await self._propose_existing_clients_selection(client_name, client_search_result)

        else:
            # AUCUN CLIENT TROUV√â - V√©rifier une derni√®re fois avant cr√©ation
            logger.info(f"‚ùå Aucun client trouv√© pour '{client_name}' - Proposition de cr√©ation")
            self._track_step_start("client_alternatives", "‚ùå Aucun client trouv√©")
            
            # Rechercher des informations INSEE/Pappers
            enrichment_data = await self._search_company_info(client_name)
            
            self._track_step_start("client_validation", "‚è≥ Cr√©ation de client requise")
            
            validation_data = {
                "client_name": client_name,
                "enrichment_data": enrichment_data,
                "options": [
                    {"id": "create_new", "label": "Cr√©er ce nouveau client"},
                    {"id": "retry_search", "label": "Rechercher avec un autre nom"}
                ]
            }
            
            self.current_task.require_user_validation("client_validation", "client_creation", validation_data)
            
            # D√âSACTIV√â - Retour synchrone utilis√©
            # await websocket_manager.send_user_interaction_required(
            #     self.task_id, 
            #     selection_result
            # )
            
            return {
                "found": False,
                "requires_validation": True,
                "validation_type": "client_creation",
                "enrichment_data": enrichment_data
            }
    def _sanitize_soql_string(self, value: str) -> str:
        return value.replace("'", "\\'")
    

    async def _propose_existing_clients_selection(self, client_name: str, search_results: Dict[str, Any]) -> Dict[str, Any]:
        """Propose la s√©lection du client avec interface utilisateur - AM√âLIOR√â"""
        try:
            option_id = 1
            client_options: List[Dict[str, Any]] = []

            # Sources
            deduplicated_clients = search_results.get("deduplicated_clients", []) or []
            all_sf_clients = search_results.get("salesforce", {}).get("clients", []) or []
            all_sap_clients = search_results.get("sap", {}).get("clients", []) or []

            # 1) Priorit√© aux clients d√©dupliqu√©s si pr√©sents
            if deduplicated_clients:
                logger.info("‚úÖ Utilisation des clients d√©dupliqu√©s")
                for client in deduplicated_clients:
                    if not client:
                        continue
                    source = (client.get("source") or "Unknown").strip()
                    source_raw = source.lower().replace(" & ", "_").replace(" ", "_")
                    client_options.append({
                        "id": option_id,
                        "name": client.get("Name") or client.get("CardName", "Client sans nom"),
                        "source": source,
                        "source_raw": source_raw,
                        "display_detail": f"Client {source}",
                        "sf_id": client.get("Id", ""),
                        "sap_code": client.get("CardCode", ""),
                        "details": self._format_client_details(client, source)
                    })
                    option_id += 1
                logger.info(f"‚úÖ {len(client_options)} options pr√©par√©es (d√©dupliqu√©es)")
                # Si des clients d√©dupliqu√©s existent, ne pas traiter s√©par√©ment SF et SAP
                return await self._finalize_client_selection(client_name, client_options)
            else:
                logger.info("‚ö†Ô∏è Pas de d√©duplication disponible - traitement individuel")

            logger.info(f"üîß Traitement de {len(all_sf_clients)} clients SF + {len(all_sap_clients)} clients SAP")

            # 2) Auto-s√©lection si un seul client au total
            total_clients = len(all_sf_clients) + len(all_sap_clients)
            # V√©rifier si c'est vraiment un client unique ou si la d√©duplication a masqu√© des diff√©rences
            if len(all_sf_clients) + len(all_sap_clients) > 1:
                logger.warning(f"‚ö†Ô∏è D√©duplication suspecte : {len(all_sf_clients)} SF + {len(all_sap_clients)} SAP r√©duits √† 1 client")
                # Forcer l'affichage des options pour les cas ambigus
                if any("group" in (client.get("Name") or client.get("CardName", "")).lower() 
                       for client in all_sf_clients + all_sap_clients):
                    logger.info("üîç Clients avec 'Group' d√©tect√©s - Affichage forc√© des options")
                    # Continuer vers la s√©lection manuelle au lieu de l'auto-s√©lection
                else:
                    single_client = all_sf_clients[0] if all_sf_clients else all_sap_clients[0]
            else:
                single_client = all_sf_clients[0] if all_sf_clients else all_sap_clients[0]
                client_display_name = single_client.get("Name") or single_client.get("CardName", "Client sans nom")
                logger.info(f"‚úÖ Auto-s√©lection client unique: {client_display_name}")

                efficiency_tip = self._generate_client_efficiency_tip(client_name, single_client)

                # Maj contexte
                if hasattr(self, "context") and isinstance(self.context, dict):
                    self.context.update({
                        "client_info": {"data": single_client, "found": True},
                        "client_validated": True,
                        "selected_client_display": client_display_name
                    })
                    # NOUVEAU: Sauvegarder le contexte dans la t√¢che
                    self._save_context_to_task()

                # Produits pour continuation
                products_list: List[Dict[str, Any]] = []
                try:
                    if hasattr(self, "context") and isinstance(self.context, dict):
                        extracted_info = self.context.get("extracted_info") or {}
                        products_list = extracted_info.get("products", []) or []
                except Exception as e:
                    logger.error(f"‚ùå Erreur lors de l'extraction des produits: {e}")
                    products_list = []

                # Continuer si produits connus
                try:
                    await websocket_manager.send_task_update(self.task_id, {
                        "type": "auto_selection",
                        "step": "client_auto_selected",
                        "message": f"‚úÖ Client '{client_display_name}' automatiquement s√©lectionn√©",
                        "efficiency_tip": efficiency_tip,
                        "show_tip": True
                    })
                except Exception as ws_error:
                    logger.warning(f"‚ö†Ô∏è Impossible d'envoyer via WebSocket: {ws_error}")

                if products_list:
                    self._track_step_complete("search_client", f"‚úÖ Client auto-s√©lectionn√©: {client_display_name}")
                    self._track_step_start("lookup_products", f"üì¶ Recherche de {len(products_list)} produit(s)")
                    return await self._continue_workflow_after_client_selection(
                        single_client,
                        {"extracted_info": {"products": products_list}}
                    )
                else:
                    return self._build_product_request_response(client_display_name)

            # 3) Construire options SF
            for sf_client in all_sf_clients:
                if not sf_client:
                    continue
                client_options.append({
                    "id": option_id,
                    "name": sf_client.get("Name", f"Client SF {option_id}"),
                    "source": "Salesforce",
                    "source_raw": "salesforce",
                    "display_detail": "Client Salesforce",
                    "sf_id": sf_client.get("Id", ""),
                    "sap_code": "",
                    "details": {
                        "sf_id": sf_client.get("Id", ""),
                        "sap_code": "",
                        "phone": sf_client.get("Phone"),
                        "address": f"{sf_client.get('BillingStreet', '')}, {sf_client.get('BillingCity', '')}".strip(", "),
                        "city": sf_client.get("BillingCity"),
                        "postal_code": sf_client.get("BillingPostalCode"),
                        "country": sf_client.get("BillingCountry"),
                        "siret": sf_client.get("Sic"),
                        "industry": sf_client.get("Industry", "N/A")
                    }
                })
                option_id += 1

            # 4) Construire options SAP
            for sap_client in all_sap_clients:
                if not sap_client:
                    continue
                client_options.append({
                    "id": option_id,
                    "name": sap_client.get("CardName", f"Client SAP {option_id}"),
                    "source": "SAP",
                    "source_raw": "sap",
                    "display_detail": "Client SAP",
                    "sf_id": "",
                    "sap_code": sap_client.get("CardCode", ""),
                    "details": {
                        "sf_id": "",
                        "sap_code": sap_client.get("CardCode", ""),
                        "phone": sap_client.get("Phone1"),
                        "address": sap_client.get("BillToStreet", "N/A"),
                        "city": sap_client.get("City"),
                        "postal_code": sap_client.get("ZipCode") if "ZipCode" in sap_client else None,
                        "country": sap_client.get("Country") if "Country" in sap_client else None,
                        "siret": sap_client.get("FederalTaxID"),
                        "industry": "N/A"
                    }
                })
                option_id += 1

            # 5) D√©-duplication finale par (sf_id, sap_code, name, source_raw)
            seen: set = set()
            deduped_options: List[Dict[str, Any]] = []
            for opt in client_options:
                key = (opt.get("sf_id", ""), opt.get("sap_code", ""), opt.get("name", ""), opt.get("source_raw", ""))
                if key in seen:
                    continue
                seen.add(key)
                deduped_options.append(opt)
            client_options = deduped_options

            logger.info(f"üîß Pr√©paration de {len(client_options)} options pour s√©lection")

            # 6) Debug contexte (s√©curis√©)
            try:
                import json  # local import pour √©viter d√©pendance globale
                logger.info(f"üîç DEBUG: self.context = {json.dumps(self.context, indent=2, default=str)}")
            except Exception as _:
                logger.info("üîç DEBUG: contexte non s√©rialisable")

            # 7) Produits du contexte
            products_list: List[Dict[str, Any]] = []
            try:
                if hasattr(self, "context") and isinstance(self.context, dict):
                    extracted_info = self.context.get("extracted_info", {}) or {}
                    products_list = extracted_info.get("products", []) or []
                    logger.info(f"üîç DEBUG: Produits extraits = {products_list}")
                else:
                    logger.warning("‚ö†Ô∏è Contexte non initialis√© ou vide")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de l'extraction des produits: {e}")
                products_list = []

            # 8) Validation utilisateur (garde si current_task absent)
            validation_data = {
                "options": client_options,
                "clients": client_options,
                "client_options": client_options,
                "total_options": len(client_options),
                "original_client_name": client_name,
                "allow_create_new": True,
                "interaction_type": "client_selection",
                "original_context": {
                    "extracted_info": {
                        "client": client_name,
                        "products": products_list
                    }
                }
            }
            try:
                if getattr(self, "current_task", None):
                    self.current_task.require_user_validation("client_selection", "client_selection", validation_data)
                else:
                    logger.warning("‚ö†Ô∏è current_task absent: impossible de pousser la validation dans le tracker")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors du require_user_validation: {e}")

            # 9) Emission WebSocket
            interaction_message = {
                "type": "client_selection",
                "interaction_type": "client_selection",
                "options": client_options,
                "clients": client_options,
                "client_options": client_options,
                "total_options": len(client_options),
                "original_client_name": client_name,
                "allow_create_new": True,
                "message": f"S√©lection client requise - {len(client_options)} options disponibles"
            }
            try:
                await websocket_manager.send_user_interaction_required(self.task_id, interaction_message)
                logger.info(f"‚úÖ Message WebSocket envoy√© pour task {self.task_id} avec {len(client_options)} options")
            except Exception as ws_error:
                logger.warning(f"‚ö†Ô∏è Impossible d'envoyer via WebSocket: {ws_error}")

            # 10) Retour API
            return {
                "status": "user_interaction_required",
                "requires_user_selection": True,
                "validation_pending": True,
                "task_id": self.task_id,
                "message": f"S√©lection client requise - {len(client_options)} options disponibles",
                "interaction_type": "client_selection",
                "interaction_data": interaction_message,
                "client_options": client_options,
                "total_options": len(client_options),
                "original_client_name": client_name,
                "allow_create_new": True
            }

        except Exception as e:
            logger.error(f"‚ùå Erreur proposition s√©lection clients: {e}")
            import traceback
            logger.error(f"‚ùå Traceback complet: {traceback.format_exc()}")
            return {"status": "error", "found": False, "error": str(e)}

    async def _finalize_client_selection(self, client_name: str, client_options: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Finalise la s√©lection client avec les options d√©dupliqu√©es uniquement"""
        
        try:
            # Auto-s√©lection si un seul client
            if len(client_options) == 1:
                single_client = client_options[0]
                client_display_name = single_client.get("name", "Client sans nom")
                logger.info(f"‚úÖ Auto-s√©lection client unique: {client_display_name}")
                
                # Mettre √† jour le contexte
                self.context.update({
                    "client_info": {"data": single_client, "found": True},
                    "client_validated": True,
                    "selected_client_display": client_display_name
                })
                
                return {
                    "status": "auto_selected",
                    "client_data": single_client,
                    "message": f"Client unique s√©lectionn√©: {client_display_name}"
                }
            
            # Plusieurs clients - demander s√©lection
            validation_data = {
                "options": client_options,
                "clients": client_options,
                "client_options": client_options,
                "total_options": len(client_options),
                "original_client_name": client_name,
                "allow_create_new": True,
                "interaction_type": "client_selection"
            }
            
            if self.current_task:
                self.current_task.require_user_validation("client_selection", "client_selection", validation_data)
            
            # Pr√©parer le message d'interaction
            interaction_message = {
                "type": "client_selection",
                "interaction_type": "client_selection",
                **validation_data,
                "message": f"S√©lection client requise - {len(client_options)} options disponibles"
            }
            
            # Envoyer via WebSocket
            try:
                await websocket_manager.send_user_interaction_required(self.task_id, interaction_message)
            except Exception as ws_error:
                logger.warning(f"‚ö†Ô∏è Erreur envoi WebSocket (non bloquant): {ws_error}")
            
            return {
                "status": "user_interaction_required",
                "interaction_data": interaction_message,
                "message": f"S√©lection parmi {len(client_options)} options disponibles"
            }
            
        except Exception as e:
            logger.exception(f"Erreur finalisation s√©lection client: {str(e)}")
            return self._build_error_response("Erreur s√©lection client", str(e))


    async def _create_client_automatically(self, client_name: str) -> Dict[str, Any]:
        """
        üÜï NOUVELLE M√âTHODE : Cr√©ation automatique du client dans SAP et Salesforce
        Bas√©e sur l'exemple "rondot" des logs
        """
        try:
            # V√©rifier si d√©j√† en cours de cr√©ation
            creation_key = f"creating_client_{client_name.lower().strip()}"
            if hasattr(self, '_creation_locks') and creation_key in self._creation_locks:
                logger.warning(f"‚ö†Ô∏è Cr√©ation client {client_name} d√©j√† en cours")
                return {"created": False, "error": "Cr√©ation d√©j√† en cours"}
            
            # Verrouiller la cr√©ation
            if not hasattr(self, '_creation_locks'):
                self._creation_locks = set()
            self._creation_locks.add(creation_key)
            
            try:
                logger.info(f"üöÄ D√©but cr√©ation automatique client: {client_name}")


                # 1. G√©n√©ration CardCode unique (√©viter les doublons)
                clean_name = re.sub(r'[^a-zA-Z0-9]', '', client_name)[:6].upper()
                timestamp = str(int(time.time()))[-4:]
                card_code = f"C{clean_name}{timestamp}"

                # 2. Donn√©es client pour SAP
                sap_client_data = {
                    "CardCode": card_code,
                    "CardName": client_name.title(),  # "rondot" -> "Rondot"
                    "CardType": "cCustomer",
                    "GroupCode": 100,  # Groupe client par d√©faut
                    "Currency": "EUR",
                    "Valid": "tYES",
                    "Frozen": "tNO",
                    "Notes": f"Client cr√©√© automatiquement par NOVA le {datetime.now().strftime('%d/%m/%Y')}"
                }

                logger.info(f"üìù Donn√©es SAP pr√©par√©es: {card_code} - {client_name.title()}")

                # 3. Cr√©ation dans SAP d'abord
                self._track_step_progress("search_client", 30, f"Cr√©ation client SAP {card_code}...")
                
                sap_results = await self.mcp_connector.call_mcp(
                    "sap_mcp",
                    "sap_create_customer_complete",
                    {"customer_data": sap_client_data}
                )

                if not sap_results.get("success", False):
                    logger.error(f"‚ùå √âchec cr√©ation SAP: {sap_results.get('error')}")
                    return {
                        "created": False,
                        "error": f"Erreur SAP: {sap_results.get('error', 'Erreur inconnue')}"
                    }

                logger.info(f"‚úÖ Client SAP cr√©√©: {card_code}")

                # 4. Cr√©ation dans Salesforce ensuite
                self._track_step_progress("search_client", 60, f"Cr√©ation client Salesforce...")
                
                sf_client_data = {
                    "Name": client_name.title(),
                    "AccountNumber": card_code,
                    "Type": "Customer",
                    "Industry": "Technology",
                    "BillingCountry": "France",
                    "Description": f"Client cr√©√© automatiquement depuis SAP ({card_code})"
                }

                sf_result = await self.mcp_connector.call_mcp(
                    "salesforce_mcp",
                    "salesforce_create_record",
                    {
                        "sobject": "Account",
                        "data": sf_client_data
                    }
                )

                if sf_result.get("success"):
                    logger.info(f"‚úÖ Client Salesforce cr√©√©: {sf_result.get('id')}")
                    
                    # Construire les donn√©es client pour le workflow
                    client_data = {
                        "Id": sf_result.get("id"),
                        "Name": client_name.title(),
                        "AccountNumber": card_code,
                        "Type": "Customer"
                    }

                    return {
                        "created": True,
                        "client_data": client_data,
                        "sap_card_code": card_code,
                        "salesforce_id": sf_result.get("id"),
                        "message": f"Client '{client_name}' cr√©√© avec succ√®s (SAP: {card_code}, SF: {sf_result.get('id')[:8]}...)"
                    }
                else:
                    logger.warning(f"‚ö†Ô∏è Client SAP cr√©√© mais √©chec Salesforce: {sf_result.get('error')}")
                    
                    # Retourner quand m√™me le client SAP
                    client_data = {
                        "Id": f"SAP_{card_code}",  # ID temporaire
                        "Name": client_name.title(),
                        "AccountNumber": card_code,
                        "Type": "Customer"
                    }

                    return {
                        "created": True,
                        "client_data": client_data,
                        "sap_card_code": card_code,
                        "salesforce_error": sf_result.get("error"),
                        "message": f"Client '{client_name}' cr√©√© dans SAP uniquement (CardCode: {card_code})"
                    }
            except Exception as e:
                logger.exception(f"‚ùå Exception lors de la cr√©ation automatique du client: {e}")
                return {
                    "created": False,
                    "error": f"Exception: {str(e)}"
                }
            finally:
                # Lib√©rer le verrou
                if hasattr(self, '_creation_locks') and creation_key in self._creation_locks:
                    self._creation_locks.remove(creation_key)

        except Exception as e:
            logger.exception(f"‚ùå Exception cr√©ation automatique client (global): {str(e)}")
            return {
                "created": False,
                "error": f"Exception globale: {str(e)}"
            }


    async def _process_client_validation(self, client_name: str) -> Dict[str, Any]:
        """
        Validation compl√®te du client avec recherche Salesforce, fallback SAP et enrichissement.
        üîß CORRIG√â: D√©tection et arr√™t pour interaction utilisateur
        """
        if not client_name or not client_name.strip():
            return {
                "status": "error",
                "data": None,
                "message": "Nom de client vide"
            }

        try:
            safe_client_name = self._sanitize_soql_string(client_name)
            logger.info(f"üîç Recherche approfondie du client: {client_name}")
            
            # Utiliser find_client_everywhere pour recherche exhaustive
            comprehensive_search = await find_client_everywhere(client_name)
            total_found = comprehensive_search.get("total_found", 0)
            
            if total_found > 0:
                logger.info(f"‚úÖ {total_found} client(s) existant(s) trouv√©(s) pour '{client_name}'")
                
                # üîß CORRECTION CRITIQUE: D√©tecter l'interaction utilisateur requise
                selection_result = await self._propose_existing_clients_selection(client_name, comprehensive_search)
                
                
                # Si pas d'interaction requise, continuer normalement
                return selection_result
            # === √âTAPE 1: RECHERCHE EXACTE ===
            exact_query = f"""
                SELECT Id, Name, AccountNumber, Phone, BillingCity, BillingCountry 
                FROM Account 
                WHERE Name = '{safe_client_name}' 
                LIMIT 1
            """
            self._track_step_progress("search_client", 10, f"üîç Recherche exacte de '{client_name}'")
            exact_result = await self.mcp_connector.call_mcp("salesforce_mcp", "salesforce_query", {"query": exact_query})

            if exact_result.get("totalSize", 0) > 0:
                client_data = exact_result["records"][0]
                logger.info(f"‚úÖ Client trouv√© (exact): {client_data['Name']}")
                return {
                    "status": "found",
                    "data": client_data,
                    "message": f"Client trouv√© dans Salesforce (exact)",
                    "source": "salesforce_exact"
                }

            # === √âTAPE 2: INSENSIBLE √Ä LA CASSE ===
            ci_query = f"""
                SELECT Id, Name, AccountNumber, Phone, BillingCity, BillingCountry 
                FROM Account 
                WHERE UPPER(Name) = UPPER('{safe_client_name}') 
                LIMIT 5
            """
            self._track_step_progress("search_client", 20, "üîç Recherche insensible √† la casse")
            ci_result = await self.mcp_connector.call_mcp("salesforce_mcp", "salesforce_query", {"query": ci_query})

            if ci_result.get("totalSize", 0) > 0:
                for record in ci_result["records"]:
                    if record["Name"].upper() == client_name.upper():
                        logger.info(f"‚úÖ Client trouv√© (insensible √† la casse): {record['Name']}")
                        return {
                            "status": "found",
                            "data": record,
                            "message": f"Client trouv√© (insensible √† la casse)",
                            "source": "salesforce_case_insensitive"
                        }

            # === √âTAPE 3: RECHERCHE FLOUE ===
            fuzzy_query = f"""
                SELECT Id, Name, AccountNumber, Phone, BillingCity, BillingCountry 
                FROM Account 
                WHERE Name LIKE '%{safe_client_name}%' 
                LIMIT 10
            """
            self._track_step_progress("search_client", 40, "üîç Recherche floue dans Salesforce")
            fuzzy_result = await self.mcp_connector.call_mcp("salesforce_mcp", "salesforce_query", {"query": fuzzy_query})

            if fuzzy_result.get("totalSize", 0) > 0:
                suggestions = fuzzy_result["records"]
                logger.info(f"üîç {len(suggestions)} suggestions trouv√©es pour '{client_name}'")
                return {
                    "status": "not_found",
                    "suggestions_available": True,
                    "suggestions": suggestions,
                    "message": f"{len(suggestions)} clients similaires trouv√©s dans Salesforce"
                }

            # === √âTAPE 4: RECHERCHE DANS SAP ===
            self._track_step_progress("search_client", 60, "üîç Recherche dans SAP")
            sap_results = await self.mcp_connector.call_mcp("sap_mcp", "sap_search", {
                "query": client_name,
                "entity_type": "BusinessPartners",
                "limit": 5
            })

            if sap_results.get("success") and sap_results.get("count", 0) > 0:
                for sap_client in sap_results.get("results", []):
                    if sap_client.get("CardName", "").upper() == client_name.upper():
                        logger.info(f"‚úÖ Client trouv√© dans SAP: {sap_client['CardName']}")
                        sf_creation = await self._create_salesforce_from_sap(sap_client)
                        if sf_creation.get("success"):
                            return {
                                "status": "found",
                                "data": sf_creation["data"],
                                "message": "Client synchronis√© depuis SAP",
                                "source": "sap_sync"
                            }

            # === √âTAPE 5: ENRICHISSEMENT et D√âDOUBLONNAGE ===
            self._track_step_progress("search_client", 80, "üîç Enrichissement externe")
            enrichment_data = await self._search_company_enrichment(client_name)
            duplicates = await self._check_duplicates_enhanced(client_name, enrichment_data)

            if duplicates.get("has_duplicates"):
                return await self._handle_potential_duplicates(duplicates, client_name)

            # === √âTAPE 6: CR√âATION PROPOS√âE ===
            
            self._track_step_progress("search_client", 95, "‚ö†Ô∏è AUCUN client trouv√© - Validation requise")
            user_approval = await self._request_user_validation_for_client_creation(client_name, enrichment_data)

            if user_approval.get("status") == "approved":
                creation_result = await self._create_client_automatically(client_name)
                if creation_result.get("created"):
                    return {
                        "status": "created",
                        "data": creation_result.get("client_data"),
                        "source": "auto_created",
                        "message": creation_result.get("message"),
                        "auto_created": True
                    }
                else:
                    logger.warning(f"‚ùå Cr√©ation √©chou√©e: {creation_result.get('error')}")
                    return {
                        "status": "not_found",
                        "data": None,
                        "message": f"Cr√©ation √©chou√©e: {creation_result.get('error')}",
                        "search_term": client_name
                    }
            else:
                logger.info(f"‚èπÔ∏è Cr√©ation annul√©e par l'utilisateur")
                return {
                    "status": "cancelled",
                    "data": None,
                    "message": "Cr√©ation annul√©e par l'utilisateur",
                    "search_term": client_name
                }

        except Exception as e:
            logger.exception(f"‚ùå Erreur lors de la validation client {client_name}: {str(e)}")
            return {
                "status": "error",
                "data": None,
                "message": f"Erreur syst√®me: {str(e)}"
            }

    async def _create_salesforce_from_sap(self, sap_data: Dict[str, Any]) -> Dict[str, Any]:
        """Cr√©e un enregistrement Salesforce √† partir des donn√©es SAP"""
        try:
            logger.info("üîÑ Cr√©ation Salesforce depuis donn√©es SAP")
            
            # Mapper les donn√©es SAP vers Salesforce
            sf_data = {
                "Name": sap_data.get("CardName", "Client SAP"),
                "Type": "Customer",
                "AccountNumber": sap_data.get("CardCode", ""),
                "Description": f"Client synchronis√© depuis SAP - CardCode: {sap_data.get('CardCode', '')}",
                "BillingStreet": sap_data.get("BillToStreet", ""),
                "BillingCity": sap_data.get("BillToCity", ""),
                "BillingState": sap_data.get("BillToState", ""),
                "BillingPostalCode": sap_data.get("BillToZipCode", ""),
                "BillingCountry": sap_data.get("BillToCountry", ""),
                "Phone": sap_data.get("Phone1", ""),
                "Fax": sap_data.get("Fax", ""),
                "Website": sap_data.get("Website", ""),
                "Industry": sap_data.get("Industry", "")
            }
            
            # Cr√©er dans Salesforce
            result = await self.mcp_connector.call_salesforce_mcp("salesforce_create_record", {
                "sobject": "Account",
                "data": sf_data
            })
            
            if result.get("success"):
                logger.info(f"‚úÖ Client Salesforce cr√©√© depuis SAP: {result.get('id')}")
                return {
                    "success": True,
                    "salesforce_id": result.get("id"),
                    "data": sf_data
                }
            else:
                logger.error(f"‚ùå Erreur cr√©ation Salesforce: {result.get('error')}")
                return {
                    "success": False,
                    "error": result.get("error", "Erreur cr√©ation Salesforce")
                }
                
        except Exception as e:
            logger.exception(f"Erreur _create_salesforce_from_sap: {str(e)}")
            return {
                "success": False,
                "error": str(e)
            }
    async def _handle_potential_duplicates(self, duplicate_check: Dict, client_name: str) -> Dict[str, Any]:
        """G√®re les doublons potentiels d√©tect√©s"""
        
        duplicates = duplicate_check.get("duplicates", [])
        
        return {
            "status": "user_interaction_required",
            "interaction_type": "duplicate_resolution",
            "message": f"Doublons potentiels trouv√©s pour '{client_name}'",
            "duplicates": duplicates,
            "options": duplicate_check.get("actions", []),
            "context": {
                "client_name": client_name,
                "duplicate_check": duplicate_check
            }
        }
    async def _request_user_validation_for_client_creation(self, client_name: str, enrichment_data: Dict) -> Dict[str, Any]:
        """Demande validation utilisateur pour cr√©ation client"""
        try:
            logger.info(f"üì© Demande validation cr√©ation client: {client_name}")
            
            # Pour le POC, auto-approuver si donn√©es enrichies disponibles
            if enrichment_data.get("success") and enrichment_data.get("company_data"):
                logger.warning("‚ö†Ô∏è BLOQUAGE: find_client_everywhere n'a trouv√© AUCUN client existant")
                return {
                    "status": "requires_explicit_confirmation",
                    "method": "auto_approved_with_data",
                    "enrichment_data": enrichment_data
                }
            
            # Si pas de donn√©es enrichies, on refuse la cr√©ation.
            logger.warning("‚ö†Ô∏è BLOQUAGE: Aucune donn√©e d'enrichissement ET aucun client trouv√©")
            return {
                "status": "requires_explicit_confirmation",
                "method": "auto_approved_fallback",
                "enrichment_data": enrichment_data,
                "note": "Cr√©ation approuv√©e automatiquement en mode POC"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur validation utilisateur: {str(e)}")
            return {
                "status": "error",
                "error": str(e)
            }


    
    async def _create_client_if_needed(self, client_name: str) -> Dict[str, Any]:
        """Cr√©ation automatique du client si n√©cessaire"""
        try:
            import re
            import time

            # G√©n√©ration CardCode unique
            clean_name = re.sub(r'[^a-zA-Z0-9]', '', client_name)[:8].upper()
            timestamp = str(int(time.time()))[-4:]
            card_code = f"AUTO{clean_name}{timestamp}"[:15]

            # Donn√©es client SAP
            sap_client_data = {
                "CardCode": card_code,
                "CardName": client_name,
                "CardType": "cCustomer",
                "GroupCode": 100,
                "Currency": "EUR",
                "Valid": "tYES",
                "Frozen": "tNO",
                "Notes": f"Client cr√©√© automatiquement par NOVA"
            }

            logger.info(f"üÜï Cr√©ation client SAP: {card_code} ({client_name})")

            # Cr√©ation dans SAP
            create_result = await self.mcp_connector.call_sap_mcp(
                "sap_create_customer_complete",
                {"customer_data": sap_client_data}
            )

            if create_result.get("success", False):
                logger.info(f"‚úÖ Client SAP cr√©√© avec succ√®s: {card_code}")
                
                # Cr√©ation parall√®le dans Salesforce
                sf_data = {
                    "Name": client_name,
                    "AccountNumber": card_code,
                    "Type": "Customer",
                    "Industry": "Technology"
                }

                sf_result = await self.mcp_connector.call_mcp(
                    "salesforce_mcp",
                    "salesforce_create_record",
                    {"sobject": "Account", "data": sf_data}
                )

                return {
                    "created": True,
                    "sap_client": create_result.get("data", {"CardCode": card_code, "CardName": client_name}),
                    "salesforce_client": sf_result.get("data") if sf_result.get("success") else None,
                    "message": f"Client '{client_name}' cr√©√© avec succ√®s"
                }
            else:
                return {
                    "created": False,
                    "error": create_result.get("error", "Erreur inconnue lors de la cr√©ation SAP")
                }

        except Exception as e:
            logger.exception(f"Erreur cr√©ation client: {str(e)}")
            return {"created": False, "error": str(e)}
    def _extract_product_keywords(self, product_name: str) -> List[str]:
        """G√©n√®re mots-cl√©s de recherche pour SAP"""
        import re
        import unicodedata

        # Garde-fou
        if not product_name or not isinstance(product_name, str):
            return []

        def _normalize(s: str) -> str:
            # lower + suppression des accents pour matcher "√©cran" vs "ecran"
            s_nfkd = unicodedata.normalize("NFKD", s)
            s_no_accents = "".join(ch for ch in s_nfkd if not unicodedata.combining(ch))
            return s_no_accents.lower()

        product_lower = product_name.lower()
        product_norm = _normalize(product_name)

        search_terms: List[str] = []
        seen = set()  # d√©duplication en pr√©servant l‚Äôordre

        def _add(term: str):
            t = term.strip()
            if not t:
                return
            key = _normalize(t)
            if key not in seen:
                seen.add(key)
                search_terms.append(t)

        # Dictionnaire enrichi fran√ßais/anglais avec filtrage intelligent
        translations = {
            "imprimante": ["printer", "Printer", "PRINTER", "laser printer", "inkjet printer"],
            "ordinateur": ["computer", "PC", "desktop", "workstation", "laptop"],
            "√©cran": ["monitor", "screen", "display", "LCD", "LED"],
            "clavier": ["keyboard", "Keys", "mechanical keyboard"],
            "souris": ["mouse", "optical mouse", "wireless mouse"],
            "scanner": ["scanner", "scan", "document scanner"],
            "laser": ["laser", "LaserJet", "laser printer"],
            "couleur": ["color", "colour", "couleur"],
            "noir": ["black", "monochrome", "mono"],
            "ppm": ["ppm", "pages per minute", "page/min"],
        }

        # Chercher correspondances exactes avec priorit√© sur les termes sp√©cifiques
        for french_term, english_terms in translations.items():
            fr_norm = _normalize(french_term)
            if fr_norm in product_norm:
                # Ajouter les termes les plus sp√©cifiques en premier (max 2)
                for t in english_terms[:2]:
                    _add(t)

        # Ajouter le terme original si pas encore ajout√©
        _add(product_name)

        # Extraire caract√©ristiques num√©riques (PPM, etc.)
        numbers = re.findall(r"\d+", product_lower)
        for num in numbers:
            try:
                val = int(num)
            except ValueError:
                continue
            if 5 < val < 1000:  # Filtre raisonnable pour PPM/capacit√©s
                _add(f"{num}ppm")
                _add(f"{num} ppm")
                _add(f"{num} pages")

        # Limiter √† 6 termes maximum
        return search_terms[:6]

    
    def _get_english_search_terms(self, product_name: str) -> List[str]:
        """G√©n√®re des termes de recherche anglais pour SAP"""
        product_lower = product_name.lower()
        
        # Mapping fran√ßais -> anglais pour SAP
        translations = {
            "imprimante": ["printer", "Printer", "PRINTER"],
            "ordinateur": ["computer", "Computer", "PC"],
            "√©cran": ["monitor", "Monitor", "screen"],
            "clavier": ["keyboard", "Keyboard"],
            "souris": ["mouse", "Mouse"],
            "scanner": ["scanner", "Scanner"]
        }
        
        search_terms = []
        for french_term, english_terms in translations.items():
            if french_term in product_lower:
                search_terms.extend(english_terms)
                break
        
        # Ajouter le terme original en dernier
        search_terms.append(product_name)
        
        return search_terms[:3]
    
    async def _process_products_retrieval(self, products: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        R√©cup√©ration des produits avec progression avanc√©e
        """
        ACCESSORY_TERMS = ('cartouche', 'encre', 'toner', 'cable', 'c√¢ble')

        def _odata_escape(s: str) -> str:
            try:
                return str(s).replace("'", "''")
            except Exception:
                return str(s or "")

        try:
            if not products:
                return {
                    "status": "success",
                    "products": [],
                    "message": "Aucun produit √† traiter"
                }

            self._track_step_progress("lookup_products", 10, f"üîç Recherche de {len(products)} produit(s)...")

            found_products: List[Dict[str, Any]] = []
            products_needing_selection: List[Dict[str, Any]] = []
            total_products = len(products)

            for i, product in enumerate(products):
                product_name = str(product.get("name", "") or "")
                product_code = str(product.get("code", "") or "")
                try:
                    quantity = int(product.get("quantity", 1) or 1)
                except Exception:
                    quantity = 1
                if quantity < 1:
                    quantity = 1

                # Progression (sur i+1 pour une mont√©e plus r√©guli√®re)
                progress = int(20 + ((i + 1) / total_products) * 70)
                self._track_step_progress("lookup_products", progress, f"üì¶ Recherche '{product_name}' ({i+1}/{total_products})")

                # === RECHERCHE INTELLIGENTE ===
                try:
                    smart_search = await self._smart_product_search(product_name, product_code)
                    if not isinstance(smart_search, dict):
                        smart_search = {"found": False, "products": [], "method": "invalid_response"}
                    smart_search.setdefault("found", False)
                    smart_search.setdefault("products", [])
                    smart_search_method = smart_search.get("method")
                except Exception as e:
                    logger.error(f"‚ùå Erreur appel _smart_product_search: {str(e)}")
                    smart_search = {"found": False, "products": [], "method": "call_error", "error": str(e)}
                    smart_search_method = "call_error"

                if smart_search["found"] and smart_search["products"]:
                    products_found = smart_search.get("products") or []
                    if self._is_generic_search(product_name) and len(products_found) > 1:
                        logger.info(f"‚ö†Ô∏è Terme g√©n√©rique '{product_name}' avec {len(products_found)} options - Interaction requise")
                        products_needing_selection.append({
                            "original_name": product_name,
                            "original_code": product_code,
                            "quantity": quantity,
                            "options": products_found[:5],
                            "search_method": smart_search_method,
                            "selection_reason": f"Terme '{product_name}' trop g√©n√©rique - {len(products_found)} produits correspondent"
                        })
                        continue
                    # AJOUT: Arr√™ter le workflow imm√©diatement pour demander la s√©lection
                    if products_needing_selection:
                        logger.warning(f"‚è∏Ô∏è Arr√™t workflow - {len(products_needing_selection)} produit(s) n√©cessitent s√©lection")
                        return {
                            "status": "product_selection_required",
                            "products": products_needing_selection,
                            "message": "S√©lection de produits requise"
                        }
                    # Auto-s√©lection si 1 r√©sultat, sinon on prend le 1er comme ‚Äúbest‚Äù
                    best_list = products_found[:1] if len(products_found) == 1 else products_found[:1]
                    if not best_list:
                        # garde d√©fensive ultra rare
                        logger.debug("Aucun produit exploitable dans smart_search malgr√© found=True")
                    else:
                        best_match = best_list[0]
                        logger.info(f"‚úÖ Produit auto-s√©lectionn√©: {best_match.get('ItemName')} - Code: {best_match.get('ItemCode')} - Quantit√©: {quantity}")
                        found_products.append({
                            **self._format_product_data(best_match, quantity),  # Passer la vraie quantit√©
                            "search_method": smart_search_method,
                            "found": True
                        })
                    continue

                # Recherche traditionnelle si recherche intelligente √©choue
                product_found = False

                # √âtape 1: Recherche exacte par code
                if product_code:
                    try:
                        exact_search = await self.mcp_connector.call_sap_mcp(
                            "sap_read",
                            {"endpoint": f"/Items('{_odata_escape(product_code)}')", "method": "GET"}
                        )
                        if isinstance(exact_search, dict) and "error" not in exact_search and exact_search.get("ItemCode"):
                            logger.info(f"‚úÖ Produit trouv√© par code exact: {product_code}")
                            found_products.append({
                                **self._format_product_data(exact_search, quantity),
                                "search_method": "exact_code",
                                "found": True
                            })
                            continue
                    except Exception as e:
                        logger.debug(f"Recherche par code exact √©chou√©e: {str(e)}")

                # √âtape 2: Recherche par nom exact
                if product_name and not product_found:
                    try:
                        pn = _odata_escape(product_name)
                        name_search = await self.mcp_connector.call_sap_mcp(
                            "sap_read",
                            {"endpoint": f"/Items?$filter=ItemName eq '{pn}'&$top=1", "method": "GET"}
                        )
                        values = (name_search or {}).get("value") or []
                        if values:
                            logger.info(f"‚úÖ Produit trouv√© par nom exact: {product_name}")
                            found_products.append({
                                **self._format_product_data(values[0], quantity),
                                "search_method": "exact_name",
                                "found": True
                            })
                            continue
                    except Exception as e:
                        logger.debug(f"Recherche nom exact √©chou√©e: {str(e)}")

                # √âtape 3: Recherches par mots-cl√©s √©largies
                if not product_found:
                    for keyword in self._extract_product_keywords(product_name):
                        if not keyword:
                            continue
                        kw = _odata_escape(keyword)
                        logger.info(f"üîé Recherche avec mot-cl√©: '{keyword}'")

                        # Recherche filtr√©e (√©viter accessoires)
                        try:
                            filter_query = (
                                f"contains(tolower(ItemName),tolower('{kw}')) "
                                f"and not contains(tolower(ItemName),'cartouche') "
                                f"and not contains(tolower(ItemName),'encre') "
                                f"and not contains(tolower(ItemName),'toner') "
                                f"and not contains(tolower(ItemName),'cable')"
                            )
                            result = await self.mcp_connector.call_sap_mcp(
                                "sap_read",
                                {"endpoint": f"/Items?$filter={filter_query}&$top=5", "method": "GET"}
                            )
                            values = (result or {}).get("value") or []
                            if not values:
                                # Fallback simple
                                result = await self.mcp_connector.call_sap_mcp(
                                    "sap_read",
                                    {"endpoint": f"/Items?$filter=contains(tolower(ItemName),tolower('{kw}'))&$top=5", "method": "GET"}
                                )
                                values = (result or {}).get("value") or []

                            if values:
                                best_match = None
                                for match in values:
                                    item_name_lower = (match.get('ItemName') or '').lower()
                                    if not any(acc in item_name_lower for acc in ACCESSORY_TERMS):
                                        best_match = match
                                        break
                                if not best_match:
                                    best_match = values[0]

                                logger.info(f"‚úÖ Produit trouv√© par mot-cl√© '{keyword}': {best_match.get('ItemName')}")
                                found_products.append({
                                    **self._format_product_data(best_match, quantity),
                                    "search_method": f"keyword_{keyword}",
                                    "found": True
                                })
                                product_found = True
                                break
                        except Exception as e:
                            logger.debug(f"Recherche '{keyword}' √©chou√©e: {str(e)}")
                            # on tente le tour suivant

                # Si aucun produit trouv√©, utiliser le syst√®me de suggestions
                if not product_found:
                    logger.warning(f"‚ùå Produit non trouv√©: {product_name or product_code}")
                    logger.info(f"üîç Recherche de suggestions pour: {product_name or product_code}")
                    try:
                        all_products_result = await self.mcp_connector.call_sap_mcp(
                            "sap_read",
                            {"endpoint": "/Items?$select=ItemCode,ItemName,OnHand,Price&$top=500", "method": "GET"}
                        )
                        if isinstance(all_products_result, dict) and "error" not in all_products_result and "value" in all_products_result:
                            available_products = all_products_result["value"]
                            from services.suggestion_engine import SuggestionEngine
                            suggestion_engine = SuggestionEngine()
                            suggestion_result = await suggestion_engine.suggest_product(product_name or product_code, available_products)

                            if getattr(suggestion_result, "has_suggestions", False):
                                found_products.append({
                                    "code": product_code or f"UNKNOWN_{i}",
                                    "name": product_name or "Produit √† identifier",
                                    "quantity": quantity,
                                    "unit_price": 0.0,
                                    "total_price": 0.0,
                                    "currency": "EUR",
                                    "sap_data": None,
                                    "found": False,
                                    "requires_selection": True,
                                    "suggestions": suggestion_result.to_dict(),
                                    "original_request": product_name or product_code
                                })
                                logger.info(f"‚úÖ Suggestions trouv√©es pour: {product_name or product_code}")
                            else:
                                found_products.append({
                                    "code": product_code or f"UNKNOWN_{i}",
                                    "name": product_name or "Produit inconnu",
                                    "quantity": quantity,
                                    "error": f"Aucun produit similaire trouv√© dans le catalogue pour '{product_name or product_code}'",
                                    "requires_manual_search": True,
                                    "original_request": product_name or product_code
                                })
                                logger.error(f"‚ùå Aucune suggestion trouv√©e pour: {product_name or product_code}")
                        else:
                            found_products.append({
                                "code": product_code or f"ERROR_{i}",
                                "name": product_name or "Produit inaccessible",
                                "quantity": quantity,
                                "error": "Impossible d'acc√©der au catalogue SAP pour trouver des alternatives",
                                "requires_manual_search": True,
                                "original_request": product_name or product_code
                            })
                    except Exception as e:
                        logger.error(f"Erreur lors de la recherche de suggestions: {str(e)}")
                        found_products.append({
                            "code": product_code or f"ERROR_{i}",
                            "name": product_name or "Erreur produit",
                            "quantity": quantity,
                            "error": f"Erreur technique lors de la recherche: {str(e)}",
                            "requires_manual_search": True,
                            "original_request": product_name or product_code
                        })

            # Finaliser la progression
            self._track_step_progress("lookup_products", 100, "‚úÖ Recherche termin√©e")

            # Statistiques et validation
            found_count = sum(1 for p in found_products if p.get("found"))
            selection_count = len(products_needing_selection)
            suggestions_count = sum(1 for p in found_products if p.get("requires_selection"))
            errors_count = sum(1 for p in found_products if p.get("error"))

            logger.info(f"üìä Produits: {found_count}/{len(products)} trouv√©s, {selection_count + suggestions_count} n√©cessitent s√©lection, {errors_count} erreurs")

            if products_needing_selection or suggestions_count > 0 or errors_count > 0:
                logger.warning("‚ö†Ô∏è S√©lection de produits requise - Interruption du workflow")
                all_products_needing_action = products_needing_selection + [p for p in found_products if p.get("requires_selection") or p.get("error")]
                return {
                    "status": "product_selection_required",
                    "message": f"{len(all_products_needing_action)} produit(s) n√©cessitent votre attention",
                    "products": all_products_needing_action,
                    "workflow_context": {
                        "client_info": self.context.get("client_info", {}),
                        "task_id": self.task_id,
                        "step": "product_selection"
                    },
                    "requires_user_action": True
                }

            total_amount = sum(p.get("total_price", 0) for p in found_products if p.get("found"))
            return {
                "status": "success",
                "products": found_products,
                "stats": {
                    "total_requested": total_products,
                    "found": found_count,
                    "not_found": total_products - found_count,
                    "total_amount": total_amount
                },
                "message": f"{found_count}/{total_products} produit(s) trouv√©(s)"
            }

        except Exception as e:
            logger.exception(f"Erreur r√©cup√©ration produits: {str(e)}")
            return {
                "status": "error",
                "products": [],
                "stats": {
                    "total_requested": len(products) if products else 0,
                    "found": 0,
                    "not_found": len(products) if products else 0,
                    "total_amount": 0
                },
                "message": f"Erreur syst√®me: {str(e)}"
            }

    def _format_product_data(self, sap_product: Dict[str, Any], quantity: int) -> Dict[str, Any]:
        """Formate les donn√©es produit SAP en format standard - CORRECTION: Pr√©server quantit√© exacte"""
        unit_price = float(sap_product.get("Price") or sap_product.get("AvgPrice", 0))
        if unit_price == 0:
            unit_price = self._estimate_product_price(sap_product.get("ItemName", ""))

        return {
            "code": sap_product.get("ItemCode", ""),
            "name": sap_product.get("ItemName", ""),
            "quantity": quantity,  # CRITIQUE: Utiliser la quantit√© pass√©e en param√®tre
            "unit_price": unit_price,
            "total_price": unit_price * quantity,  # Calculer avec la vraie quantit√©
            "currency": "EUR",
            "stock": int(sap_product.get("OnHand", 0)),
            "description": sap_product.get("U_Description", ""),
            "sap_data": sap_product,
            "Price": unit_price
        }
    async def _create_quote_document(self, client_result: Dict, products_result: Dict) -> Dict[str, Any]:
        """
        Cr√©ation document devis avec donn√©es r√©elles
        """
        try:
            logger.info("üìã Cr√©ation du document de devis")
            
            # === DONN√âES CLIENT ===
            client_data = client_result.get("data", {})
            if not client_data:
                return {
                    "status": "error",
                    "quote_data": None,
                    "message": "Donn√©es client manquantes"
                }
            
            # === DONN√âES PRODUITS ===
            products_data = products_result.get("products", [])
            if not products_data:
                return {
                    "status": "error", 
                    "quote_data": None,
                    "message": "Aucun produit √† inclure"
                }
            
            # === CALCULS ===
            total_amount = sum(product.get("total_price", 0) for product in products_data)
            products_count = len(products_data)
            found_products_count = len([p for p in products_data if p.get("found", False)])
            
            # === G√âN√âRATION ID DEVIS ===
            quote_id = f"QUOTE_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            
            # === DOCUMENT DEVIS COMPLET ===
            quote_document = {
                "quote_id": quote_id,
                "created_date": datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
                "created_timestamp": datetime.now().isoformat(),
                "status": "draft",
                "currency": "EUR",
                
                # Informations client
                "client": {
                    "name": client_data.get("Name", "Client Inconnu"),
                    "account_number": client_data.get("AccountNumber", ""),
                    "salesforce_id": client_data.get("Id", ""),
                    "phone": client_data.get("Phone", ""),
                    "email": client_data.get("Email", ""),
                    "billing_city": client_data.get("BillingCity", ""),
                    "billing_country": client_data.get("BillingCountry", "")
                },
                
                # Produits d√©taill√©s
                "products": products_data,
                
                # Totaux et statistiques
                "totals": {
                    "subtotal": total_amount,
                    "tax_rate": 0.20,  # TVA 20%
                    "tax_amount": total_amount * 0.20,
                    "total_amount": total_amount * 1.20,
                    "products_count": products_count,
                    "found_products_count": found_products_count
                },
                
                # M√©tadonn√©es
                "metadata": {
                    "generated_by": "NOVA AI Assistant",
                    "workflow_version": "2.0",
                    "task_id": self.task_id,
                    "client_source": client_result.get("source", "unknown"),
                    "products_stats": products_result.get("stats", {})
                }
            }
            
            # === LOG ET RETOUR ===
            logger.info(f"‚úÖ Devis cr√©√©: {quote_id}")
            logger.info(f"   Client: {client_data.get('Name')}")
            logger.info(f"   Produits: {found_products_count}/{products_count}")
            logger.info(f"   Total HT: {total_amount:.2f}‚Ç¨")
            logger.info(f"   Total TTC: {total_amount * 1.20:.2f}‚Ç¨")
            
            return {
                "status": "success",
                "quote_data": quote_document,  # s'assurer que quote_document est d√©fini
                "message": f"Devis {quote_id} cr√©√© avec {found_products_count}/{products_count} produits"
            }
            
        except Exception as e:
            logger.exception(f"Erreur cr√©ation devis: {str(e)}")
            return {
                "status": "error",
                "quote_data": None,
                "message": f"Erreur cr√©ation devis: {str(e)}"
            }

    
    async def _create_salesforce_opportunity_safe(self, quote_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        üîß CR√âATION S√âCURIS√âE d'opportunit√© Salesforce
        """
        try:
            client_data = quote_data.get("client_data", {})
            
            # Validation pr√©alable
            if not client_data or not client_data.get("Id"):
                logger.error("‚ùå Impossible de cr√©er l'opportunit√© : client Salesforce requis")
                return {
                    "success": False,
                    "error": "Client Salesforce requis pour cr√©er l'opportunit√©",
                    "skip_reason": "missing_client"
                }

            # Donn√©es minimales pour √©viter les erreurs
            opportunity_data = {
                "Name": f"Devis {quote_data.get('quote_id', 'AUTO')} - {client_data.get('Name', 'Client')}",
                "AccountId": client_data["Id"],
                "StageName": "Prospecting",  # √âtape existante dans Salesforce
                "CloseDate": (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")
            }
            
            # Ajouter le montant seulement s'il est valide
            total_amount = quote_data.get("total_amount", 0)
            if total_amount and total_amount > 0:
                opportunity_data["Amount"] = total_amount

            logger.info(f"üìã Cr√©ation opportunit√©: {opportunity_data['Name']}")

            result = await self.mcp_connector.call_mcp(
                "salesforce_mcp",
                "salesforce_create_record",
                {
                    "sobject": "Opportunity",
                    "data": opportunity_data
                }
            )

            if result.get("success"):
                logger.info(f"‚úÖ Opportunit√© cr√©√©e: {result.get('id')}")
                return {
                    "success": True,
                    "opportunity_id": result.get("id"),
                    "data": opportunity_data
                }
            else:
                logger.error(f"‚ùå Erreur cr√©ation opportunit√©: {result.get('error')}")
                return {
                    "success": False,
                    "error": result.get("error", "Erreur inconnue"),
                    "attempted_data": opportunity_data
                }

        except Exception as e:
            logger.exception(f"‚ùå Exception cr√©ation opportunit√©: {str(e)}")
            return {
                "success": False,
                "error": f"Exception: {str(e)}"
            }
    

    async def _sync_quote_to_systems(self, quote_result: Dict, target: str = None) -> Dict[str, Any]:
        """
        Synchronisation vers SAP/Salesforce - VERSION PRODUCTION COMPL√àTE
        
        Args:
            quote_result: R√©sultat contenant les donn√©es de devis consolid√©es
            target: Syst√®me cible sp√©cifique ('sap', 'salesforce') ou None pour les deux
            
        Returns:
            Dict avec statut de synchronisation d√©taill√©
        """
        try:
            # === VALIDATIONS INITIALES ===
            quote_data = quote_result.get("quote_data", {})
            
            # Validation du param√®tre target
            if target and target not in ("sap", "salesforce"):
                logger.error(f"‚ùå Target invalide: {target}")
                return {
                    "status": "error",
                    "message": f"Target '{target}' non support√©. Utilisez 'sap' ou 'salesforce'"
                }
            
            # Validation des donn√©es de devis
            if not quote_data:
                logger.error("‚ùå Aucune donn√©e de devis √† synchroniser")
                return {
                    "status": "error",
                    "message": "Pas de donn√©es de devis √† synchroniser"
                }
            
            quote_id = quote_data.get("quote_id")
            if not quote_id:
                logger.error("‚ùå Quote ID manquant")
                return {
                    "status": "error", 
                    "message": "Quote ID manquant dans les donn√©es"
                }
            
            # === FLAG PRODUCTION CENTRALIS√â ===
            NOVA_MODE = os.getenv("NOVA_MODE", "draft")
            is_production_mode = NOVA_MODE == "production"
            
            if is_production_mode:
                logger.info(f"üöÄ MODE PRODUCTION - Synchronisation r√©elle du devis {quote_id}")
            else:
                logger.info(f"üéØ MODE DRAFT - Simulation synchronisation du devis {quote_id}")
            
            # === EXTRACTION ET VALIDATION DES DONN√âES ===
            client_data = quote_data.get("client", {})
            products_data = quote_data.get("products", [])
            
            # Validation donn√©es client
            if not client_data:
                logger.error("‚ùå Donn√©es client manquantes")
                return {
                    "status": "error",
                    "message": "Donn√©es client manquantes pour la synchronisation"
                }
            # CardCode minimal pour SAP si SAP demand√©
            if (not target or target == "sap") and not (client_data.get("CardCode") or client_data.get("sap_code")):
                logger.error("‚ùå Code client SAP manquant (CardCode/sap_code)")
                return {
                    "status": "error",
                    "message": "Code client SAP manquant (CardCode/sap_code)"
                }
                
            # Validation donn√©es produits
            if not products_data:
                logger.error("‚ùå Aucun produit √† synchroniser")
                return {
                    "status": "error", 
                    "message": "Aucun produit √† synchroniser"
                }

            # Normalisation utilitaires internes (sans toucher √† l‚ÄôAPI externe)
            def _to_number(v, default=0.0):
                try:
                    return float(v)
                except (TypeError, ValueError):
                    return float(default)

            def _to_qty(v, default=1):
                try:
                    q = int(float(v))
                    return q if q > 0 else default
                except (TypeError, ValueError):
                    return default
            
            now = datetime.now()
            close_date_str = (now + timedelta(days=30)).strftime("%Y-%m-%d")
            doc_date_str = now.strftime("%Y-%m-%d")

            # Validation des prix produits + total calcul√©
            total_amount_validation = 0.0
            for product in products_data:
                price = _to_number(product.get("UnitPrice", product.get("price", 0)), 0.0)
                quantity = _to_qty(product.get("Quantity", product.get("quantity", 1)), 1)
                if price <= 0:
                    logger.warning(f"‚ö†Ô∏è Produit {product.get('ItemCode') or product.get('code') or 'UNKNOWN'} sans prix valide: {price}")
                total_amount_validation += price * quantity
            
            if total_amount_validation <= 0:
                logger.error(f"‚ùå Montant total invalide: {total_amount_validation}")
                return {
                    "status": "error",
                    "message": f"Montant total invalide: {total_amount_validation}‚Ç¨"
                }
            
            # === INITIALISATION DES R√âSULTATS ===
            sync_results = {
                "sap_sync": {
                    "attempted": False,
                    "success": False,
                    "message": "Non tent√©",
                    "quote_sap_id": None,
                    "doc_entry": None
                },
                "salesforce_sync": {
                    "attempted": False,
                    "success": False,
                    "message": "Non tent√©", 
                    "opportunity_id": None
                }
            }
            
            # === SYNCHRONISATION SAP ===
            if not target or target == "sap":
                sync_results["sap_sync"]["attempted"] = True
                logger.info(f"üì° D√©but synchronisation SAP pour {quote_id}")
                
                # Pr√©paration structure SAP quotation_data
                sap_quotation_data = {
                    "CardCode": client_data.get("CardCode") or client_data.get("sap_code"),
                    "CardName": client_data.get("CardName") or client_data.get("name"),
                    "DocDate": doc_date_str,
                    "DocDueDate": close_date_str,
                    "Comments": f"Devis g√©n√©r√© automatiquement NOVA - {quote_id}",
                    "DocumentLines": []
                }
                
                # Construction des lignes de devis SAP
                for product in products_data:
                    item_code = product.get("ItemCode") or product.get("code")
                    unit_price = _to_number(product.get("UnitPrice", product.get("price", 0)), 0.0)
                    quantity = _to_qty(product.get("Quantity", product.get("quantity", 1)), 1)
                    
                    if not item_code:
                        logger.warning(f"‚ö†Ô∏è Produit sans ItemCode ignor√©: {product}")
                        continue
                        
                    line_data = {
                        "ItemCode": item_code,
                        "Quantity": quantity,
                        "UnitPrice": unit_price,
                        "LineTotal": unit_price * quantity,
                        "WarehouseCode": product.get("WarehouseCode", "01"),  # Entrep√¥t par d√©faut
                        "VatGroup": product.get("VatGroup", "FR_VAT_20")      # TVA par d√©faut France
                    }
                    sap_quotation_data["DocumentLines"].append(line_data)
                
                # Validation finale des lignes SAP
                if not sap_quotation_data["DocumentLines"]:
                    sync_results["sap_sync"]["message"] = "Aucune ligne valide pour SAP"
                    logger.error("‚ùå Aucune ligne valide pour le devis SAP")
                else:
                    # === APPEL SAP R√âEL OU SIMULATION ===
                    if is_production_mode:
                        logger.info(f"üì° Appel SAP R√âEL sap_create_quotation_complete")
                        sap_results = await self.mcp_connector.sap_create_quotation_complete(sap_quotation_data)
                        
                        if sap_results.get("success"):
                            sync_results["sap_sync"]["success"] = True
                            sync_results["sap_sync"]["message"] = "Devis SAP cr√©√© avec succ√®s"
                            sync_results["sap_sync"]["quote_sap_id"] = sap_results.get("DocNum")
                            sync_results["sap_sync"]["doc_entry"] = sap_results.get("DocEntry")
                            logger.info(f"‚úÖ Devis SAP cr√©√©: DocNum={sap_results.get('DocNum')}")
                        else:
                            sync_results["sap_sync"]["message"] = sap_results.get("error", "Erreur SAP inconnue")
                            logger.error(f"‚ùå Erreur cr√©ation devis SAP: {sync_results['sap_sync']['message']}")
                    else:
                        # MODE DRAFT - Simulation r√©aliste
                        await asyncio.sleep(0.8)  # Simulation latence SAP
                        sync_results["sap_sync"]["success"] = True
                        sync_results["sap_sync"]["message"] = "Simulation SAP r√©ussie (mode draft)"
                        sync_results["sap_sync"]["quote_sap_id"] = f"DRAFT_SAP_{quote_id}"
                        sync_results["sap_sync"]["doc_entry"] = f"ENTRY_DRAFT_{quote_id}"
                        logger.info(f"üéØ Simulation SAP termin√©e pour {quote_id}")
            
            # === SYNCHRONISATION SALESFORCE ===
            if not target or target == "salesforce":
                sync_results["salesforce_sync"]["attempted"] = True
                logger.info(f"‚òÅÔ∏è D√©but synchronisation Salesforce pour {quote_id}")
                
                # Validation des pr√©requis Salesforce
                if not client_data.get("salesforce_id") and not client_data.get("AccountId"):
                    sync_results["salesforce_sync"]["message"] = "AccountId Salesforce manquant"
                    logger.error("‚ùå AccountId Salesforce manquant pour l'opportunit√©")
                else:
                    # Pr√©paration donn√©es opportunit√© Salesforce
                    sf_opportunity_data = {
                        "Name": f"Devis {client_data.get('name', client_data.get('CardName', 'Client'))} - {doc_date_str}",
                        "AccountId": client_data.get("salesforce_id") or client_data.get("AccountId"),
                        "CloseDate": close_date_str,
                        "StageName": "Quotation",
                        "Amount": quote_data.get("total_amount", total_amount_validation),
                        "Description": f"Devis NOVA automatique - {quote_id}",
                        "Type": "New Customer",
                        "LeadSource": "NOVA System"
                    }
                    
                    # Construction des line items Salesforce
                    sf_line_items = []
                    for product in products_data:
                        salesforce_id = product.get("salesforce_id") or product.get("Product2Id")
                        if salesforce_id:  # Seulement les produits mapp√©s Salesforce
                            line_item = {
                                "Product2Id": salesforce_id,
                                "Quantity": _to_qty(product.get("Quantity", product.get("quantity", 1)), 1),
                                "UnitPrice": _to_number(product.get("UnitPrice", product.get("price", 0)), 0.0),
                                "Description": product.get("ItemName") or product.get("name", "")
                            }
                            sf_line_items.append(line_item)
                    
                    # === APPEL SALESFORCE R√âEL OU SIMULATION ===
                    if is_production_mode:
                        logger.info(f"üì° Appel Salesforce R√âEL salesforce_create_opportunity_complete")
                        sf_result = await self.mcp_connector.salesforce_create_opportunity_complete(
                            sf_opportunity_data, sf_line_items
                        )
                        
                        if sf_result.get("success"):
                            sync_results["salesforce_sync"]["success"] = True
                            sync_results["salesforce_sync"]["message"] = "Opportunit√© Salesforce cr√©√©e avec succ√®s"
                            sync_results["salesforce_sync"]["opportunity_id"] = sf_result.get("id") or sf_result.get("opportunity_id")
                            logger.info(f"‚úÖ Opportunit√© Salesforce cr√©√©e: {sync_results['salesforce_sync']['opportunity_id']}")
                        else:
                            sync_results["salesforce_sync"]["message"] = sf_result.get("error", "Erreur Salesforce inconnue")
                            logger.error(f"‚ùå Erreur cr√©ation opportunit√© Salesforce: {sync_results['salesforce_sync']['message']}")
                    else:
                        # MODE DRAFT - Simulation r√©aliste
                        await asyncio.sleep(0.6)  # Simulation latence Salesforce
                        sync_results["salesforce_sync"]["success"] = True
                        sync_results["salesforce_sync"]["message"] = "Simulation Salesforce r√©ussie (mode draft)"
                        sync_results["salesforce_sync"]["opportunity_id"] = f"DRAFT_SF_{quote_id}"
                        logger.info(f"üéØ Simulation Salesforce termin√©e pour {quote_id}")
            
            # === D√âTERMINATION DU STATUT GLOBAL ===
            sap_success = sync_results["sap_sync"]["success"]
            sf_success = sync_results["salesforce_sync"]["success"]
            sap_attempted = sync_results["sap_sync"]["attempted"]
            sf_attempted = sync_results["salesforce_sync"]["attempted"]
            
            # Logique de statut am√©lior√©e
            if target == "sap":
                if sap_success:
                    status = "success"
                    message = f"Synchronisation SAP r√©ussie pour {quote_id}"
                else:
                    status = "error"
                    message = f"√âchec synchronisation SAP pour {quote_id}: {sync_results['sap_sync']['message']}"
            elif target == "salesforce":
                if sf_success:
                    status = "success"
                    message = f"Synchronisation Salesforce r√©ussie pour {quote_id}"
                else:
                    status = "error"
                    message = f"√âchec synchronisation Salesforce pour {quote_id}: {sync_results['salesforce_sync']['message']}"
            else:
                if sap_success and sf_success:
                    status = "success"
                    message = f"Synchronisation compl√®te r√©ussie pour {quote_id}"
                elif (sap_attempted and sap_success) or (sf_attempted and sf_success):
                    status = "partial_success"
                    failed_systems = []
                    if sap_attempted and not sap_success:
                        failed_systems.append(f"SAP ({sync_results['sap_sync']['message']})")
                    if sf_attempted and not sf_success:
                        failed_systems.append(f"Salesforce ({sync_results['salesforce_sync']['message']})")
                    message = f"Synchronisation partielle pour {quote_id}. √âchecs: {', '.join(failed_systems)}"
                else:
                    status = "error"
                    error_messages = []
                    if sap_attempted:
                        error_messages.append(f"SAP: {sync_results['sap_sync']['message']}")
                    if sf_attempted:
                        error_messages.append(f"Salesforce: {sync_results['salesforce_sync']['message']}")
                    message = f"√âchec synchronisation compl√®te pour {quote_id}. Erreurs: {'; '.join(error_messages)}"
            
            # === LOG DE SYNTH√àSE ===
            mode_display = "PRODUCTION" if is_production_mode else "DRAFT"
            logger.info(f"‚úÖ Synchronisation {mode_display} termin√©e - Statut: {status}")
            
            if sap_attempted:
                sap_status = "‚úÖ" if sap_success else "‚ùå"
                logger.info(f"{sap_status} SAP: {sync_results['sap_sync']['message']}")
            if sf_attempted:
                sf_status = "‚úÖ" if sf_success else "‚ùå"
                logger.info(f"{sf_status} Salesforce: {sync_results['salesforce_sync']['message']}")
            
            # === CONSTRUCTION DE LA R√âPONSE FINALE ===
            response = {
                "status": status,
                "sync_results": sync_results,
                "message": message,
                "quote_id": quote_id,
                "mode": "production" if is_production_mode else "draft",
                "target_filter": target,
                "timestamp": datetime.now().isoformat(),
                "total_amount": total_amount_validation
            }
            
            if sap_success:
                response["sap_quote_number"] = sync_results["sap_sync"]["quote_sap_id"]
                response["sap_doc_entry"] = sync_results["sap_sync"]["doc_entry"]
            
            if sf_success:
                response["salesforce_opportunity_id"] = sync_results["salesforce_sync"]["opportunity_id"]
            
            return response
            
        except Exception as e:
            logger.exception(f"‚ùå Exception critique dans _sync_quote_to_systems: {str(e)}")
            # s√©curise l'acc√®s √† quote_id m√™me si l'exception survient tr√®s t√¥t
            _qd = locals().get("quote_data", {}) or {}
            return {
                "status": "error",
                "message": f"Erreur syst√®me lors de la synchronisation: {str(e)}",
                "quote_id": _qd.get("quote_id", "UNKNOWN"),
                "timestamp": datetime.now().isoformat(),
                "exception_type": type(e).__name__
            }


    def _initialize_task_tracking(self, prompt: str) -> str:
        """
        üîß MODIFICATION : Initialiser le tracking si pas d√©j√† fait
        """
        if not self.current_task:
            
            self.current_task = progress_tracker.create_task(
                user_prompt=prompt,
                draft_mode=self.draft_mode
            )
            self.task_id = self.current_task.task_id
            logger.info(f"üîÑ Tracking initialis√© pour la t√¢che: {self.task_id}")

        return self.task_id
    async def _notify_websocket(self, event_type: str, data: dict):
        """Notification WebSocket"""
        if self.task_id:
            await self.websocket_manager.send_task_update(self.task_id, {
                "event": event_type,
                "data": data
            })

class EnhancedDevisWorkflow(DevisWorkflow):
    """Workflow enrichi avec recherche parall√®le"""
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.suggestion_engine = SuggestionEngine()
        self.websocket_manager = websocket_manager
        self.task_id = None
    
    async def process_prompt(self, prompt: str, task_id: str = None, draft_mode: bool = False):
        """Traitement avec recherche parall√®le"""
        self.task_id = task_id
        
        # Extraction LLM classique
        extracted_info = await self.llm_extractor.extract_devis_info(prompt)
        
        # Recherche parall√®le
        if extracted_info.get("client") and extracted_info.get("products"):
            parallel_result = await self._parallel_client_product_search(extracted_info)
            
            # Continuer avec le workflow existant
            return await super().process_prompt(prompt, draft_mode)
        
        return await super().process_prompt(prompt, draft_mode)
    
    async def _parallel_client_product_search(self, extracted_info: dict):
        """Recherche parall√®le client et produits"""
        
        # Notification WebSocket
        await self._notify_websocket("parallel_search_started", {
            "client_query": extracted_info.get("client"),
            "product_queries": extracted_info.get("products", [])
        })
        
        # Lancer recherches parall√®les
        client_task = asyncio.create_task(
            self._search_client_with_notifications(extracted_info.get("client"))
        )
        product_task = asyncio.create_task(
            self._search_products_with_notifications(extracted_info.get("products", []))
        )
        
        # Attendre r√©sultats
        client_result, product_results = await asyncio.gather(
            client_task, product_task, return_exceptions=True
        )
        
        return {
            "client_result": client_result,
            "product_results": product_results
        }
    async def _search_company_info(self, company_name: str) -> Dict[str, Any]:
        """
        Recherche des informations enrichies sur une entreprise
        """
        logger.info(f"üîç Recherche informations entreprise: {company_name}")
        
        try:
            # Utiliser le service d'enrichissement existant
            
            
            # Rechercher les informations via INSEE/Pappers
            search_result = await client_creation_workflow.search_company_by_name(company_name)
            
            if search_result.get("success") and search_result.get("companies"):
                # Prendre la premi√®re entreprise trouv√©e
                company_data = search_result["companies"][0]
                
                return {
                    "found": True,
                    "company_name": company_data.get("company_name", company_name),
                    "siret": company_data.get("siret", "Non disponible"),
                    "siren": company_data.get("siren", "Non disponible"),
                    "address": {
                        "street": company_data.get("address", ""),
                        "postal_code": company_data.get("postal_code", ""),
                        "city": company_data.get("city", "")
                    },
                    "activity": {
                        "code": company_data.get("activity_code", ""),
                        "label": company_data.get("activity_label", "")
                    },
                    "status": company_data.get("status", "Inconnu"),
                    "creation_date": company_data.get("creation_date", ""),
                    "source": company_data.get("source", "recherche_automatique")
                }
            else:
                # Donn√©es minimales si pas d'enrichissement possible
                return {
                    "found": False,
                    "company_name": company_name,
                    "siret": "√Ä renseigner",
                    "siren": "√Ä renseigner", 
                    "address": {
                        "street": "√Ä renseigner",
                        "postal_code": "√Ä renseigner",
                        "city": "√Ä renseigner"
                    },
                    "activity": {
                        "code": "√Ä renseigner",
                        "label": "√Ä renseigner"
                    },
                    "status": "√Ä v√©rifier",
                    "creation_date": "",
                    "source": "creation_manuelle"
                }
                
        except Exception as e:
            logger.error(f"Erreur enrichissement donn√©es client: {str(e)}")
            return {
                "found": False,
                "company_name": company_name,
                "siret": "Erreur r√©cup√©ration",
                "error": str(e)
            }
    async def _search_client_with_notifications(self, client_name: str):
        """Recherche client avec notifications"""
        
        # √âtape 1: Recherche Salesforce
        await self._notify_websocket("client_search_step", {
            "step": "salesforce",
            "status": "searching",
            "message": f"Recherche de '{client_name}' dans Salesforce..."
        })
        
        sf_result = await self._search_salesforce_client(client_name)
        
        if sf_result.get("found"):
            await self._notify_websocket("client_found", {
                "source": "salesforce",
                "client_data": sf_result["data"],
                "message": f"Client '{client_name}' trouv√© dans Salesforce"
            })
            return sf_result
        
        # √âtape 2: Recherche externe
        await self._notify_websocket("client_search_step", {
            "step": "external_apis",
            "status": "searching",
            "message": f"Recherche externe de '{client_name}'..."
        })
        
        external_result = await company_search_service.search_company(client_name)
        
        if external_result.get("success"):
            await self._notify_websocket("client_external_data", {
                "companies": external_result["companies"],
                "message": f"Donn√©es externes trouv√©es pour '{client_name}'"
            })
            
            return {
                "found": False,
                "external_data": external_result,
                "requires_validation": True
            }
        
        return {"found": False, "message": f"Client '{client_name}' introuvable"}
    async def continue_workflow_with_user_input(self, user_input: Dict[str, Any], interaction_type: str = None) -> Dict[str, Any]:
        """G√®re la continuation du workflow apr√®s interaction utilisateur"""
        
        try:
            logger.info(f"üîÑ Continuation workflow - Type: {interaction_type}")
            
            context = self.context.copy()
            
            if interaction_type == "client_selection":
                return await self._handle_client_selection(user_input, context)
                
            elif interaction_type == "client_creation_confirmation":
                return await self._handle_client_creation_confirmation(user_input, context)
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la continuation du workflow: {str(e)}")
            return {"success": False, "error": str(e)}  
        
    async def _handle_client_creation_confirmation(self, user_input: Dict[str, Any], context: Dict) -> Dict[str, Any]:
        """G√®re la confirmation de cr√©ation d'un nouveau client"""
        
        action = user_input.get("action")
        client_name = user_input.get("client_name") or context.get("client_name")
        
        if action == "confirm_create":
            # L'utilisateur confirme la cr√©ation
            logger.info(f"‚úÖ Utilisateur confirme cr√©ation client: {client_name}")
            
            # R√©cup√©rer les donn√©es enrichies du contexte
            enrichment_data = context.get("enrichment_data", {})
            
            # Proc√©der √† la cr√©ation avec les donn√©es valid√©es
            creation_result = await self._create_validated_client(client_name, enrichment_data)
            
            if creation_result.get("created"):
                # Client cr√©√© avec succ√®s - continuer le workflow
                self.context["client_info"] = {
                    "data": creation_result["client_data"], 
                    "found": True
                }
                
                # Continuer avec la validation des produits
                original_products = context.get("original_products", [])
                return await self._continue_product_validation(original_products)
            else:
                return {
                    "success": False,
                    "message": f"‚ùå Erreur lors de la cr√©ation du client: {creation_result.get('error')}",
                    "type": "error"
                }
        
        elif action == "cancel_create":
            # L'utilisateur annule la cr√©ation
            return {
                "success": False,
                "message": "‚ùå Cr√©ation du client annul√©e par l'utilisateur",
                "type": "cancelled"
            }
        
        elif action == "modify_search":
            # L'utilisateur veut modifier la recherche
            return {
                "success": False,
                "requires_user_input": True,
                "message": "üîç Veuillez pr√©ciser le nom exact du client:",
                "input_type": "text",
                "placeholder": "Nom exact de l'entreprise"
            }
        
        else:
            return {
                "success": False,
                "message": "‚ùå Action non reconnue",
                "type": "error"
            }
    async def _create_validated_client(self, client_name: str, enrichment_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Cr√©e un client apr√®s validation utilisateur avec les donn√©es enrichies
        """
        try:
            logger.info(f"üöÄ Cr√©ation client valid√©: {client_name}")
            
            # Utiliser les donn√©es enrichies pour la cr√©ation
            
            # G√©n√©ration CardCode unique
            clean_name = re.sub(r'[^a-zA-Z0-9]', '', client_name)[:6].upper()
            timestamp = str(int(time.time()))[-4:]
            card_code = f"C{clean_name}{timestamp}"
            
            # Pr√©parer les donn√©es pour SAP avec informations enrichies
            sap_client_data = {
                "CardCode": card_code,
                "CardName": enrichment_data.get("company_name", client_name.title()),
                "CardType": "cCustomer",
                "GroupCode": 100,
                "Currency": "EUR",
                "Valid": "tYES",
                "Frozen": "tNO",
                "FederalTaxID": enrichment_data.get("siret", ""),
                "Notes": f"Client cr√©√© avec validation utilisateur le {datetime.now().strftime('%d/%m/%Y')}"
            }
            
            # Ajouter l'adresse si disponible
            address_data = enrichment_data.get("address", {})
            if address_data.get("street"):
                sap_client_data.update({
                    "MailAddress": address_data.get("street", ""),
                    "MailZipCode": address_data.get("postal_code", ""),
                    "MailCity": address_data.get("city", "")
                })
            
            logger.info(f"üìù Donn√©es SAP valid√©es pr√©par√©es: {card_code}")
            
            # Cr√©ation dans SAP
            result = await self.mcp_connector.call_sap_mcp(
                "sap_create_customer_complete",
                {"customer_data": sap_data}
            )
            
            if not sap_results.get("success", False):
                logger.error(f"‚ùå √âchec cr√©ation SAP: {sap_results.get('error')}")
                return {
                    "created": False,
                    "error": f"Erreur SAP: {sap_results.get('error', 'Erreur inconnue')}"
                }
            
            logger.info(f"‚úÖ Client SAP cr√©√©: {card_code}")
            
            # Pr√©parer les donn√©es pour Salesforce
            sf_client_data = {
                "Name": enrichment_data.get("company_name", client_name.title()),
                "AccountNumber": card_code,
                "Type": "Customer",
                "Industry": enrichment_data.get("activity", {}).get("label", ""),
                "BillingStreet": address_data.get("street", ""),
                "BillingPostalCode": address_data.get("postal_code", ""),
                "BillingCity": address_data.get("city", ""),
                "Description": f"Client cr√©√© avec validation - SIRET: {enrichment_data.get('siret', 'N/A')}"
            }
            
            # Cr√©ation dans Salesforce
            sf_result = await self.mcp_connector.call_mcp(
                "salesforce_mcp",
                "salesforce_create_record",
                {
                    "sobject_type": "Account",
                    "data": sf_client_data
                }
            )
            
            if not sf_result.get("success", False):
                logger.error(f"‚ùå √âchec cr√©ation Salesforce: {sf_result.get('error')}")
                return {
                    "created": False,
                    "error": f"Erreur Salesforce: {sf_result.get('error', 'Erreur inconnue')}"
                }
            
            sf_client_id = sf_result.get("data", {}).get("Id")
            logger.info(f"‚úÖ Client Salesforce cr√©√©: {sf_client_id}")
            
            return {
                "created": True,
                "client_data": {
                    "Id": sf_client_id,
                    "Name": enrichment_data.get("company_name", client_name.title()),
                    "AccountNumber": card_code,
                    "SIRET": enrichment_data.get("siret", ""),
                    "BillingStreet": address_data.get("street", ""),
                    "BillingCity": address_data.get("city", "")
                },
                "sap_card_code": card_code,
                "creation_method": "validated_by_user"
            }
            
        except Exception as e:
            logger.exception(f"‚ùå Erreur cr√©ation client valid√©: {str(e)}")
            return {
                "created": False,
                "error": f"Erreur syst√®me: {str(e)}"
            }
    async def _search_sap_product(self, product_code: str, product_name: str):
        """Recherche produit SAP avec fallback intelligent"""
        try:
            logger.info(f"üîç Recherche SAP: code='{product_code}', nom='{product_name}'")
            
            # 1. Recherche par code exact si disponible
            if product_code and product_code != "":
                try:
                    code_result = await self.mcp_connector.call_mcp(
                        "sap_mcp",
                        "sap_read",
                        {"endpoint": f"/Items('{product_code}')"}
                    )
                    
                    if not code_result.get("error") and code_result.get("ItemCode"):
                        logger.info(f"‚úÖ Produit trouv√© par code: {product_code}")
                        return {
                            "found": True,
                            "data": code_result,
                            "search_method": "code"
                        }
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur recherche par code {product_code}: {e}")
            
            # 2. Recherche par nom avec mots-cl√©s intelligents
            # Protection contre boucle infinie
                search_timeout = asyncio.create_task(asyncio.sleep(30))  # 30 secondes max
                keyword_attempts = 0
                max_keyword_attempts = 3
            if product_name:
                keywords = self._extract_product_keywords(product_name)
                
                for keyword in keywords[:2]:  # Tester 2 mots-cl√©s max
                    # V√©rifier limite d'essais et timeout
                    if keyword_attempts >= max_keyword_attempts:
                        logger.warning(f"‚è∞ Limite d'essais atteinte pour '{product_name}'")
                        break
                    
                    keyword_attempts += 1
                    try:
                        logger.info(f"üîç Recherche avec mot-cl√©: '{keyword}'")
                        
                        search_result = await self.mcp_connector.call_mcp(
                            "sap_mcp",
                            "sap_search",
                            {
                                "query": keyword,
                                "entity_type": "Items",
                                "limit": 5
                            }
                        )
                        
                        if search_result and search_result.get("success") and search_result.get("results"):
                            best_match = search_result["results"][0]
                            logger.info(f"‚úÖ Produit trouv√© via '{keyword}': {best_match.get('ItemName')} ({best_match.get('ItemCode')})")
                            
                            return {
                                "found": True,
                                "data": {
                                    "ItemCode": best_match.get("ItemCode"),
                                    "ItemName": best_match.get("ItemName"),
                                    "OnHand": best_match.get("OnHand", 0),
                                    "AvgPrice": best_match.get("AvgPrice", 0),
                                    "U_Description": best_match.get("U_Description", "")
                                },
                                "search_method": f"keyword_{keyword}",
                                "matched_keyword": keyword
                            }
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Erreur recherche mot-cl√© '{keyword}': {e}")
                        continue
            
            # 3. Recherche avec termes anglais
            if product_name:
                english_terms = self._get_english_search_terms(product_name)
                
                for term in english_terms[:2]:
                    try:
                        logger.info(f"üîç Recherche terme anglais: '{term}'")
                        
                        alt_result = await self.mcp_connector.call_mcp(
                            "sap_mcp",
                            "sap_search",
                            {
                                "query": term,
                                "entity_type": "Items", 
                                "limit": 3
                            }
                        )
                        
                        if alt_result and alt_result.get("success") and alt_result.get("results"):
                            best_match = alt_result["results"][0]
                            logger.info(f"‚úÖ Produit trouv√© via terme '{term}': {best_match.get('ItemName')}")
                            
                            return {
                                "found": True,
                                "data": {
                                    "ItemCode": best_match.get("ItemCode"),
                                    "ItemName": best_match.get("ItemName"),
                                    "OnHand": best_match.get("OnHand", 0),
                                    "AvgPrice": best_match.get("AvgPrice", 0),
                                    "U_Description": best_match.get("U_Description", "")
                                },
                                "search_method": f"english_{term}",
                                "matched_term": term
                            }
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Erreur recherche terme '{term}': {e}")
                        continue
            
            # 4. Recherche g√©n√©rale sur tous les items
            try:
                logger.info("üîç Recherche g√©n√©rale dans Items...")
                all_items = await self.mcp_connector.call_mcp(
                    "sap_mcp",
                    "sap_read",
                    {"endpoint": "/Items?$top=50&$orderby=ItemCode"}
                )
                
                if all_items and not all_items.get("error") and all_items.get("value"):
                    items = all_items["value"]
                    logger.info(f"üì¶ {len(items)} produits disponibles dans SAP")
                    
                    # Chercher correspondance dans les noms
                    for item in items:
                        item_name = item.get("ItemName", "").lower()
                        if any(keyword.lower() in item_name for keyword in self._extract_product_keywords(product_name)):
                            logger.info(f"‚úÖ Correspondance trouv√©e: {item.get('ItemName')}")
                            return {
                                "found": True,
                                "data": item,
                                "search_method": "general_scan"
                            }
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur recherche g√©n√©rale: {e}")
            
            # Aucune correspondance trouv√©e
            logger.warning(f"‚ùå Aucun produit SAP trouv√© pour: code='{product_code}', nom='{product_name}'")
            return {
                "found": False,
                "error": f"Produit non trouv√©: {product_name or product_code}"
            }
            
        except Exception as e:
            logger.exception(f"‚ùå Exception recherche produit: {str(e)}")
            return {
                "found": False,
                "error": f"Erreur syst√®me: {str(e)}"
            }
    
    async def _search_products_with_notifications(self, products: list):
        """Recherche produits avec notifications"""
        
        results = []
        
        for i, product in enumerate(products):
            product_name = product.get("name", "")
            
            await self._notify_websocket("product_search_started", {
                "product_index": i,
                "product_name": product_name,
                "message": f"Recherche produit {i+1}/{len(products)}"
            })
            
            # Recherche SAP
            sap_results = await self._search_sap_product(product.get("code", ""), product_name)
            
            if sap_results.get("found"):
                await self._notify_websocket("product_found", {
                    "product_index": i,
                    "product_data": sap_results["data"],
                    "message": f"Produit '{product_name}' trouv√©"
                })
                results.append({"index": i, "found": True, "data": sap_results["data"]})
            else:
                await self._notify_websocket("product_not_found", {
                    "product_index": i,
                    "product_name": product_name,
                    "message": f"Produit '{product_name}' introuvable"
                })
                results.append({"index": i, "found": False})
        
        return results
    
    async def _notify_websocket(self, event_type: str, data: dict):
        """Notification WebSocket"""
        if self.task_id:
            await self.websocket_manager.send_task_update(self.task_id, {
                "event": event_type,
                "data": data
            })

# Export du routeur pour int√©gration dans main.py
__all__ = ['DevisWorkflow', 'router_v2']